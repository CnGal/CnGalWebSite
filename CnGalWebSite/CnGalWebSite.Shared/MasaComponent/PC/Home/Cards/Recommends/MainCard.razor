@inject IHttpService _httpService
@inject IJSRuntime JS
@implements IDisposable
@inject IDataCacheService _dataCatcheService

<section class="recommends">
    @if (_items.Any())
    {
        <h2>随机推荐</h2>

    }
    <div class="recommends-group">
        @foreach (var item in _items)
        {
            <div class="recommends-item">
                @if (item.Item2 == PersonalRecommendDisplayType.PlainText)
                {
                    <PlainTextCard Model="item.Item1" />
                }
            </div>
        }
    </div>
    @if (loading)
    {
        <CnGalWebSite.Shared.MasaComponent.Shared.Cards.ProgressingCard Class="mt-8" />

    }
</section>



@code {
    List<PersonalRecommendModel> _personalRecommends { get; set; } = new List<PersonalRecommendModel>();
    List<(EntryIndexViewModel, PersonalRecommendDisplayType)> _items { get; set; } = new List<(EntryIndexViewModel, PersonalRecommendDisplayType)>();

    bool loading;

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    private DotNetObjectReference<MainCard> objRef;

    [JSInvokable]
    public async Task LoadMore()
    {
        try
        {
            loading = true;
            StateHasChanged();

            var result = await _httpService.PostAsync<List<PersonalRecommendModel>, List<PersonalRecommendModel>>("api/home/GetPersonalizedRecommendations", _personalRecommends);
            _personalRecommends.AddRange(result);

            foreach(var item in result)
            {
                _items.Add((await _dataCatcheService.EntryIndexPageCatche.GetCache(item.ObjectId.ToString()),item.DisplayType));
            }

            loading = false;
            StateHasChanged();

        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取个性化推荐失败");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await TriggerDotNetInstanceMethod();
        }
    }


    public async Task TriggerDotNetInstanceMethod()
    {
        try
        {
            await JS.InvokeAsync<string>("initInfiniteScroll", objRef);
        }
        catch
        {

        }
    }
    public void Dispose()
    {
        objRef?.Dispose();
    }
}
