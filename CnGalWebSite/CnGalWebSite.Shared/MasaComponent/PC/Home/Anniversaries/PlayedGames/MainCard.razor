@inject IDataCacheService _dataCacheService
@inject NavigationManager NavigationManager
@inject IPageModelCatche<SteamGamesOverviewModel> _pageModelCatche

<style>
    .markdown-body img {
        max-width: 50%;
    }
</style>
<IntroductionCard />
@if (OverviewModel != null)
{
    <div class="row">
        <div class="col-12 col-md-6">
            <HasMostGamesUsersCard Model="OverviewModel.HasMostGamesUsers" />
        </div>
        <div class="col-12 col-md-6">
            <PossessionRateHighestGamesCard Model="OverviewModel.PossessionRateHighestGames" />
        </div>
    </div>
    <AuthorizeView>
        <Authorized>
            @if (Model != null)
            {
                <div id="game-library-card">

                    <UserPlayedGameListView IsCurrentUser="true" SteamId="@Model.SteamId" UserId="@Model.Id" IsAnniversary TotalCount="OverviewModel.Count" UserInfoModel="Model" />

                </div>
            }
        </Authorized>
        <NotAuthorized>
            <div style="display: flex; justify-content: center;" class="rounded shadow-sm  bg-opacity p-3 mb-4">
                <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaButton Text="登入后分享游戏库" OnClick="OnLogin" Icon="@IconType.Login.ToIconString()" />
            </div>
        </NotAuthorized>
    </AuthorizeView>
}
else
{
    <div style="height:300px">
        <CnGalWebSite.Shared.AppComponent.Normal.Loading.LoadingTip Height="100%" />
    </div>
}


@if (isReady)
{
    <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaAlert Type="AlertTypes.Success" Class="mb-4">
    晒出的你的游戏库吧
</CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaAlert>
    <CnGalWebSite.Shared.MasaComponent.PC.Comments.CommentTip CanComment CanDeleted="CanDeleted" ObjectId="2796" Type="CommentType.CommentArticle" Desc/>
}

@code {

    public PersonalSpaceViewModel Model { get; set; }

    SteamGamesOverviewModel OverviewModel;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    bool CanDeleted;
    bool isReady;

    protected override async Task OnInitializedAsync()
    {

        var user = await authenticationStateTask;
        if (user.User.Identity.IsAuthenticated)
        {
            try
            {
                string userId = userId = user.User.Claims.GetUserId();
                //获取用户基本信息
                Model = await _dataCacheService.PersonalSpaceDataCatche.GetCache(userId);
            }
            catch (Exception ex)
            {
                ErrorHandler.ProcessError(ex, "获取用户信息失败");
            }
        }

        if (user.User.IsInRole("Admin"))
        {
            CanDeleted = true;
        }
        isReady = true;

        try
        {
            OverviewModel = await _pageModelCatche.GetCache("api/steam/GetSteamGamesOverview");
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取所有Steam游戏数量失败");
        }
    }

    protected void OnLogin()
    {
        InteractiveRequestOptions requestOptions = new()
        {
            Interaction = InteractionType.SignIn,
            ReturnUrl = NavigationManager.Uri,
        };


        if (ToolHelper.IsSSR)
        {
            NavigationManager.NavigateTo($"Account/Login?returnUrl={NavigationManager.Uri}", true);
        }
        else
        {
            NavigationManager.NavigateToLogin("authentication/login", requestOptions);
        }
    }
}
