@inject HttpClient Http
@inject IDataCacheService _dataCacheService
@inject NavigationManager NavigationManager

<CnGalWebSite.Shared.MasaComponent.Shared.Components.MiniModeContainer>
    <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaTitleContainer Title="留言板" Icon="@IconType.Comment.ToIconString()" Outline>
        @if (CanComment)
        {
            <CommentListView Model="Model" CanDeleted="CanDeleted" OnRefrsh="Refresh" @ref="commentListView"></CommentListView>
            <AuthorizeView>
                <Authorized>
                    <ReplyCommentTip IsChild="false" ObjectId="@ObjectId" Type="Type" OnRefresh="OnOutComment"></ReplyCommentTip>

                </Authorized>
                <NotAuthorized>
                    <div style="display: flex; justify-content: center;" class="rounded shadow-sm  bg-opacity p-3 ">
                        <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaButton Text="登入后发表评论" OnClick="OnLoginClick" Icon="@IconType.Login.ToIconString()" />
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        }
        else
        {
            <CloseCommentTip IsNeedLayput="true"></CloseCommentTip>
        }
    </CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaTitleContainer>
</CnGalWebSite.Shared.MasaComponent.Shared.Components.MiniModeContainer>

@code {
    [Parameter]
    public bool CanComment { get; set; }
    [Parameter]
    public bool IsShowNotFound { get; set; }
    [Parameter]
    public bool CanDeleted { get; set; }
    [Parameter]
    public string ObjectId { get; set; }
    [Parameter]
    public CommentType Type { get; set; }

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    public CommentCacheModel Model = new CommentCacheModel();
    CommentListView commentListView;

    protected override async Task OnParametersSetAsync()
    {
        if (CanComment)
        {
            await GetData();
        }
    }

    private async Task Refresh()
    {
        _dataCacheService.CommentDataCatche.Clean((int)Type + "/" + ObjectId);
        await GetData();
    }
    private async Task OnOutComment()
    {
        await Refresh();
        if (commentListView!=null)
        {
            commentListView.PageToEnd();
        }

    }
    private async Task GetData()
    {
        try
        {
            Model = await _dataCacheService.CommentDataCatche.GetCache((int)Type + "/" + ObjectId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取评论列表失败");
        }
    }
    public void OnLoginClick()
    {
        NavigationManager.NavigateTo("/account/login/" + ToolHelper.Base64EncodeUrl(NavigationManager.Uri));
        
    }
}
