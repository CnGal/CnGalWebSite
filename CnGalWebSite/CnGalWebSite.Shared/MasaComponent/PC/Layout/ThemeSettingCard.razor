@inject IDataCacheService _dataCacheService
@inject IEventService _eventService

<MDialog @bind-Value="Dialog"
         MaxWidth="440">
    <MCard>
        <MCardTitle Class="text-h5">
            主题设置
        </MCardTitle>
        <MCardTitle Class="text-h6">
            主题颜色
        </MCardTitle>
        <MCardText>

            你可以从下方选择一个喜欢的颜色作为主题颜色，选择黑色可以进入夜间模式
        </MCardText>

        <MCardText>
            <MButtonGroup Borderless Value="colorString" ValueChanged="ColorValueChanged" Style="display: flex; flex-wrap: wrap; border-radius: 0; ">
                <MButton Value="@("red")" Color="red" Small Style="min-width: 28px;" />
                <MButton Value="@("pink lighten-2")" Color="pink lighten-2" Small Style="min-width: 28px;" />
                <MButton Value="@("purple")" Color="purple" Small Style="min-width: 28px;" />
                <MButton Value="@("deep-purple")" Color="deep-purple" Small Style="min-width: 28px;" />
                <MButton Value="@("indigo")" Color="indigo" Small Style="min-width: 28px;" />
                <MButton Value="@("blue")" Color="blue" Small Style="min-width: 28px;" />
                <MButton Value="@("light-blue")" Color="light-blue" Small Style="min-width: 28px;" />
                <MButton Value="@("cyan")" Color="cyan" Small Style="min-width: 28px;" />
                <MButton Value="@("teal")" Color="teal" Small Style="min-width: 28px;" />
                <MButton Value="@("green")" Color="green" Small Style="min-width: 28px;" />
                <MButton Value="@("light-green")" Color="light-green" Small Style="min-width: 28px;" />
                <MButton Value="@("lime")" Color="lime" Small Style="min-width: 28px;" />
                <MButton Value="@("yellow")" Color="yellow" Small Style="min-width: 28px;" />
                <MButton Value="@("amber")" Color="amber" Small Style="min-width: 28px;" />
                <MButton Value="@("orange")" Color="orange" Small Style="min-width: 28px;" />
                <MButton Value="@("deep-orange")" Color="deep-orange" Small Style="min-width: 28px;" />
                <MButton Value="@("brown")" Color="brown" Small Style="min-width: 28px;" />
                <MButton Value="@("blue-grey")" Color="blue-grey" Small Style="min-width: 28px;" />
                <MButton Value="@("grey")" Color="black" Small Style="min-width: 28px;" />
            </MButtonGroup>
        </MCardText>
        <MCardTitle Class="text-h6">
            背景图
        </MCardTitle>
        <MCardText>
            显示背景图会将卡片设置为半透明状态，目前建议使用明亮的图片作为背景
        </MCardText>
        <MCardText Class="pb-0">
            <MSwitch Value="_show" TValue="bool" ValueChanged="BackgroundValueChanged" Label="@(_show?"显示背景图":"隐藏背景图")"  Class="m-0"></MSwitch>
        </MCardText>
        <MCardTitle Class="text-h6">
            扩展显示范围
        </MCardTitle>
        <MCardText>
            选中后将把显示范围扩大到整个页面，也就是两边不再留白
        </MCardText>
        <MCardText Class="pb-0">
            <MSwitch Value="_expand" TValue="bool" ValueChanged="ExpandValueChanged" Label="@(_expand?"扩展显示范围":"限制显示范围")"  Class="m-0"></MSwitch>
        </MCardText>
        <MCardTitle Class="text-h6">
            字体
        </MCardTitle>
        <MCardText Class="pb-0">
            <MTextField Label="自定义渲染的字体，具体参见更新日志" Value="@_dataCacheService.ThemeSetting.FontFamily" ValueChanged="FontFamilyValueChanged" TValue="string" ></MTextField>
        </MCardText>
        <MCardTitle Class="text-h6">
            自动保存编辑
        </MCardTitle>
        <MCardText>
            在编辑页面时间隔10秒自动保存一次数据
        </MCardText>
        <MCardText Class="pb-0">
            <MSwitch Value="@_dataCacheService.ThemeSetting.AllowAutoSave" TValue="bool" ValueChanged="AllowAutoSaveValueChanged" Label="@(_dataCacheService.ThemeSetting.AllowAutoSave?"自动保存":"不自动保存")"  Class="m-0"></MSwitch>
        </MCardText>
        <MCardTitle Class="text-h6">
            显示错误详情
        </MCardTitle>
        <MCardText>
            展示网站发生错误时的详细信息
        </MCardText>
        <MCardText Class="pb-0">
            <MSwitch Value="@_dataCacheService.ThemeSetting.ShowDetailedErrorInfor" TValue="bool" ValueChanged="ShowDetailedErrorInforValueChanged" Label="@(@_dataCacheService.ThemeSetting.ShowDetailedErrorInfor?"显示":"不显示")"  Class="m-0"></MSwitch>
        </MCardText>
    </MCard>
</MDialog>

@code {

    StringNumber colorString = "pink lighten-2";
    bool _show = false;
    bool _expand = false;
    bool Dialog { get; set; }

    [CascadingParameter]
    private CnGalWebSite.Shared.MasaComponent.Shared.Tips.CnGalRootTip CnGalRootTip { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _show = _dataCacheService.ThemeSetting.IsTransparent;

        if (string.IsNullOrWhiteSpace(_dataCacheService.ThemeSetting.Theme))
        {
            _dataCacheService.ThemeSetting.Theme = colorString.ToString();
            _dataCacheService.ThemeSetting.IsDark = false;
            _eventService.OnSavaTheme();
            return;
        }
        colorString = _dataCacheService.ThemeSetting.Theme;

    }
    public void Refresh(bool dialog)
    {
        Dialog = dialog;
        StateHasChanged();
        
    }

    public void ColorValueChanged(StringNumber value)
    {
        if (value == null)
        {
            value = ThemeModel.DefaultTheme ;
        }
        colorString = value;
        _dataCacheService.ThemeSetting.Theme = value?.ToString();

        if (_dataCacheService.ThemeSetting.Theme == "grey")
        {
            _dataCacheService.ThemeSetting.IsDark = true;
        }
        else
        {
            _dataCacheService.ThemeSetting.IsDark = false;
        }

        _eventService.OnSavaTheme();
        

    }

    public void BackgroundValueChanged(bool show)
    {
        _show = show;
        _dataCacheService.ThemeSetting.IsTransparent = show;

        _eventService.OnSavaTheme();
        
    }
    public void ExpandValueChanged(bool expand)
    {
        _expand = expand;
        _dataCacheService.ThemeSetting.IsExtendEntireScreen = expand;

        _eventService.OnSavaTheme();
        
    }

    public void FontFamilyValueChanged(string value)
    {
        _dataCacheService.ThemeSetting.FontFamily = value;

        _eventService.OnSavaTheme();
        
    }

    public void AllowAutoSaveValueChanged(bool value)
    {
        _dataCacheService.ThemeSetting.AllowAutoSave = value;

        _eventService.OnSavaTheme();
        
    }

    public void ShowDetailedErrorInforValueChanged(bool value)
    {
        _dataCacheService.ThemeSetting.ShowDetailedErrorInfor = value;

        _eventService.OnSavaTheme();
        
    }
}

