@inject IDataCacheService _dataCacheService


<div style="display: flex; flex-direction: column;">
    <div class="ps-4 pe-4 pb-2" style=" display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap;">
        <div class="h5 fw-bold mb-0 font-color">
            @Month.ToString("yyyy年M月")
        </div>
        <div style="display: flex; flex-wrap: wrap; justify-content: flex-end;">
            <MButton Text  OnClick="@(()=>ValueChanged(0))" Class="me-4">
                上一年
            </MButton>
            <MButton Text  OnClick="@(()=>ValueChanged(1))" Class="me-4">
                上一月
            </MButton>
            <MButton Text  OnClick="@(()=>ValueChanged(2))" Class="me-4">
                今天
            </MButton>
            <MButton Text  OnClick="@(()=>ValueChanged(3))" Class="me-4">
                下一月
            </MButton>
            <MButton Text  OnClick="@(()=>ValueChanged(4))" Class="me-4">
                下一年
            </MButton>
        </div>
    </div>
    <div style="border-top: thin solid rgba(0,0,0,.12); display: flex; border-bottom: thin solid rgba(0,0,0,.12); min-height: 40px; ">
        <div style="width: 14.28%; display: flex; align-items: center; justify-content: center;">日</div>
        <div style="width: 14.28%;  display: flex; align-items: center; justify-content: center;">一</div>
        <div style="width: 14.28%; display: flex; align-items: center; justify-content: center;">二</div>
        <div style="width: 14.28%;  display: flex; align-items: center; justify-content: center;">三</div>
        <div style="width: 14.28%;display: flex; align-items: center; justify-content: center;">四</div>
        <div style="width: 14.28%; display: flex; align-items: center; justify-content: center;">五</div>
        <div style="width: 14.28%;  display: flex; align-items: center; justify-content: center;">六</div>
    </div>
    @for (var k = 0; k < 6; k++)
    {
        <div style="@(($"display:flex;border-bottom :thin solid rgba(0,0,0,.{(k==4?"20":"12")});"))">
            @for (int i = 0; i < 7; i++)
            {
                var date = Begin.AddDays(k * 7 + i);
                <div style="@((date.Month==Month.Month?"":"background-color:rgba(0,0,0,.12);")+"width: 14.28%;border-right :thin solid rgba(0,0,0,.12);"+(i==0?"border-left :thin solid rgba(0,0,0,.12);":""))">
                  @ChildContent(date)
                </div>
            }
        </div>
    }
</div>


@code {
    [Parameter]
    public DateTime Month { get; set; }
    [Parameter]
    public EventCallback<DateTime> MonthChanged { get; set; }
    [Parameter]
    public RenderFragment<DateTime> ChildContent { get; set; }
    /// <summary>
    /// 起始日期
    /// </summary>
    public DateTime Begin { get; set; }

    /// <summary>
    /// 结束日期
    /// </summary>
    public DateTime End { get; set; }

    public void Refresh()
    {
        //根据当前月份计算出显示范围
        var temp = Month.AddDays(-Month.Day + 1);

        Begin = temp.AddDays(-(int)temp.DayOfWeek);
        End = Begin.AddDays(42);

        StateHasChanged();

        
    }

    protected override void OnParametersSet()
    {
        Refresh();
    }

    public async Task ValueChanged(StringNumber index)
    {
        switch (index?.ToInt32())
        {
            case 0:
                Month = Month.AddYears(-1);
                break;
            case 1:
                Month = Month.AddMonths(-1);
                break;
            case 2:
                Month = DateTime.Now.ToCstTime();
                break;
            case 3:
                Month = Month.AddMonths(1);
                break;
            case 4:
                Month = Month.AddYears(1);
                break;
        }

        await MonthChanged.InvokeAsync(Month);
        Refresh();
    }
}
