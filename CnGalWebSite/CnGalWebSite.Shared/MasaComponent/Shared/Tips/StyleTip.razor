@inject IDataCacheService _dataCacheService
@inject IMauiService _mauiService
@inject ILocalStorageService _localStorage
@inject IEventService _eventService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@implements IDisposable

<style>
    :root {
        --main-color: @colorMain;
        --hover-color: @colorHover;
        --active-color: @colorActive;
    }
</style>

@if (_dataCacheService.ThemeSetting.IsDark)
{
    <link rel="stylesheet" href="https://app.cngal.org/_content/CnGalWebSite.Shared/css/github-markdown-dark.css">
    <link rel="stylesheet" href="https://app.cngal.org/_content/CnGalWebSite.Shared/css/vs2015.min.css" />
    <link rel="stylesheet" href="https://app.cngal.org/_content/CnGalWebSite.Shared/css/dark-cover.min.css" />
    <style>
        [data-bs-toggle="lgbSelect"] .form-select {
            background-color: transparent;
            color: white;
        }
    </style>
    @if (_dataCacheService.IsApp)
    {
        <style>
            .bg-opacity {
                background-color: transparent;
            }
        </style>
    }
}
else
{
    <!-- <link rel="stylesheet" href="//app.cngal.org/_content/CnGalWebSite.Shared/editor.md/css/editormd.min.css" media="none" onload="this.media='all'" />
    -->
    <link rel="stylesheet" href="https://lf9-cdn-tos.bytecdntp.com/cdn/expire-1-M/github-markdown-css/4.0.0/github-markdown.min.css" />
    <link rel="stylesheet" href="https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/highlight.js/10.6.0/styles/atom-one-light.min.css" />
    <link rel="stylesheet" href="https://app.cngal.org/_content/CnGalWebSite.Shared/css/Lighting-mode.min.css" />

    <style>
        #__vconsole .vc-switch {
            margin-right: 20px;
            box-shadow: 0 0.5rem 1rem rgb(255, 255, 255, 15%) !important;
        }

        .m-application a {
            color: var(--main-color);
        }
    </style>

    if (_dataCacheService.ThemeSetting.IsTransparent)
    {
        <link rel="stylesheet" href="https://app.cngal.org/_content/CnGalWebSite.Shared/css/show-background.min.css" />
        <style>
            .bg-opacity {
                background-color: rgba(255, 255, 255, 0.7) !important;
            }
        </style>

    }
    else
    {
        <style>
            #web_bg {
                display: none;
            }
        </style>
    }
}

@if (_dataCacheService.ThemeSetting.IsTransparent && _dataCacheService.ThemeSetting.IsDark == false)
{

}
else
{
    <style>
        .bgimage-ison {
            display: none !important;
        }
    </style>
}

<style>
    body, .m-application, .markdown-body {
        font-family:@_dataCacheService.ThemeSetting.FontFamily !important;
    }
</style>


@code {

    public string colorMain;
    public string colorHover;
    public string colorActive;

    public string DefaultTheme = "pink lighten-2";

    [Parameter]
    public EventCallback OnTransparentChanged { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [Inject]
    public MasaBlazor MasaBlazor { get; set; }

    protected override void OnInitialized()
    {
        if (DateTime.Now.ToCstTime().Day == 1 && DateTime.Now.ToCstTime().Month == 4)
        {
            DefaultTheme = "green";
        }

        ProcColor(DefaultTheme);
        _dataCacheService.ThemeSetting.Theme = DefaultTheme;

        _eventService.SavaTheme -= OnSavaTheme;
        _eventService.SavaTheme += OnSavaTheme;

        _eventService.TempEffectTheme -= OnTempEffectTheme;
        _eventService.TempEffectTheme += OnTempEffectTheme;

        NavigationManager.LocationChanged -= LocationChanged;
        NavigationManager.LocationChanged += LocationChanged;

    }

    public async void LocationChanged(object sender, LocationChangedEventArgs args)
    {
        await LoadTheme();
        await Refresh();
    }

    public async void OnTempEffectTheme()
    {
        await Refresh();
    }

    public async void OnSavaTheme()
    {
        await SaveTheme();
        await Refresh();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //读取本地主题配置
            await LoadTheme();
            //刷新
            await Refresh();
        }
    }

    /// <summary>
    /// 读取本地主题配置
    /// </summary>
    /// <returns></returns>
    public async Task LoadTheme()
    {
        _dataCacheService.ThemeSetting = await _localStorage.GetItemAsync<ThemeModel>("theme");

        if (_dataCacheService.ThemeSetting == null)
        {
            _dataCacheService.ThemeSetting = new ThemeModel();
            await SaveTheme();
        }

        //将旧版颜色字符串转化为新版
        if (_dataCacheService.ThemeSetting.Theme != null && _dataCacheService.ThemeSetting.Theme.Contains("color"))
        {
            _dataCacheService.ThemeSetting.Theme = DefaultTheme;
            await SaveTheme();
        }

        //若为默认主题 则设置主题色
        if (ThemeModel.DefaultTheme==_dataCacheService.ThemeSetting.Theme && _dataCacheService.ThemeSetting.IsDark == false)
        {
            _dataCacheService.ThemeSetting.Theme = DefaultTheme;
        }
    }

    public void ProcColor(string theme)
    {
        switch (theme)
        {
            case "red":
                colorMain = "#F44336";
                colorHover = "#D32F2F";
                colorActive = "#B71C1C";
                break;
            case "pink lighten-2":
                colorMain = "#F06292";
                colorHover = "#D81B60";
                colorActive = "#880E4F";
                break;
            case "purple":
                colorMain = "#9C27B0";
                colorHover = "#7B1FA2";
                colorActive = "#4A148C";
                break;
            case "deep-purple":
                colorMain = "#673AB7";
                colorHover = "#512DA8";
                colorActive = "#311B92";
                break;
            case "indigo":
                colorMain = "#3F51B5";
                colorHover = "#303F9F";
                colorActive = "#1A237E";
                break;
            case "blue":
                colorMain = "#2196F3";
                colorHover = "#1976D2";
                colorActive = "#0D47A1";
                break;
            case "light-blue":
                colorMain = "#03A9F4";
                colorHover = "#039BE5";
                colorActive = "#01579B";
                break;
            case "cyan":
                colorMain = "#00BCD4";
                colorHover = "#0097A7";
                colorActive = "#006064";
                break;
            case "teal":
                colorMain = "#009688";
                colorHover = "#00796B";
                colorActive = "#004D40";
                break;
            case "green":
                colorMain = "#4CAF50";
                colorHover = "#388E3C";
                colorActive = "#1B5E20";
                break;
            case "light-green":
                colorMain = "#8BC34A";
                colorHover = "#689F38";
                colorActive = "#33691E";
                break;
            case "lime":
                colorMain = "#CDDC39";
                colorHover = "#AFB42B";
                colorActive = "#827717";
                break;
            case "yellow":
                colorMain = "#FFEB3B";
                colorHover = "#FBC02D";
                colorActive = "#F57F17";
                break;
            case "amber":
                colorMain = "#FFC107";
                colorHover = "#FFA000";
                colorActive = "#FF6F00";
                break;
            case "orange":
                colorMain = "#FF9800";
                colorHover = "#F57C00";
                colorActive = "#E65100";
                break;
            case "deep-orange":
                colorMain = "#FF5722";
                colorHover = "#E64A19";
                colorActive = "#BF360C";
                break;
            case "brown":
                colorMain = "#795548";
                colorHover = "#5D4037";
                colorActive = "#3E2723";
                break;
            case "blue-grey":
                colorMain = "#607D8B";
                colorHover = "#455A64";
                colorActive = "#263238";
                break;
            case "grey":
                colorMain = "#9E9E9E";
                colorHover = "#616161";
                colorActive = "#212121";
                break;
            case "white":
                colorMain = "#FFFFFF";
                colorHover = "#757575";
                colorActive = "#616161";
                break;
            default:
                if (_dataCacheService.ThemeSetting.Theme.Contains("#"))
                {
                    colorMain = colorHover = colorActive = _dataCacheService.ThemeSetting.Theme;
                }
                else
                {
                    _dataCacheService.ThemeSetting.Theme = "pink lighten-2";
                    colorMain = "#F06292";
                    colorHover = "#D81B60";
                    colorActive = "#880E4F";
                }

                break;

        }
    }

    /// <summary>
    /// 保存本地主题配置
    /// </summary>
    /// <returns></returns>
    public async Task SaveTheme()
    {
        await _localStorage.SetItemAsync("theme", _dataCacheService.ThemeSetting);
    }

    /// <summary>
    /// 刷新
    /// </summary>
    public async Task Refresh()
    {
        if (_dataCacheService.ThemeSetting == null)
        {
            return;
        }

        //刷新默认主题色
        if (MasaBlazor.Theme.Themes.Light.Primary != _dataCacheService.ThemeSetting.Theme)
        {
            //重新生成颜色
            ProcColor(_dataCacheService.ThemeSetting.Theme);
            //重新赋值
            var theme = MasaBlazor.Theme;
            theme.Themes.Light.Primary = colorMain;
            MasaBlazor.Theme = theme;
            //通知MAUI
            _mauiService.ChangeTheme(colorMain);
        }

        //通知主题模式切换
        if(MasaBlazor.Theme.Dark != _dataCacheService.ThemeSetting.IsDark)
        {
            //重新赋值
            var theme = MasaBlazor.Theme;
            theme.Dark = _dataCacheService.ThemeSetting.IsDark;
            MasaBlazor.Theme = theme;

            await _dataCacheService.OnRefreshRequsted(null);
        }

        await InvokeAsync(StateHasChanged);
    }

    #region 释放实例
    public void Dispose()
    {
        _eventService.SavaTheme -= OnSavaTheme;
        _eventService.TempEffectTheme -= OnTempEffectTheme;
        NavigationManager.LocationChanged -= LocationChanged;
        GC.SuppressFinalize(this);
    }
    #endregion
}
