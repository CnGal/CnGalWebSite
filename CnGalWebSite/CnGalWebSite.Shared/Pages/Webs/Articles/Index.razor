@inject HttpClient Http
@inject ToastService? ToastService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IDataCacheService _dataCatcheService
@inject IStructuredDataService _structuredDataService
@inject DialogService DialogService
@implements IDisposable

@if (string.IsNullOrWhiteSpace(Model.DisplayName) == false)
{
    <TitleTip Title="@(Model.DisplayName)" Description="@Model.BriefIntroduction" Image="@Model.MainPicture"></TitleTip>
}
else
{
    <TitleTip></TitleTip>
}
@if (_dataCatcheService.ThemeSetting.IsTransparent)
{
    @if (string.IsNullOrWhiteSpace(Model.SmallBackgroundPicture) == false)
    {
        <div id="web_bg" style="background-image: url(@Model.SmallBackgroundPicture)" class=" d-none  bg-d-lg-block bgimage-ison"></div>
    }
    @if (string.IsNullOrWhiteSpace(Model.BackgroundPicture) == false)
    {
        <div id="web_bg" style="background-image: url(@Model.BackgroundPicture)" class=" d-none d-sm-block bgimage-ison"></div>
    }

}

@if (isNotFound == true)
{
    int temp = 0;
    <NotFoundArticle IsNeedLayput="true" ArticleName="@(int.TryParse(Id,out temp)?"":ToolHelper.Base64DecodeName(Id))"></NotFoundArticle>
}
else
{
    <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaContainer Small>
        <div itemscope itemtype="http://schema.org/Article">
            @if (isReady == false)
            {
                <div class="  rounded shadow-sm  ps-4 pe-4 pt-3 pb-3 bg-opacity rounded">
                    <SkeletonParagraph />
                    <hr class="m-2" />
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                </div>
            }
            else
            {
                @if (Model.IsHidden == true)
                {
                    <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaAlert Type="AlertTypes.Warning" Class="mb-3">
                        当前文章处于隐藏状态，如果你看到了这个提示，请立即联系管理员
                    </CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaAlert>
                }

                <div class="rounded shadow-sm bg-opacity mb-4 pb-4">
                    <CnGalWebSite.Shared.Component.Articles.NewVersion.MainInforCard Model="Model" OnRevoke="OnRevoke" />

                    <div class="ps-4 pe-4 pt-4">
                        <CnGalWebSite.Shared.Component.Articles.NewVersion.OperationCard Model="Model" Class="mb-4" />
                    </div>
                </div>
                <CnGalWebSite.Shared.Component.Articles.NewVersion.RelevancesCard Model="Model" OnRevoke="OnRevoke" />
                <CnGalWebSite.Shared.MasaComponent.PC.FavoriteFolders.CatalogsCard Type="FavoriteObjectType.Article" Id="Model.Id" />

                <CnGalWebSite.Shared.MasaComponent.PC.Comments.CommentTip CanComment="Model.CanComment" CanDeleted="CanDeleted" ObjectId="@Model.Id.ToString()" Type="CommentType.CommentArticle" />

            }
        </div>

    </CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaContainer>

}
<CnGalWebSite.Shared.MasaComponent.Shared.Components.TrackEvent DataType="TrackEventDataType.Article" EventType="TrackEventType.View" ObjectId="@Model.Id.ToString()"
                                                                ObjectName="@Model.Name" />


@if (isFirstLoad == false)
{
    <CnGalWebSite.Shared.MasaComponent.Shared.Cards.NavLoadingCard IsLoading="isLoading" />
}

@code {
    [Parameter]
    public string Id { get; set; }

    public string CurrentUserRank { get; set; }
    bool isReady = false;
    bool isNotFound = false;
    bool isAsyncReady = false;

    public ArticleViewModel Model { get; set; } = new ArticleViewModel();

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    string LastLookName = "";
    bool isFrist = true;
    bool CanDeleted;
    bool isLoading = false;
    bool isFirstLoad = true;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [CascadingParameter]
    private CnGalWebSite.Shared.MasaComponent.Shared.Tips.CnGalRootTip CnGalRootTip { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            NavigationManager.LocationChanged -= LocationChanged;
            NavigationManager.LocationChanged += LocationChanged;
            isFirstLoad = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    protected async Task Refresh()
    {
        try
        {
            isReady = false;
            isNotFound = false;
            //获取文章信息
            Model = await _dataCatcheService.ArticleIndexPageCatche.GetCache(Id);
            //判断文章名称是否为空 为空则跳转到主页
            if (string.IsNullOrWhiteSpace(Model.Name))
            {
                NavigationManager.NavigateTo(Provider, "/articles/home", "文章", "fa fa-newspaper-o");
            }


            //展示目录
            if (CnGalRootTip != null)
            {
                CnGalRootTip.FloatTool.DisplayArticleCatalogButton(Model);
            }

            var userState = await authenticationStateTask;
            var user = userState.User;
            if (user.Identity.Name == Model.UserInfor.Name)
            {
                Model.Authority = true;
                CanDeleted = true;
            }
            if (user.IsInRole("Editor"))
            {
                Model.Authority = true;
            }

            //生成轮播结构数据
            await GenerateCarouselStructuredDataJson();

            isReady = true;
            //StateHasChanged();
        }
        catch (Exception exc)
        {
            isReady = true;
            isNotFound = true;
            StateHasChanged();
        }

    }


    public async Task GenerateCarouselStructuredDataJson()
    {
        var urls = new List<string>();

        if (Model.RelatedEntries.Any())
        {
            urls.AddRange(Model.RelatedEntries.Select(s => NavigationManager.BaseUri + "entries/" + s.Id));
        }

        if (Model.RelatedArticles.Any())
        {
            urls.AddRange(Model.RelatedEntries.Select(s => NavigationManager.BaseUri + "articles/" + s.Id));
        }

        await _structuredDataService.SetStructuredData(urls);
    }


    [Inject]
    [NotNull]
    private SwalService? SwalService { get; set; }
    private async Task OnRevoke(Operation operation)
    {
        //确认
        var op = new SwalOption()
        {
            Title = "确认撤销编辑",
            Content = "撤销编辑后会删除数据，无法恢复，请谨慎操作",

            Category = SwalCategory.Warning,
        };
        var ret = await SwalService.ShowModal(op);
        if (ret == false)
        {
            return;
        }
        //上传
        try
        {
            var result = await Http.PostAsJsonAsync<RevokeExamineModel>(ToolHelper.WebApiPath + "api/articles/RevokeExamine", new RevokeExamineModel { Id = Model.Id });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("撤销审核请求失败", obj.Error);
            }
            else
            {
                await ToastService.Success("撤销审核请求成功", "撤销审核请求成功");
                //修改各部分编辑状态
                switch (operation)
                {
                    case Operation.EditArticleMain:
                        Model.MainState = EditState.Normal;
                        break;
                    case Operation.EditArticleMainPage:
                        Model.MainPageState = EditState.Normal;
                        break;
                    case Operation.EditArticleRelevanes:
                        Model.RelevancesState = EditState.Normal;
                        break;
                }

                await Refresh();
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "撤销审核请求失败");
        }
    }

    public async void LocationChanged(object sender, LocationChangedEventArgs args)
    {
        if (Id != Model.Id.ToString())
        {
            if (_dataCatcheService.VideoIndexPageCatche.Check(Id) == false)
            {
                isLoading = true;
                StateHasChanged();
                await Refresh();
                isLoading = false;
                StateHasChanged();
            }
            else
            {
                await Refresh();
                StateHasChanged();
            }

        }
    }

    #region 释放实例

    public void Dispose()
    {

        NavigationManager.LocationChanged -= LocationChanged;

        GC.SuppressFinalize(this);
    }
    #endregion
}
