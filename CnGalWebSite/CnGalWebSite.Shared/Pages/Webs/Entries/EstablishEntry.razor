
@inject HttpClient Http

@inject ILocalStorageService _localStorage
@inject ToastService? ToastService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager


<TitleTip Title="创建词条"></TitleTip>

<AutoSaveTip TItem="EstablishEntryViewModel" Item="Model" DataLoaded="DataLoaded" @ref="autoSave" />
<div>
    <CnGalWebSite.Shared.MasaComponent.Shared.Editors.Cards.EditSummaryTip Type="ExaminedNormalListModelType.Entry" Class="mb-3" Creating/>
    @if (isReady == false)
    {
        <div class="  rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-4 pb-4">
            <div>
                <SkeletonParagraph />
                <div class="mt-2">
                </div>
                <SkeletonParagraph />
                <div class="mt-2">
                </div>
                <SkeletonParagraph />
                <div class="mt-2">
                </div>
                <SkeletonParagraph />
                <div class="mt-2">
                </div>
                <SkeletonParagraph />
            </div>
        </div>
    }
    else
    {
        @if (Model.Type == EntryType.Staff)
        {
            <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaAlert Type="AlertTypes.Error" Class="mb-3">
                这个词条可能涉及到现实人物，请勿过分较真，也请谨慎编辑，仔细斟酌词句
            </CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaAlert>
        }

        <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaTitleContainer Title="创建词条" Icon="fa fa-fw  fa-codepen" Outline>

            <CnGalWebSite.Shared.MasaComponent.Shared.Editors.Entries.MainCard Model="Model.Main" Class="mb-4" TypeChanged="TypeChanged"  />
            <CnGalWebSite.Shared.MasaComponent.Shared.Editors.Entries.AddInforCard Model="Model.AddInfor" EntryGroupItems="EntryGroupItems" EntryStaffItems="EntryStaffItems" LotteryItems="LotteryItems"  Class="mb-4" />
            <CnGalWebSite.Shared.MasaComponent.Shared.Editors.Entries.ImagesCard Model="Model.Images" Class="mb-4"  />
            <CnGalWebSite.Shared.MasaComponent.Shared.Editors.Entries.AudioCard Model="Model.Audio" Class="mb-4"/>
            <CnGalWebSite.Shared.MasaComponent.Shared.Editors.Entries.TagsCard Model="Model.Tags" TagItems="TagItems"  Class="mb-4" />
            <CnGalWebSite.Shared.MasaComponent.Shared.Editors.Entries.RelevancesCard Model="Model.Relevances" EntryGameItems="EntryGameItems" EntryRoleItems="EntryRoleItems" EntryGroupItems="EntryGroupItems" EntryStaffItems="EntryStaffItems" ArticleItems="ArticleItems"  Class="mb-4" />
            <CnGalWebSite.Shared.MasaComponent.Shared.Editors.Entries.MainPageCard Model="Model.MainPage"  Class="mb-4" />

            <CnGalWebSite.Shared.MasaComponent.Shared.Editors.Buttons.SubmitButton OnSubmit="OnSubmit" Model="Model" />
        </CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaTitleContainer>
    }
</div>
@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string Name { get; set; }

    private EstablishEntryViewModel Model { get; set; } = new EstablishEntryViewModel
    {
        AddInfor = new EditAddInforViewModel
        {
            GamePlatforms = new List<GamePlatformModel>
        {
                new GamePlatformModel{GamePlatformType= GamePlatformType.Android},
                new GamePlatformModel{GamePlatformType= GamePlatformType.DOS},
                new GamePlatformModel{GamePlatformType= GamePlatformType.IOS},
                new GamePlatformModel{GamePlatformType= GamePlatformType.Linux},
                new GamePlatformModel{GamePlatformType= GamePlatformType.Mac},
                new GamePlatformModel{GamePlatformType= GamePlatformType.NS},
                new GamePlatformModel{GamePlatformType= GamePlatformType.PS},
                new GamePlatformModel{GamePlatformType= GamePlatformType.Windows},
                new GamePlatformModel{GamePlatformType= GamePlatformType.HarmonyOS},
                  new GamePlatformModel{GamePlatformType= GamePlatformType.H5},
            }
        }
    };



    private bool isReady = false;

    private List<string> EntryGameItems { get; set; } = new List<string>();
    private List<string> EntryRoleItems { get; set; } = new List<string>();
    private List<string> EntryGroupItems { get; set; } = new List<string>();
    private List<string> EntryStaffItems { get; set; } = new List<string>();
    private List<string> ArticleItems { get; set; } = new List<string>();
    private List<string> TagItems { get; set; } = new List<string>();
    private List<string> VideoItems { get; set; } = new List<string>();
    private List<string> LotteryItems { get; set; } = new List<string>();

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    AutoSaveTip<EstablishEntryViewModel> autoSave { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Model.Main.Name = Model.Main.DisplayName = Name;
                //获取所有词条
                EntryGameItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/entries/GetAllEntries/0", ToolHelper.options);
                EntryRoleItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/entries/GetAllEntries/1", ToolHelper.options);
                EntryGroupItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/entries/GetAllEntries/2", ToolHelper.options);
                EntryStaffItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/entries/GetAllEntries/3", ToolHelper.options);
                //获取所有文章
                ArticleItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/articles/GetAllArticles", ToolHelper.options);
                //获取所有标签
                TagItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/tags/GetAllTags", ToolHelper.options);
                //获取所有视频 
                VideoItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/videos/GetNames", ToolHelper.options);
                //获取所有抽奖 
                LotteryItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/lotteries/GetNames", ToolHelper.options);
                isReady = true;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                ErrorHandler.ProcessError(ex, "获取所有词条文章标签名称列表失败");
            }
        }
    }
    private async Task OnSubmit()
    {
        try
        {

            var result = await Http.PostAsJsonAsync<EstablishEntryViewModel>(ToolHelper.WebApiPath + "api/entries/EstablishEntry", Model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("创建词条失败", obj.Error);
            }
            else
            {
                await autoSave.Clean();

                await ToastService.Success("创建词条成功", "创建词条成功，等待审核通过");
                NavigationManager.NavigateTo(Provider, "/entries/index/" + obj.Error, Model.Name, "fa fa-codepen");
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "创建词条失败");
        }
    }

    public void TypeChanged(EntryType type)
    {
        Model.AddInfor.Type = Model.Relevances.Type = type;
        StateHasChanged();

    }

    private void DataLoaded(EstablishEntryViewModel model)
    {
        isReady = false;
        StateHasChanged();
        Model = model;
        isReady = true;
        StateHasChanged();

    }

}
