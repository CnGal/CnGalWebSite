@inject HttpClient Http
@inject ToastService ToastService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IDataCacheService _dataCatcheService
@inject IStructuredDataService _structuredDataService
@inject DialogService DialogService
@inject IEventService _eventService
@implements IDisposable

@if (string.IsNullOrWhiteSpace(EntryView.Name) == false)
{
    <TitleTip Title="@(EntryView.Name)" Description="@EntryView.BriefIntroduction" Image="@EntryView.MainPicture"></TitleTip>
}
else
{
    <TitleTip></TitleTip>
}



@if (isNotFound)
{
    int temp = 0;
    <NotFoundEntry IsNeedLayput="true" EntryName="@(int.TryParse(Id,out temp)?"":ToolHelper.Base64DecodeName(Id))"></NotFoundEntry>
}
else
{
    @if (_dataCatcheService.EntryIndexPageCatche.Check(Id) || isReady)
    {
        switch (style)
        {
            case EntryStyleTemplate.Default:
                <CnGalWebSite.Shared.Component.Entries.NewVersion.IndexCard EntryView="EntryView" CanDeleted="CanDeleted" OnPreEdit="OnPreEdit" OnRevoke="OnRevoke" />
                break;
            case EntryStyleTemplate.OfficialWebsite:
                <CnGalWebSite.Shared.MasaComponent.PC.Entries.Templates.OfficialWebsite.Main.IndexCard Model="EntryView" />
                break;
            default:
                break;
        }
    }
    else
    {
        <div class="  rounded shadow-sm  bg-opacity pt-3">

            <div class="row mt-2 ms-2 me-2">
                <div class="col-12 col-md-12 col-lg-5 mt-1 mb-4">
                    <SkeletonAvatar Round="false" />
                </div>

                <div class="col-12 col-md-12 col-lg-6 mt-1 mb-2">
                    <SkeletonParagraph />
                </div>
            </div>
        </div>
        <div class="mt-3">
            <div class="  rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-3 pb-3">
                <SkeletonParagraph />

            </div>
        </div>


        <div class=" mt-3">
            <div class="  rounded shadow-sm  ps-4 pe-4 pt-3 pb-3 bg-opacity rounded">
                <SkeletonParagraph />
            </div>
        </div>
        <div class="mt-3">
            <div class="  rounded shadow-sm  ps-4 pe-4 pt-3 pb-3 bg-opacity rounded">
                <SkeletonParagraph />
                <div class="mt-2">
                </div>
                <SkeletonParagraph />
                <div class="mt-2">
                </div>
                <SkeletonParagraph />
            </div>
        </div>
    }

}
@if (isFirstLoad == false)
{
    <CnGalWebSite.Shared.MasaComponent.Shared.Cards.NavLoadingCard IsLoading="isLoading" />
}

<CnGalWebSite.Shared.MasaComponent.Shared.Components.TrackEvent DataType="TrackEventDataType.Entry" EventType="TrackEventType.View" ObjectId="@EntryView.Id.ToString()"
                                                                ObjectName="@EntryView.Name" />

@code {

    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public int Style { get; set; }

    public EntryStyleTemplate style { get; set; }

    public bool IsNoLeft
    {
        get
        {
            return (EntryView.Information.Count == 0 && (EntryView.SteamId <= 0 || EntryView.IsHideOutlink) && EntryView.Tags.Count == 0 && (EntryView.OtherRelevances.Count == 0 || EntryView.IsHideOutlink) && EntryView.Roles.Count == 0 &&
                      ((EntryView.Type == EntryType.Role || EntryView.Type == EntryType.Staff) && string.IsNullOrWhiteSpace(EntryView.MainPicture) == false) == false && (_dataCatcheService.IsApp == false && EntryView.Staffs.Count > 0) == false);
        }
    }

    public StringNumber TabIndex { get; set; } = 1;

    bool isReady = false;
    bool isLoading = false;
    bool isNotFound = false;
    bool isFirstLoad = true;
    public string CurrentUserRank { get; set; }

    public EntryIndexViewModel EntryView { get; set; } = new EntryIndexViewModel();


    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [CascadingParameter]
    private CnGalWebSite.Shared.MasaComponent.Shared.Tips.CnGalRootTip CnGalRootTip { get; set; }


    public bool IsAdmin { get; set; } = false;
    public bool CanDeleted { get; set; }
    string LastLookName = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            NavigationManager.LocationChanged -= LocationChanged;
            NavigationManager.LocationChanged += LocationChanged;

            CnGalRootTip.FloatTool.SwitchEntryStyle -= SwitchEntryStyle;
            CnGalRootTip.FloatTool.SwitchEntryStyle += SwitchEntryStyle;

            isFirstLoad = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    public async Task Refresh()
    {
        try
        {
            style = GetStyleTemplate();
            isNotFound = false;
            //获取词条信息
            EntryView = await _dataCatcheService.EntryIndexPageCatche.GetCache(Id);
            //判断如果名称为空则返回主页
            if (string.IsNullOrWhiteSpace(EntryView.Name))
            {
                NavigationManager.NavigateTo("/entries/home");
            }

            var userState = await authenticationStateTask;
            var user = userState.User;
            if (user.IsInRole("Editor"))
            {
                IsAdmin = true;
                CanDeleted = true;
            }


            //生成轮播结构数据
            await GenerateCarouselStructuredDataJson();

            isReady = true;
            //StateHasChanged();

        }
        catch (Exception exc)
        {
            isNotFound = true;
            isReady = true;
            StateHasChanged();
        }
    }

    public async Task GenerateCarouselStructuredDataJson()
    {
        var urls = new List<string>();
        urls.AddRange(EntryView.EntryRelevances.Select(s => NavigationManager.BaseUri + "entries/" + s.Id));
        urls.AddRange(EntryView.Roles.Select(s => NavigationManager.BaseUri + "entries/" + s.Id));
        urls.AddRange(EntryView.ProductionGroups.Select(s => NavigationManager.BaseUri + "entries/" + s.Id));
        urls.AddRange(EntryView.StaffGames.Select(s => NavigationManager.BaseUri + "entries/" + s.Id));
        urls.AddRange(EntryView.ArticleRelevances.Select(s => NavigationManager.BaseUri + "articles/" + s.Id));
        await _structuredDataService.SetStructuredData(urls);
    }


    [Inject]
    [NotNull]
    private SwalService? SwalService { get; set; }
    private async Task OnRevoke(Operation operation)
    {
        //确认
        var op = new SwalOption()
        {
            Title = "确认撤销编辑",
            Content = "撤销编辑后会删除数据，无法恢复，请谨慎操作",

            Category = SwalCategory.Warning,
        };
        var ret = await SwalService.ShowModal(op);
        if (ret == false)
        {
            return;
        }
        //上传
        try
        {
            var result = await Http.PostAsJsonAsync<RevokeExamineModel>(ToolHelper.WebApiPath + "api/entries/RevokeExamine", new RevokeExamineModel { Id = EntryView.Id, ExamineType = operation });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("撤销审核请求失败", obj.Error);
            }
            else
            {
                await ToastService.Success("撤销审核请求成功", "撤销审核请求成功");
                //修改各部分编辑状态
                switch (operation)
                {
                    case Operation.EstablishMain:
                        EntryView.MainState = EditState.Normal;
                        break;
                    case Operation.EstablishMainPage:
                        EntryView.MainPageState = EditState.Normal;
                        break;
                    case Operation.EstablishAddInfor:
                        EntryView.InforState = EditState.Normal;
                        break;
                    case Operation.EstablishRelevances:
                        EntryView.RelevancesState = EditState.Normal;
                        break;
                    case Operation.EstablishImages:
                        EntryView.ImagesState = EditState.Normal;
                        break;
                    case Operation.EstablishTags:
                        EntryView.TagState = EditState.Normal;
                        break;
                    case Operation.EstablishAudio:
                        EntryView.AudioState = EditState.Normal;
                        break;
                    case Operation.EstablishWebsite:
                        EntryView.WebsiteState = EditState.Normal;
                        break;
                }
                _dataCatcheService.EntryIndexPageCatche.Clean(Id);
                await Refresh();
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "撤销审核请求失败");
        }
    }

    public void OnPreEdit(bool value)
    {
        EntryView.IsEdit = value;
        StateHasChanged();

    }

    public EntryStyleTemplate GetStyleTemplate()
    {
        if ((EntryStyleTemplate)Style != EntryStyleTemplate.None)
        {
            return (EntryStyleTemplate)Style;
        }
        else if (_dataCatcheService.ThemeSetting.EntryTemplate != EntryStyleTemplate.None)
        {
            return _dataCatcheService.ThemeSetting.EntryTemplate;
        }
        else
        {
            return EntryView.Template == EntryStyleTemplate.None ? EntryStyleTemplate.Default : EntryView.Template;
        }
    }

    public void SwitchEntryStyle()
    {
        NavigationManager.NavigateTo(NavigationManager.GetUriWithQueryParameter("style", style == EntryStyleTemplate.Default ? 2 : 1));
    }

    public async void LocationChanged(object sender, LocationChangedEventArgs args)
    {

        var tempStyle = GetStyleTemplate();

        //是否需要清空临时样式
        if (NavigationManager.Uri.Contains("entries/index") == false || (style == EntryStyleTemplate.OfficialWebsite && tempStyle != EntryStyleTemplate.OfficialWebsite))
        {
            _eventService.OnLoadTheme();
        }

        //是否导航到其他词条
        if (Id != EntryView.Id.ToString())
        {
            if (_dataCatcheService.EntryIndexPageCatche.Check(Id) == false)
            {
                isLoading = true;
                StateHasChanged();
                await Refresh();
                isLoading = false;
                StateHasChanged();
            }
            else
            {
                await Refresh();
                StateHasChanged();
            }
        }
        else
        {
            //尽量减少状态更改次数
            if (style != tempStyle)
            {

                style = tempStyle;
                StateHasChanged();
            }
        }
    }

    #region 释放实例

    public void Dispose()
    {

        NavigationManager.LocationChanged -= LocationChanged;
        CnGalRootTip.FloatTool.SwitchEntryStyle -= SwitchEntryStyle;

        GC.SuppressFinalize(this);
    }
    #endregion
}
