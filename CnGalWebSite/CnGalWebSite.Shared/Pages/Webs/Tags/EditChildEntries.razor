@inject IHttpService _httpService

@inject ILocalStorageService _localStorage

@inject IServiceProvider Provider
@inject NavigationManager NavigationManager

@if (string.IsNullOrWhiteSpace(Model.Name) == false)
{
    <CnGalWebSite.Shared.MasaComponent.Shared.Cards.TitleTip Title="@("编辑 " + Model.Name)"/>
}
else
{
    <CnGalWebSite.Shared.MasaComponent.Shared.Cards.TitleTip />
}

<AutoSaveTip TItem="EditTagChildEntriesViewModel" Item="Model" DataLoaded="DataLoaded" @ref="autoSave" />


<div>
    <CnGalWebSite.Shared.MasaComponent.Shared.Editors.Cards.EditSummaryTip Type="ExaminedNormalListModelType.Tag" Class="mb-3" />
    @if (isReady == false)
    {
        <div class="  rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-4 pb-4">
            <SkeletonParagraph />
            <div class="mt-2">
            </div>
            <SkeletonParagraph />
            <div class="mt-2">
            </div>
            <SkeletonParagraph />
            <div class="mt-2">
            </div>
            <SkeletonParagraph />
            <div class="mt-2">
            </div>
            <SkeletonParagraph />
        </div>
    }
    else
    {

        <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaTitleContainer Title="@($"编辑 {Model.Name}（Id:{Model.Id}）")" Icon="fa fa-fw  fa-tag" Outline>
            <CnGalWebSite.Shared.MasaComponent.Shared.Editors.Tags.ChildEntriesCard Model="Model" Class="mb-4" EntryItems="EntryItems"/>
            <CnGalWebSite.Shared.MasaComponent.Shared.Editors.Buttons.SubmitButton OnSubmit="OnSubmit" Model="Model" />
        </CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaTitleContainer>
    }
</div>

@code {

    [Parameter]
    public string Id { get; set; }

    private EditTagChildEntriesViewModel Model { get; set; } = new EditTagChildEntriesViewModel();

    private bool isReady = false;
    private List<string> EntryItems { get; set; } = new List<string>();

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }
    AutoSaveTip<EditTagChildEntriesViewModel> autoSave { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                //获取所有词条
                EntryItems = await _httpService.GetAsync<List<string>>("api/home/GetSearchTipList");

                Model = await _httpService.GetAsync<EditTagChildEntriesViewModel>("api/tags/EditChildEntries/" + Id);
                isReady = true;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                ErrorHandler.ProcessError(ex, "获取编辑标签子词条失败");
            }
        }
    }
    private async Task OnSubmit()
    {
        try
        {
            var obj = await _httpService.PostAsync<EditTagChildEntriesViewModel, Result>("api/tags/EditChildEntries", Model);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("编辑标签子词条失败", obj.Error);
            }
            else
            {
                await autoSave.Clean();

                await ToastService.Success("编辑标签子词条成功", "编辑标签子词条成功，等待审核通过");
                NavigationManager.NavigateTo(Provider, "/tags/index/" + Model.Id, Model.Name, "fa fa-tag");
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "编辑标签子词条失败");
        }
    }


    private void DataLoaded(EditTagChildEntriesViewModel model)
    {
        isReady = false;
        StateHasChanged();
        Model = model;
        isReady = true;
        StateHasChanged();
        
    }

}
