@inject IHttpService _httpService

@inject ILocalStorageService _localStorage
@inject IPopupService PopupService


@inject NavigationManager NavigationManager

@if (string.IsNullOrWhiteSpace(Model.Name) == false)
{
    <CnGalWebSite.Shared.MasaComponent.Shared.Cards.TitleTip Title="@("编辑 " + Model.Name)"/>
}
else
{
    <CnGalWebSite.Shared.MasaComponent.Shared.Cards.TitleTip />
}

<AutoSaveTip TItem="EditTagMainViewModel" Item="Model" DataLoaded="DataLoaded" @ref="autoSave" />

<div>
    <CnGalWebSite.Shared.MasaComponent.Shared.Editors.Cards.EditSummaryTip Type="ExaminedNormalListModelType.Tag" Class="mb-3" />
    @if (isReady == false)
    {
        <CnGalWebSite.Components.Progressings.ProgressingCard Page Fill />

    }
    else
    {
        <CnGalWebSite.Components.Containers.MasaTitleContainer Title="@($"编辑 {Model.Name}（Id:{Model.Id}）")" Icon="@IconType.Tag.ToIconString()" Outline>
            <CnGalWebSite.Shared.MasaComponent.Shared.Editors.Tags.MainCard Model="Model" Class="mb-4" ShowTagSearch TagItems="TagItems"/>
            <CnGalWebSite.Shared.MasaComponent.Shared.Editors.Buttons.SubmitButton OnSubmit="OnSubmit" Model="Model" />
        </CnGalWebSite.Components.Containers.MasaTitleContainer>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    private EditTagMainViewModel Model { get; set; } = new EditTagMainViewModel();

    private bool isReady = false;
    private List<string> TagItems { get; set; } = new List<string>();

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    AutoSaveTip<EditTagMainViewModel> autoSave { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                //获取所有标签
                TagItems = await _httpService.GetAsync<List<string>>("api/tags/GetAllTags");

                Model = await _httpService.GetAsync<EditTagMainViewModel>("api/tags/editmain/" + Id);
                isReady = true;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                await ErrorHandler.ProcessError(ex, "获取编辑标签主要信息失败");
            }
        }
    }
    private async Task OnSubmit()
    {
        try
        {

            var obj = await _httpService.PostAsync<EditTagMainViewModel, Result>("api/tags/EditMain", Model);
            //判断结果
            if (obj.Successful == false)
            {

                await PopupService.ToastErrorAsync("编辑标签主要信息失败", obj.Error);
            }
            else
            {
                autoSave.Clean();

                await PopupService.ToastSuccessAsync("编辑标签主要信息成功", "编辑标签主要信息成功，等待审核通过");
                NavigationManager.NavigateTo( "/tags/index/" + Model.Id);
            }
        }
        catch (Exception ex)
        {
            await ErrorHandler.ProcessError(ex, "编辑标签主要信息失败");
        }
    }


    private void DataLoaded(EditTagMainViewModel model)
    {
        isReady = false;
        StateHasChanged();
        Model = model;
        isReady = true;
        StateHasChanged();
        
    }

}
