@inject IHttpService _httpService
@inject ToastService? ToastService
@inject NavigationManager NavigationManager

<TitleTip Title="发布视频"></TitleTip>

<AutoSaveTip TItem="CreateVideoViewModel" Item="Model" DataLoaded="DataLoaded" @ref="autoSave" />


<div>
    <CnGalWebSite.Shared.MasaComponent.Shared.Editors.Cards.EditSummaryTip Type="ExaminedNormalListModelType.Video" Class="mb-3" Creating />
    @if (isReady == false)
    {
        <div class="  rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-4 pb-4 mb-4">

            <SkeletonParagraph />
            <div class="mt-2">
            </div>
            <SkeletonParagraph />
            <div class="mt-2">
            </div>
            <SkeletonParagraph />
            <div class="mt-2">
            </div>
            <SkeletonParagraph />
            <div class="mt-2">
            </div>
            <SkeletonParagraph />

        </div>
    }
    else
    {
        <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaTitleContainer Title="发布视频" Icon="fa fa-fw fa-video-camera" Outline>
            <CnGalWebSite.Shared.MasaComponent.Shared.Editors.Videos.MainCard Model="Model.Main" Class="mb-4" />
            <CnGalWebSite.Shared.MasaComponent.Shared.Editors.Videos.ImagesCard Model="Model.Images" Class="mb-4"/>
            <CnGalWebSite.Shared.MasaComponent.Shared.Editors.Videos.RelevancesCard Model="Model.Relevances" Class="mb-4" EntryGameItems="EntryGameItems" EntryRoleItems="EntryRoleItems" EntryGroupItems="EntryGroupItems" VideoItems="VideoItems" EntryStaffItems="EntryStaffItems" ArticleItems="ArticleItems" />
            <CnGalWebSite.Shared.MasaComponent.Shared.Editors.Videos.MainPageCard Model="Model.MainPage" Class="mb-4" />
            <CnGalWebSite.Shared.MasaComponent.Shared.Editors.Buttons.SubmitButton OnSubmit="OnSubmit" Model="Model" />
        </CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaTitleContainer>
    }

</div>

@code {
    private CreateVideoViewModel Model { get; set; } = new CreateVideoViewModel();

    private bool isReady = false;
    private List<string> EntryGameItems { get; set; } = new List<string>();
    private List<string> EntryRoleItems { get; set; } = new List<string>();
    private List<string> EntryGroupItems { get; set; } = new List<string>();
    private List<string> EntryStaffItems { get; set; } = new List<string>();
    private List<string> ArticleItems { get; set; } = new List<string>();
    private List<string> VideoItems { get; set; } = new List<string>();

    [NotNull]
    private MarkdownEditorTip? markdownEditorTip;

    private bool IsOnlyNeedPublishTime { get; set; } = true;

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    AutoSaveTip<CreateVideoViewModel> autoSave { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                //获取所有词条
                EntryGameItems = await _httpService.GetAsync<List<string>>("api/entries/GetAllEntries/0");
                EntryRoleItems = await _httpService.GetAsync<List<string>>("api/entries/GetAllEntries/1");
                EntryGroupItems = await _httpService.GetAsync<List<string>>("api/entries/GetAllEntries/2");
                EntryStaffItems = await _httpService.GetAsync<List<string>>("api/entries/GetAllEntries/3");
                //获取所有文章
                ArticleItems = await _httpService.GetAsync<List<string>>("api/articles/GetAllArticles");
                //获取所有视频
                VideoItems = await _httpService.GetAsync<List<string>>("api/videos/GetNames");
                isReady = true;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                ErrorHandler.ProcessError(ex, "获取所有词条文章名称列表失败");
            }
        }
    }

    private async Task OnSubmit()
    {
        try
        {

            var obj = await _httpService.PostAsync<CreateVideoViewModel, Result>("api/videos/create", Model);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("创建视频失败", obj.Error);
            }
            else
            {
                await autoSave.Clean();

                await ToastService.Success("创建视频成功", "创建视频成功，等待审核通过");
                NavigationManager.NavigateTo( "/videos/index/" + obj.Error);
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "创建视频失败");
        }
    }

    private void DataLoaded(CreateVideoViewModel model)
    {
        isReady = false;
        StateHasChanged();
        Model = model;
        isReady = true;
        StateHasChanged();
        
    }


}
