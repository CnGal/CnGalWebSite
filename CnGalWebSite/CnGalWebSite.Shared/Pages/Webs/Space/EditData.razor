@inject HttpClient Http

@inject SwalService SwalService
@inject ToastService? ToastService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject IJSRuntime JS


<TitleTip Title="编辑个人资料"></TitleTip>

<AutoSaveTip TItem="EditUserDataViewModel" Item="Model" DataLoaded="DataLoaded" @ref="autoSave" />

<div>
    @if (isReady == false)
    {
        <div class="  rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-4 pb-4 mb-4">

            <SkeletonParagraph />
            <div class="mt-2">
            </div>
            <SkeletonParagraph />
            <div class="mt-2">
            </div>
            <SkeletonParagraph />
            <div class="mt-2">
            </div>
            <SkeletonParagraph />
            <div class="mt-2">
            </div>
            <SkeletonParagraph />

        </div>
    }
    else
    {
        <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaTitleContainer Title="编辑个人资料" Icon="fa fa-fw  fa-user" Outline>
            <CnGalWebSite.Shared.MasaComponent.Shared.Editors.Users.ImageCard Model="Model" Class="mb-4" />

            <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaTitleContainer Title="账户安全" Icon="fa fa-fw fa-briefcase" Outline Collapable Class="mb-4">
                <div class="row">
                    <div class=" col-12 col-md-6  col-lg-4 mb-4">
                        <CnGalWebSite.Shared.MasaComponent.PC.Users.SecurityCards.PasswordCard Model="Model" />
                    </div>
                    <div class=" col-12 col-md-6  col-lg-4  mb-4">
                        <CnGalWebSite.Shared.MasaComponent.PC.Users.SecurityCards.EmailCard Model="Model" />
                    </div>
                    <div class=" col-12 col-md-6  col-lg-4 mb-4">
                        <CnGalWebSite.Shared.MasaComponent.PC.Users.SecurityCards.PhoneCard Model="Model" />
                    </div>
                    <div class=" col-12 col-md-6  col-lg-4 mb-4">
                        <CnGalWebSite.Shared.MasaComponent.PC.Users.SecurityCards.QQLoginCard Model="Model" />
                    </div>

                    <div class=" col-12 col-md-6  col-lg-4 mb-4">
                        <CnGalWebSite.Shared.MasaComponent.PC.Users.SecurityCards.QQGroupCard Model="Model" OnChanged="OnChanged" />
                    </div>
                    <div class=" col-12 col-md-6  col-lg-4  mb-4">
                        <CnGalWebSite.Shared.MasaComponent.PC.Users.SecurityCards.LoginCodeCard Model="Model" />
                    </div>
                    <div class=" col-12 col-md-6  col-lg-4  mb-4">
                        <CnGalWebSite.Shared.MasaComponent.PC.Users.SecurityCards.UserCertificationCard Model="Model" />
                    </div>
                </div>
            </CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaTitleContainer>
            <CnGalWebSite.Shared.MasaComponent.Shared.Editors.Users.MainCard Model="Model" Class="mb-4" />
            <CnGalWebSite.Shared.MasaComponent.Shared.Editors.Buttons.SubmitButton OnSubmit="OnSubmit" Model="Model" />

        </CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaTitleContainer>



    }

</div>
@code {


    [Parameter]
    public string Id { get; set; }

    public EditUserDataViewModel Model { get; set; } = new EditUserDataViewModel();
    private bool isReady = false;

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    AutoSaveTip<EditUserDataViewModel> autoSave { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            try
            {
                //获取词条信息
                Model = await Http.GetFromJsonAsync<EditUserDataViewModel>(ToolHelper.WebApiPath + "api/space/edituserdata/", ToolHelper.options);
                isReady = true;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                ErrorHandler.ProcessError(ex, "获取编辑用户资料失败");
            }
        }
    }

    public void OnChanged()
    {
        StateHasChanged();
        
    }

    private async Task OnSubmit()
    {
        //上传
        try
        {

            var result = await Http.PostAsJsonAsync<EditUserDataViewModel>(ToolHelper.WebApiPath + "api/space/edituserdata", Model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("保存用户信息失败", obj.Error);
            }
            else
            {
                await autoSave.Clean();

                SwalOption op= new SwalOption()
                {
                    Category = SwalCategory.Success,
                    Title = "修改个人资料成功",
                    Content = "我们需要对你的修改进行审核，在通过审核之前你的修改对其他用户不可见",
                    ShowClose = false
                };

                op.ButtonTemplate = new RenderFragment(builder =>
                {
                    builder.OpenComponent<Button>(0);
                    builder.AddAttribute(1, nameof(Button.Text), "我知道了");
                    builder.AddAttribute(2, nameof(Button.Icon), "fa fa-check");
                    builder.AddAttribute(3, nameof(Button.Color), Color.Success);
                    builder.AddAttribute(4, nameof(Button.IsOutline), true);
                    builder.AddAttribute(5, nameof(Button.OnClick), EventCallback.Factory.Create<MouseEventArgs>(this, async () =>
                    {
                        await op.Close();
                        NavigationManager.NavigateTo(Provider, "/space/index/" + Model.Id, "个人空间", "fa fa-star-o");
                    }));
                    builder.CloseComponent();
                });
                await SwalService.Show(op);
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "保存用户信息失败");
        }
    }

    private void DataLoaded(EditUserDataViewModel model)
    {
        isReady = false;
        StateHasChanged();
        Model = model;
        isReady = true;
        StateHasChanged();
        
    }

}
