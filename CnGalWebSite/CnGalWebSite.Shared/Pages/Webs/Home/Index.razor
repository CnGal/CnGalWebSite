@inject IHttpService _httpService
@inject ToastService? ToastService
@inject IJSRuntime JS
@inject IDataCacheService _dataCacheService
@inject IStructuredDataService _structuredDataService
@inject IEventService _eventService


<TitleTip></TitleTip>

<div itemscope itemtype="https://schema.org/WebSite" style="display:none">
    <meta itemprop="url" content="https://www.cngal.com/" />
    <form itemprop="potentialAction" itemscope itemtype="https://schema.org/SearchAction">
        <meta itemprop="target" content="https://www.cngal.com/search?Text={search_term_string}" />
        <input itemprop="query-input" type="text" name="search_term_string" required />
        <input type="submit" />
    </form>
</div>

<div class=" mb-4 rounded shadow-sm">
    <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaCarousel Model="Images" OnClick="OnClick" />
</div>
<CnGalWebSite.Shared.MasaComponent.Shared.Cards.NoticeCard Class="rounded shadow-sm p-2 bg-opacity mb-4" />
<HomeNewsViewTip></HomeNewsViewTip>

<HomeViewTip></HomeViewTip>

<CnGalWebSite.Shared.MasaComponent.Shared.Components.TrackEvent @ref="trackEven" />





@code {

    private List<CarouselViewModel> Images = new List<CarouselViewModel>();
    private List<CarouselViewModel> Carousels { get; set; } = new List<CarouselViewModel>();

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }
    CnGalWebSite.Shared.MasaComponent.Shared.Components.TrackEvent trackEven;


    #region 新建标签页
    public async void OpenNewPage(string url)
    {
        await _eventService.OpenNewPage( url);
    }
    #endregion

    protected override async Task OnInitializedAsync()
    {

        try
        {


            Carousels = await _dataCacheService.HomePageCarouselsCatche.GetCache(ToolHelper.WebApiPath + "api/home/GetHomeCarouselsView");

            Images = Carousels.OrderByDescending(s => s.Priority).Take(3).ToList();
            if (Carousels.Count >= 6)
            {
                Images.AddRange(Carousels.Where(s => Images.Any(x => s.Image == x.Image) == false).ToList().Random().Take(3));

            }
            else
            {
                Images.AddRange(Carousels.Where(s => Images.Any(x => s.Image == x.Image) == false));
            }

            //生成轮播结构数据
            await GenerateCarouselStructuredDataJson();

        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取主页轮播图列表失败");
        }

    }

    public async Task GenerateCarouselStructuredDataJson()
    {
        var urls = new List<string>();
        urls.AddRange((await _dataCacheService.HomeListCardsCache.GetCache("api/home/GetHomeRecentIssuelGameView")).Select(s => s.Url));
        urls.AddRange((await _dataCacheService.HomeListCardsCache.GetCache("api/home/GetHomeNewestGameView")).Select(s => s.Url));
        urls.AddRange((await _dataCacheService.HomeListCardsCache.GetCache("api/home/GetHomeRecentEditView")).Select(s => s.Url));
        urls.AddRange((await _dataCacheService.HomeListCardsCache.GetCache("api/home/GetHomeNoticesView")).Select(s => s.Url));
        urls.AddRange((await _dataCacheService.HomeListCardsCache.GetCache("api/home/GetHomeArticlesView")).Select(s => s.Url));
        urls.AddRange((await _dataCacheService.HomeListCardsCache.GetCache("api/home/GetHomeNewsView")).Select(s => s.Url));
        await _structuredDataService.SetStructuredData(urls);

    }


    private async Task OnClick(CarouselViewModel model)
    {
        if (trackEven != null)
        {
            await trackEven.SendTrackEvent(TrackEventType.Click, TrackEventDataType.Carousel, model.Id.ToString(), model.Note);
        }
    }
}
