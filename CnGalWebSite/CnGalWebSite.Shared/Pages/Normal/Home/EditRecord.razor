@page "/home/editrecord"


@inject HttpClient Http

@inject ToastService ToastService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager

@inject IJSRuntime JS
@inject IDataCacheService _dataCatcheService

@inject DialogService DialogService
@inject IDataCacheService _dataCatcheService
@implements IDisposable


@if (isReady)
{
    <TitleTip NoIndex Title="@("『"+ExaminesOverview.ObjectName+"』第" +(ExaminesOverview.Examines.FindIndex(s=>s.Id==ContrastId)+1)+"次编辑记录")" Description="@ExaminesOverview.ObjectBriefIntroduction" Image="@ExaminesOverview.Image"></TitleTip>
}

@if (isReady)
{
    <OverviewCard Model="ExaminesOverview" @ref="overviewCard" />
    <ContrastOverview Model="ExaminesOverview" ContrastItem="@ContrastId.ToString()" CurrentItem="@CurrentId.ToString()"
                                                                                   ContrastChanged="ContrastChanged" CurrentChanged="CurrentChanged">
        <ContrastView>
            @if (isRefreshing)
            {
                <div class="  rounded shadow-sm  bg-opacity pt-3">

                    <div class="row mt-2 ms-2 me-2 ps-0 pe-0">
                        <div class="col-12 col-md-12 col-lg-5 mt-1 mb-4">
                            <SkeletonAvatar Round="false" />
                        </div>

                        <div class="col-12 col-md-12 col-lg-6 mt-1 mb-2">
                            <SkeletonParagraph />
                        </div>
                    </div>
                </div>
                <div class="mt-3">
                    <div class="  rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-3 pb-3">
                        <SkeletonParagraph />

                    </div>
                </div>


                <div class=" mt-3">
                    <div class="  rounded shadow-sm  ps-4 pe-4 pt-3 pb-3 bg-opacity rounded">
                        <SkeletonParagraph />
                    </div>
                </div>
                <div class="mt-3 ps-0 pe-0">
                    <div class="  rounded shadow-sm  ps-4 pe-4 pt-3 pb-3 bg-opacity rounded">
                        <SkeletonParagraph />
                        <div class="mt-2">
                        </div>
                        <SkeletonParagraph />
                        <div class="mt-2">
                        </div>
                        <SkeletonParagraph />
                    </div>
                </div>
            }
            else
            {
                @if (ExaminesOverview.Type == ExaminedNormalListModelType.Entry)
                {
                    <EntryContrastCard Model="EntryContrast.ContrastModel" />
                }
                else if (ExaminesOverview.Type == ExaminedNormalListModelType.Article)
                {
                    <ArticleContrastCard Model="ArticleContrast.ContrastModel" />
                }
                else if (ExaminesOverview.Type == ExaminedNormalListModelType.Periphery)
                {
                    <PeripheryContrastCard Model="PeripheryContrast.ContrastModel" />
                }
                else if (ExaminesOverview.Type == ExaminedNormalListModelType.Tag)
                {
                    <TagContrastCard Model="TagContrast.ContrastModel" />
                }
                else if (ExaminesOverview.Type == ExaminedNormalListModelType.Video)
                {
                    <VideoContrastCard Model="VideoContrast.ContrastModel" />
                }
            }

        </ContrastView>
        <CurrentView>
            @if (isRefreshing)
            {
                <div class="  rounded shadow-sm  bg-opacity pt-3">

                    <div class="row mt-2 ms-2 me-2 ps-0 pe-0">
                        <div class="col-12 col-md-12 col-lg-5 mt-1 mb-4">
                            <SkeletonAvatar Round="false" />
                        </div>

                        <div class="col-12 col-md-12 col-lg-6 mt-1 mb-2">
                            <SkeletonParagraph />
                        </div>
                    </div>
                </div>
                <div class="mt-3">
                    <div class="  rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-3 pb-3">
                        <SkeletonParagraph />

                    </div>
                </div>


                <div class=" mt-3">
                    <div class="  rounded shadow-sm  ps-4 pe-4 pt-3 pb-3 bg-opacity rounded">
                        <SkeletonParagraph />
                    </div>
                </div>
                <div class="mt-3 ps-0 pe-0">
                    <div class="  rounded shadow-sm  ps-4 pe-4 pt-3 pb-3 bg-opacity rounded">
                        <SkeletonParagraph />
                        <div class="mt-2">
                        </div>
                        <SkeletonParagraph />
                        <div class="mt-2">
                        </div>
                        <SkeletonParagraph />
                    </div>
                </div>
            }
            else
            {
                @if (ExaminesOverview.Type == ExaminedNormalListModelType.Entry)
                {
                    <EntryContrastCard Model="EntryContrast.CurrentModel" />
                }
                else if (ExaminesOverview.Type == ExaminedNormalListModelType.Article)
                {
                    <ArticleContrastCard Model="ArticleContrast.CurrentModel" />
                }
                else if (ExaminesOverview.Type == ExaminedNormalListModelType.Periphery)
                {
                    <PeripheryContrastCard Model="PeripheryContrast.CurrentModel" />
                }
                else if (ExaminesOverview.Type == ExaminedNormalListModelType.Tag)
                {
                    <TagContrastCard Model="TagContrast.CurrentModel" />
                }
                else if (ExaminesOverview.Type == ExaminedNormalListModelType.Video)
                {
                    <VideoContrastCard Model="VideoContrast.CurrentModel" />
                }
            }


        </CurrentView>
    </ContrastOverview>
}
else
{
    <div class="row">
        <div class="col-md-12 col-xl-8 mb-3">
            <div class="rounded shadow-sm bg-opacity rounded ps-4 pe-4 pt-3 pb-3">
                <SkeletonParagraph />
            </div>
            <div class="rounded shadow-sm bg-opacity rounded ps-4 pe-4 pt-3 pb-3 mt-3">
                <SkeletonParagraph />
                <div class="mt-2">
                </div>
                <SkeletonParagraph />
            </div>
        </div>
        <div class="col-md-12 col-xl-4 mb-3">
            <div class="rounded shadow-sm ps-4 pe-4 pt-3 pb-3 bg-opacity h-100 rounded">
                <SkeletonParagraph />
                <div class="mt-2">
                </div>
                <SkeletonParagraph />
                <div class="mt-2">
                </div>
                <SkeletonParagraph />
            </div>
        </div>
    </div>
}


@code {

    [SupplyParameterFromQuery]
    [Parameter]
    public long ContrastId { get; set; }

    [SupplyParameterFromQuery]
    [Parameter]
    public long CurrentId { get; set; }

    bool isReady = false;
    bool isRefreshing = true;

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    public ExaminesOverviewViewModel ExaminesOverview { get; set; } = new ExaminesOverviewViewModel();
    public EntryContrastEditRecordViewModel EntryContrast { get; set; } = new EntryContrastEditRecordViewModel();
    public ArticleContrastEditRecordViewModel ArticleContrast { get; set; } = new ArticleContrastEditRecordViewModel();
    public PeripheryContrastEditRecordViewModel PeripheryContrast { get; set; } = new PeripheryContrastEditRecordViewModel();
    public TagContrastEditRecordViewModel TagContrast { get; set; } = new TagContrastEditRecordViewModel();
    public VideoContrastEditRecordViewModel VideoContrast { get; set; } = new VideoContrastEditRecordViewModel();

    OverviewCard overviewCard;

    async Task OnReLoad()
    {
        await OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            NavigationManager.LocationChanged -= LocationChanged;
            NavigationManager.LocationChanged += LocationChanged;

        }

    }
    public async void LocationChanged(object sender, LocationChangedEventArgs args)
    {
        if(NavigationManager.Uri.Contains("/home/editrecord"))
        {
            try
            {
                await OnRefreshContrastView(ContrastId.ToString(), CurrentId.ToString());
            }
            catch
            {

            }
        }

    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ExaminesOverview = await _dataCatcheService.ExaminesOverviewCatche.GetCache(ContrastId.ToString());

            await OnRefreshContrastView(ContrastId.ToString(), CurrentId.ToString());

            isReady = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取编辑记录概览失败");
        }
    }
    public void ContrastChanged(string conId)
    {
        if (overviewCard != null)
        {
            int index = ExaminesOverview.Examines.FindIndex(s => s.IsSelected);
            if (index == ExaminesOverview.Examines.Count - 1)
            {
                overviewCard.SelecteChanged(ExaminesOverview.Examines[index]);
            }
            else
            {
                overviewCard.SelecteChanged(ExaminesOverview.Examines[index + 1]);
            }
        }

        NavigationManager.NavigateTo("/home/editrecord?ContrastId=" + conId + "&CurrentId=" + CurrentId);


    }
    public void CurrentChanged(string curId)
    {
        NavigationManager.NavigateTo("/home/editrecord?ContrastId=" + ContrastId + "&CurrentId=" + curId);
    }

    public async Task OnRefreshContrastView(string conId, string curId)
    {
        try
        {
            isRefreshing = true;
            StateHasChanged();
            if (ExaminesOverview.Type == ExaminedNormalListModelType.Entry)
            {
                EntryContrast = await _dataCatcheService.EntryContrastEditRecordViewCatche.GetCache(conId + "/" + (curId=="0"?ExaminesOverview.Examines.Last().Id: curId));
                ContrastId = EntryContrast.ContrastId;
                CurrentId = EntryContrast.CurrentId;
            }
            else if (ExaminesOverview.Type == ExaminedNormalListModelType.Article)
            {
                ArticleContrast = await _dataCatcheService.ArticleContrastEditRecordViewCatche.GetCache(conId + "/" + (curId == "0" ? ExaminesOverview.Examines.Last().Id : curId));
                ContrastId = ArticleContrast.ContrastId;
                CurrentId = ArticleContrast.CurrentId;
            }
            else if (ExaminesOverview.Type == ExaminedNormalListModelType.Periphery)
            {
                PeripheryContrast = await _dataCatcheService.PeripheryContrastEditRecordViewCatche.GetCache(conId + "/" + (curId == "0" ? ExaminesOverview.Examines.Last().Id : curId));
                ContrastId = PeripheryContrast.ContrastId;
                CurrentId = PeripheryContrast.CurrentId;
            }
            else if (ExaminesOverview.Type == ExaminedNormalListModelType.Tag)
            {
                TagContrast = await _dataCatcheService.TagContrastEditRecordViewCatche.GetCache(conId + "/" + (curId == "0" ? ExaminesOverview.Examines.Last().Id : curId));
                ContrastId = TagContrast.ContrastId;
                CurrentId = TagContrast.CurrentId;
            }
            else if (ExaminesOverview.Type == ExaminedNormalListModelType.Video)
            {
                VideoContrast = await _dataCatcheService.VideoContrastEditRecordViewCatche.GetCache(conId + "/" + (curId == "0" ? ExaminesOverview.Examines.Last().Id : curId));
                ContrastId = VideoContrast.ContrastId;
                CurrentId = VideoContrast.CurrentId;
            }
            isRefreshing = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取详细编辑对比视图失败");
        }
    }
    #region 释放实例

    public void  Dispose()
    {

        NavigationManager.LocationChanged -= LocationChanged;

        GC.SuppressFinalize(this);
    }
    #endregion
}
