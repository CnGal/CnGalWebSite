@page "/disambigs/index/{Id}"


@inject IHttpService _httpService

@inject ToastService? ToastService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject IJSRuntime JS



@if(string.IsNullOrWhiteSpace(Model.Name)==false)
{
    <TitleTip Title="@Model.Name"  Description="@Model.BriefIntroduction"></TitleTip>
}


@if (string.IsNullOrWhiteSpace(Model.SmallBackgroundPicture) == false)
{
    <div id="web_bg" style="background-image: url(@Model.SmallBackgroundPicture)" class=" d-none  bg-d-lg-block bgimage-ison"></div>
}
@if (string.IsNullOrWhiteSpace(Model.BackgroundPicture) == false)
{
    <div id="web_bg" style="background-image: url(@Model.BackgroundPicture)" class=" d-none d-sm-block bgimage-ison"></div>
}

<div class="container" style="padding-right: 0; padding-left: 0">
    <div class="row">
        <div class="col-12 col-md-12 col-lg-3 pb-3 mb-4">
            <DisambigMainInfor Id="Model.Id" State="Model.MainState" Text="@Model.BriefIntroduction" Title="@Model.Name">
            </DisambigMainInfor>
        </div>
        <div class="col-12  col-md-12 col-lg-9 mb-4">
            <div class="row">

                @if (isReady)
                {
                    @foreach (var item in Model.Relecances)
                    {
                        <div class="col-12">
                            @if (item.article != null)
                            {
                                <ArticleInforViewTip Model="item.article"></ArticleInforViewTip>
                            }
                            else if (item.entry != null)
                            {
                                <EntryInforViewTip Model="item.entry"></EntryInforViewTip>
                            }

                        </div>}
                }
            </div>

        </div>

    </div>
</div>


@code {
    private string id = "";
    [Parameter]
    public string Id
    {
        get { return id; }
        set
        {
            id = value;
            OnInitializedAsync();
        }
    }
    public string steam { get; set; }
    public int currentPage { get; set; } = 1;
    public string NoticeCard { get; set; } = "";
    public string CurrentUserRank { get; set; }
    bool isReady = false;
    bool isAsyncReady = false;

    public DisambigViewModel Model { get; set; } = new DisambigViewModel
    {
        Relecances = new List<DisambigAloneModel>()
    };
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isReady = false;
            //获取文章信息
            Model = await _httpService.GetAsync<DisambigViewModel>("api/disambigs/GetDisambigView/" + Id);
            isReady = true;
            StateHasChanged();
        }
        catch(Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取消歧义页失败");
        }

    }
    public async void OnClickUrl(NavigateModel model)
    {
        try
        {
            NavigationManager.NavigateTo(Provider,model.Url, model.Title, model.Icon);
        }
        catch
        {
            await ToastService.Error("导航失败", "请尝试刷新页面");
        }
    }
}
