@page "/admin/listtags"
@attribute [Authorize(Roles = "Admin")]

@inject IHttpService _httpService
@inject ToastService? ToastService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject IJSRuntime JS


<TitleTip Title="标签版块"></TitleTip>

<div class="">
    <div class="" style="padding-right: 0;padding-left: 0;">
        <div class="  rounded shadow-sm  bg-opacity p-3">
            <h3 class="fw-bold text-center">标签版块</h3>
            <p class="text-center" style="color: gray;margin-top:20px">
                <i class="fa fa-codepen fa-fw "></i>
                <span class="article-infor-text">@(InforModel.Hiddens + "个隐藏标签")</span>&nbsp;&nbsp;&nbsp;

                <i class="fa fa-newspaper-o fa-fw "></i>
                <span class="article-infor-text">@("总计"+InforModel.All + "个标签")</span>

            </p>
        </div>

        <div class="mt-3" style="padding-right: 0;padding-left: 0;">
            <div class=" rounded shadow-sm -lg p-4 bg-opacity">
                <Table TItem="ListTagAloneModel" IsPagination="true" PageItemsSource="@PageItems" OnQueryAsync="@OnQueryBasicAsync" SearchModel="@searchModel" ShowSearch="true" @ref="TableRows"
                       ShowExtendButtons="true" ExtendButtonColumnWidth="200" SelectedRows="@SelectedRows" IsMultipleSelect="true" IsStriped=true
                        ShowToolbar="true" ShowDefaultButtons="false" FixedExtendButtonsColumn="true">
                    <TableToolbarTemplate>
                        <TableToolbarButton TItem="ListTagAloneModel" Color="Color.Primary" Icon="fa fa-map-signs" Text="显示" OnClickCallback="OnUnHiddenClick" IsAsync="true" />
                        <TableToolbarButton TItem="ListTagAloneModel" Color="Color.Success" Icon="fa fa-unlink" Text="隐藏" OnClickCallback="OnHiddenClick" IsAsync="true" />

                    </TableToolbarTemplate>
                    <TableColumns>
                        <TableColumn @bind-Field="@context.Id" Sortable="true" DefaultSort="true" DefaultSortOrder="@SortOrder.Desc" Fixed="true" Width="80" />
                        <TableColumn @bind-Field="@context.Name" Searchable="true" Sortable="true" Width="100" />
                        <TableColumn @bind-Field="@context.LastEditTime" Sortable="true" Width="150" />

                        <TableColumn @bind-Field="@context.IsHidden" Sortable="true" ComponentType="@typeof(Switch)" Width="110" />
                    </TableColumns>
                    <RowButtonTemplate>
                        <TableCellButton AutoSelectedRowWhenClick="false"  Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-pencil" Text="编辑" IsAsync="true" OnClickWithoutRender="@(async ()=> { NavigationManager.NavigateTo("/tags/edittag/" +context.Id); })" />
                        <TableCellButton AutoSelectedRowWhenClick="false"  Size="Size.ExtraSmall" Color="Color.Info" Icon="fa fa-database" Text="查看" IsAsync="true" OnClickWithoutRender="@(async ()=> { NavigationManager.NavigateTo("/tags/index/" +context.Id); })" />
                        <TableCellButton AutoSelectedRowWhenClick="false"  Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-comments-o" Text="切换显示" IsAsync="true" OnClickWithoutRender="@(() => OnRowEditIsHiddenClick(new int[] { context.Id }, !context.IsHidden, true))" />
                    </RowButtonTemplate>
                </Table>
            </div>
        </div>

    </div>

</div>
@code {
    [NotNull]
    private Table<ListTagAloneModel>? TableRows { get; set; }
    private List<ListTagAloneModel> SelectedRows { get; set; } = new();

    public ListTagsInforViewModel InforModel { get; set; } = new ListTagsInforViewModel();
    public ListTagsViewModel ListModel { get; set; } = new ListTagsViewModel { Tags = new List<ListTagAloneModel>() };

    private ListTagAloneModel searchModel { get; set; } = new ListTagAloneModel();

    private IEnumerable<int> PageItems => new int[] { 10, 20, 40, 80, 200, 5000 };
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }



    protected override async Task OnInitializedAsync()
    {
        try
        {
            InforModel = await _httpService.GetAsync<ListTagsInforViewModel>("api/tags/listtags");
        }
        catch(Exception ex)
        {
            ErrorHandler.ProcessError(ex, "无法获取标签数据");
        }

    }

    private async Task<QueryData<ListTagAloneModel>> OnQueryBasicAsync(QueryPageOptions options)
    {
        try
        {
            return await _httpService.PostAsync<TagsPagesInfor, QueryData<ListTagAloneModel>>("api/tags/GettagList", new TagsPagesInfor { SearchModel = searchModel, Options = (QueryPageOptionsHelper)options });
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "无法获取标签列表");
            return new QueryData<ListTagAloneModel>();
        }
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="item"></param>
    private async Task OnRowEditIsHiddenClick(int[] ids, bool isHidden, bool showMessage)
    {
        string tempString = isHidden == true ? "隐藏" : "显示";
        //调用API
        try
        {
            var obj = await _httpService.PostAsync<HiddenTagModel, Result>("api/Tags/HiddenTag", new HiddenTagModel { Ids = ids, IsHidden = isHidden });



            if (obj.Successful == false)
            {
                await ToastService.Error(tempString + "标签失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success(tempString + "标签成功", tempString + "标签成功");
                    await TableRows.QueryAsync();
                }
            }
        }
        catch(Exception ex)
        {
            ErrorHandler.ProcessError(ex, tempString + "标签失败");
        }
    }

    private async Task OnHiddenClick(IEnumerable<ListTagAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改评论显示状态", "请选中评论");
            return;
        }

        await OnRowEditIsHiddenClick(items.Select(s => s.Id).ToArray(), true, false);

        await ToastService.Success("隐藏标签成功", "隐藏标签成功");
        await TableRows.QueryAsync();
    }
    private async Task OnUnHiddenClick(IEnumerable<ListTagAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改标签显示状态", "请选中标签");
            return;
        }

        await OnRowEditIsHiddenClick(items.Select(s => s.Id).ToArray(), false, false);

        await ToastService.Success("显示标签成功", "显示标签成功");
        await TableRows.QueryAsync();
    }
}
