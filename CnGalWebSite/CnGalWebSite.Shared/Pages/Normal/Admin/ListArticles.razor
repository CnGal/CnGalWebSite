@page "/admin/listarticles"
@attribute [Authorize(Roles = "Admin")]

@inject IHttpService _httpService
@inject ToastService? ToastService
@inject NavigationManager NavigationManager


<CnGalWebSite.Shared.MasaComponent.Shared.Cards.TitleTip Title="文章版块"/>


<div class=" rounded shadow-sm -lg p-4 bg-opacity">
    <Table TItem="ListArticleAloneModel" IsPagination="true" PageItemsSource="@PageItems" OnQueryAsync="@OnQueryBasicAsync" SearchModel="@SearchModelArticle" ShowSearch="true" @ref="TableRows"
           ShowExtendButtons="true" ExtendButtonColumnWidth="340" SelectedRows="@SelectedRows" IsMultipleSelect="true" IsStriped=true
           ShowToolbar="true" ShowDefaultButtons="false" FixedExtendButtonsColumn="true">
        <TableToolbarTemplate>
            <TableToolbarButton TItem="ListArticleAloneModel" Color="Color.Success" Icon="fa fa-pencil" Text="编辑" OnClickCallback="OnEditModel" IsAsync="true" />
            <TableToolbarButton TItem="ListArticleAloneModel" Color="Color.Primary" Icon="fa fa-arrow-up" Text="增权重" OnClickCallback="OnPriorityUpClick" IsAsync="true" />
            <TableToolbarButton TItem="ListArticleAloneModel" Color="Color.Success" Icon="fa fa-arrow-down" Text="降权重" OnClickCallback="OnPriorityDownClick" IsAsync="true" />
            <TableToolbarButton TItem="ListArticleAloneModel" Color="Color.Primary" Icon="fa fa-map-signs" Text="显示" OnClickCallback="OnUnHiddenClick" IsAsync="true" />
            <TableToolbarButton TItem="ListArticleAloneModel" Color="Color.Success" Icon="fa fa-unlink" Text="隐藏" OnClickCallback="OnHiddenClick" IsAsync="true" />
            <TableToolbarButton TItem="ListArticleAloneModel" Color="Color.Primary" Icon="fa fa-comments" Text="开启评论" OnClickCallback="OnCanCommentClick" IsAsync="true" />
            <TableToolbarButton TItem="ListArticleAloneModel" Color="Color.Success" Icon="fa fa-comments-o" Text="关闭评论" OnClickCallback="OnCanNotCommentClick" IsAsync="true" />
        </TableToolbarTemplate>
        <TableColumns>
            <TableColumn @bind-Field="@context.Id" Sortable="true" DefaultSort="true" Fixed="true" Width="60" DefaultSortOrder="SortOrder.Desc" />
            <TableColumn @bind-Field="@context.Type" Sortable="true" Searchable="true" Width="80" />
            <TableColumn @bind-Field="@context.Name" Sortable="true" Searchable="true" TextWrap="true" Width="200" />
            <TableColumn @bind-Field="@context.BriefIntroduction" Searchable="true" TextWrap="true" Width="400" />
            <TableColumn @bind-Field="@context.CreateTime" Sortable="true" Width="120" FormatString="yyyy-MM-dd" />
            <TableColumn @bind-Field="@context.LastEditTime" Sortable="true" Width="120" FormatString="yyyy-MM-dd" />
            <TableColumn @bind-Field="@context.ReaderCount" Sortable="true" Width="80" />
            <TableColumn @bind-Field="@context.OriginalAuthor" Sortable="true" Searchable="true" TextWrap="true" Width="200" />
            <TableColumn @bind-Field="@context.OriginalLink" Sortable="true" Searchable="true" TextWrap="true" Width="200" />
            <TableColumn @bind-Field="@context.PubishTime" Sortable="true" Width="120" FormatString="yyyy-MM-dd" />

            <TableColumn @bind-Field="@context.Priority" Sortable="true" Width="120" />
            <TableColumn @bind-Field="@context.IsHidden" Sortable="true" ComponentType="@typeof(Switch)" Width="110" />
            <TableColumn @bind-Field="@context.CanComment" Sortable="true" ComponentType="@typeof(Switch)" Width="110" />

        </TableColumns>
        <RowButtonTemplate>
            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-map-signs" Text="查看" IsAsync="true" OnClick="@(() => OnRowLookClick( context.Id , context.Name))" />
            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-arrow-up" Text="增权重" IsAsync="true" OnClick="@(() => OnRowEditPriorityClick(new long[] { context.Id }, 1 , true))" />
            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Info" Icon="fa fa-arrow-down" Text="降权重" IsAsync="true" OnClick="@(() => OnRowEditPriorityClick(new long[] { context.Id }, - 1 , true))" />
            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Danger" Icon="fa fa-unlink" Text="切换显示" IsAsync="true" OnClick="@(() => OnRowEditIsHiddenClick(new long[] { context.Id }, !context.IsHidden, true))" />
            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Danger" Icon="fa fa-comments-o" Text="开关评论" IsAsync="true" OnClick="@(() => OnRowEditCanCommentClick(new long[] { context.Id }, !context.CanComment, true))" />
        </RowButtonTemplate>
    </Table>
</div>

@code {

    [NotNull]
    private Table<ListArticleAloneModel>? TableRows { get; set; }
    private List<ListArticleAloneModel> SelectedRows { get; set; } = new();

    public PagedResultDto<Article> pagedResultDto = new PagedResultDto<Article> { Data = new List<Article>(), CurrentPage = 1, TotalCount = 0 };

    public ListArticlesViewModel ListModel { get; set; } = new ListArticlesViewModel { Articles = new List<ListArticleAloneModel>() };

    private ListArticleAloneModel SearchModelArticle { get; set; } = new ListArticleAloneModel();

    private IEnumerable<int> PageItems => new int[] { 10, 20, 40, 80, 200, 5000 };
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }


    protected override async Task OnInitializedAsync()
    {

    }

    private async Task<QueryData<ListArticleAloneModel>> OnQueryBasicAsync(QueryPageOptions options)
    {
        try
        {
            return await _httpService.PostAsync<ArticlesPagesInfor, QueryData<ListArticleAloneModel>>("api/admin/GetArticleList", new ArticlesPagesInfor { SearchModel = SearchModelArticle, Options = (QueryPageOptionsHelper)options });
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "无法获取文章列表");
            return new QueryData<ListArticleAloneModel>();
        }
    }
    private async Task OnRowEditPriorityClick(long[] ids, int plusPriority, bool showMessage)
    {
        //调用API
        try
        {
            var obj = await _httpService.PostAsync<EditArticlePriorityViewModel, Result>("api/articles/EditPriority", new EditArticlePriorityViewModel { Ids = ids, PlusPriority = plusPriority });
            if (obj.Successful == false)
            {
                await ToastService.Error("修改文章权重失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success("修改文章权重成功", "修改文章权重成功");
                    await TableRows.QueryAsync();
                }

            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "修改文章权重失败");
        }

    }


    private async Task OnPriorityUpClick(IEnumerable<ListArticleAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改文章权重", "请选中文章");
            return;
        }

        await OnRowEditPriorityClick(items.Select(s => s.Id).ToArray(), 1, false);
        await ToastService.Success("修改文章权重成功", "修改文章权重成功");
        await TableRows.QueryAsync();
    }
    private async Task OnPriorityDownClick(IEnumerable<ListArticleAloneModel> items)
    {

        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改文章权重", "请选中文章");
            return;
        }

        await OnRowEditPriorityClick(items.Select(s => s.Id).ToArray(), -1, false);

        await ToastService.Success("修改文章权重成功", "修改文章权重成功");
        await TableRows.QueryAsync();
    }

    private async Task OnRowEditIsHiddenClick(long[] ids, bool isHidden, bool showMessage)
    {
        string tempString = isHidden == true ? "隐藏" : "显示";
        //调用API
        try
        {
            var obj = await _httpService.PostAsync<HiddenArticleModel, Result>("api/articles/Hide", new HiddenArticleModel { Ids = ids, IsHidden = isHidden });



            if (obj.Successful == false)
            {
                await ToastService.Error(tempString + "文章失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success(tempString + "文章成功", tempString + "文章成功");
                    await TableRows.QueryAsync();
                }
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, tempString + "文章失败");
        }
    }

    private async Task OnHiddenClick(IEnumerable<ListArticleAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改文章显示状态", "请选中文章");
            return;
        }

        await OnRowEditIsHiddenClick(items.Select(s => s.Id).ToArray(), true, false);

        await ToastService.Success("隐藏文章成功", "隐藏词条成功");
        await TableRows.QueryAsync();
    }
    private async Task OnUnHiddenClick(IEnumerable<ListArticleAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改文章显示状态", "请选中文章");
            return;
        }

        await OnRowEditIsHiddenClick(items.Select(s => s.Id).ToArray(), false, false);

        await ToastService.Success("显示文章成功", "显示文章成功");
        await TableRows.QueryAsync();
    }

    public void OnRowLookClick(long id, string name)
    {
        NavigationManager.NavigateTo( "/articles/index/" + id);

    }


    private async Task OnRowEditCanCommentClick(long[] ids, bool canComment, bool showMessage)
    {
        string tempString = canComment == true ? "启用文章评论" : "关闭文章评论";
        //调用API
        try
        {
            var obj = await _httpService.PostAsync<EditArticleCanCommentModel, Result>("api/comments/EditArticleCanComment", new EditArticleCanCommentModel { Ids = ids, CanComment = canComment });



            if (obj.Successful == false)
            {
                await ToastService.Error(tempString + "失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success(tempString + "成功", tempString + "成功");
                    await TableRows.QueryAsync();
                }
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, tempString + "失败");
        }
    }

    private async Task OnCanCommentClick(IEnumerable<ListArticleAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改文章评论状态", "请选中文章");
            return;
        }

        await OnRowEditCanCommentClick(items.Select(s => s.Id).ToArray(), true, false);

        await ToastService.Success("开启文章评论成功", "开启文章评论成功");
        await TableRows.QueryAsync();
    }
    private async Task OnCanNotCommentClick(IEnumerable<ListArticleAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改文章评论状态", "请选中文章");
            return;
        }

        await OnRowEditCanCommentClick(items.Select(s => s.Id).ToArray(), false, false);

        await ToastService.Success("关闭文章评论成功", "关闭文章评论成功");
        await TableRows.QueryAsync();
    }


    [Inject]
    [NotNull]
    private DialogService? DialogService { get; set; }

    public async Task OnEditModel(IEnumerable<ListArticleAloneModel> items)
    {
        int count = items.Count();
        if (count == 0)
        {
            await ToastService.Information("没有修改文章评论状态", "请选中文章");
            return;
        }
        else if (count > 1)
        {
            await ToastService.Information("没有修改文章评论状态", "请选中一个文章");
            return;
        }
        var model = Utility.GenerateEditorItems<ListArticleAloneModel>();
        // var item = items.First(i => i.GetFieldName() == nameof(Foo.Hobby));
        //item.Data = Foo.GenerateHobbys(Localizer);

        var option = new EditDialogOption<ListArticleAloneModel>()
        {
            Title = "编辑文章",
            Model = items.First(),
            Items = model,
            OnEditAsync = async context =>
            {
                // Trace.Log("保存按钮被点击");
                var editModel = (ListArticleAloneModel)context.Model;
                await EditData(editModel);
                return true;
            }
        };

        await DialogService.ShowEditDialog(option);
    }

    public async Task EditData(ListArticleAloneModel model)
    {
        try
        {
            var obj = await _httpService.PostAsync<ListArticleAloneModel, Result>("api/batch/UpdateArticleData", model);

            if (obj.Successful == false)
            {
                await ToastService.Error("保存数据失败", obj.Error);
            }
            else
            {

                await ToastService.Success("保存数据成功", "保存数据成功，不会留下审核记录和编辑记录");
                await TableRows.QueryAsync();
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "保存文章数据失败");
        }
    }
}

