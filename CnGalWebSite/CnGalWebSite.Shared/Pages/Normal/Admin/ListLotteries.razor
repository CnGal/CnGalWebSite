@page "/admin/listlotteries"
@attribute [Authorize(Roles = "Admin")]

@inject IHttpService _httpService
@inject ToastService? ToastService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject IJSRuntime JS


<TitleTip Title="抽奖版块"></TitleTip>



<div class=" rounded shadow-sm -lg p-4 bg-opacity">
    <Table TItem="ListLotteryAloneModel" IsPagination="true" PageItemsSource="@PageItems" OnQueryAsync="@OnQueryBasicAsync" SearchModel="@SearchModelArticle" ShowSearch="true" @ref="TableRows"
           ShowExtendButtons="true" ExtendButtonColumnWidth="390" SelectedRows="@SelectedRows" IsMultipleSelect="true" IsStriped=true
           ShowToolbar="true" ShowDefaultButtons="false" FixedExtendButtonsColumn="true">
        <TableToolbarTemplate>
            <TableToolbarButton TItem="ListLotteryAloneModel" Color="Color.Primary" Icon="fa fa-arrow-up" Text="增权重" OnClickCallback="OnPriorityUpClick" IsAsync="true" />
            <TableToolbarButton TItem="ListLotteryAloneModel" Color="Color.Success" Icon="fa fa-arrow-down" Text="降权重" OnClickCallback="OnPriorityDownClick" IsAsync="true" />
            <TableToolbarButton TItem="ListLotteryAloneModel" Color="Color.Primary" Icon="fa fa-map-signs" Text="显示" OnClickCallback="OnUnHiddenClick" IsAsync="true" />
            <TableToolbarButton TItem="ListLotteryAloneModel" Color="Color.Success" Icon="fa fa-unlink" Text="隐藏" OnClickCallback="OnHiddenClick" IsAsync="true" />
            <TableToolbarButton TItem="ListLotteryAloneModel" Color="Color.Primary" Icon="fa fa-comments" Text="开启评论" OnClickCallback="OnCanCommentClick" IsAsync="true" />
            <TableToolbarButton TItem="ListLotteryAloneModel" Color="Color.Success" Icon="fa fa-comments-o" Text="关闭评论" OnClickCallback="OnCanNotCommentClick" IsAsync="true" />
        </TableToolbarTemplate>
        <TableColumns>
            <TableColumn @bind-Field="@context.Id" Sortable="true" DefaultSort="true" Fixed="true" Width="60" />
            <TableColumn @bind-Field="@context.Type" Searchable="true" Sortable="true" Width="80" />
            <TableColumn @bind-Field="@context.Name" Sortable="true" Searchable="true" TextWrap="true" Width="200" />
            <TableColumn @bind-Field="@context.BriefIntroduction" Searchable="true" TextWrap="true" Width="400" />
            <TableColumn @bind-Field="@context.BeginTime" Sortable="true" Width="160" FormatString="yyyy-MM-dd HH:mm" />
            <TableColumn @bind-Field="@context.EndTime" Sortable="true" Width="160" FormatString="yyyy-MM-dd HH:mm" />
            <TableColumn @bind-Field="@context.LotteryTime" Sortable="true" Width="160" FormatString="yyyy-MM-dd HH:mm" />
            <TableColumn @bind-Field="@context.ReaderCount" Sortable="true" Width="80" />
            <TableColumn @bind-Field="@context.CommentCount" Sortable="true" Width="80" />

            <TableColumn @bind-Field="@context.LastEditTime" Sortable="true" Width="160" FormatString="yyyy-MM-dd HH:mm" />

            <TableColumn @bind-Field="@context.Priority" Sortable="true" Width="120" />
            <TableColumn @bind-Field="@context.IsHidden" Sortable="true" ComponentType="@typeof(Switch)" Width="110" />
            <TableColumn @bind-Field="@context.IsEnd" Sortable="true" ComponentType="@typeof(Switch)" Width="110" />
            <TableColumn @bind-Field="@context.CanComment" Sortable="true" ComponentType="@typeof(Switch)" Width="110" />

        </TableColumns>
        <RowButtonTemplate>
            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-map-signs" Text="查看" IsAsync="true" OnClickWithoutRender="@(async () => OnRowLookClick( context.Id , context.Name))" />
            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-pencil" Text="编辑" IsAsync="true" OnClickWithoutRender="@(async () => OnRowEditClick( context.Id , context.Name))" />
            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-arrow-up" Text="增权重" IsAsync="true" OnClickWithoutRender="@(() => OnRowEditPriorityClick(new long[] { context.Id }, 1 , true))" />
            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Info" Icon="fa fa-arrow-down" Text="降权重" IsAsync="true" OnClickWithoutRender="@(() => OnRowEditPriorityClick(new long[] { context.Id }, - 1 , true))" />
            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Danger" Icon="fa fa-unlink" Text="切换显示" IsAsync="true" OnClickWithoutRender="@(() => OnRowEditIsHiddenClick(new long[] { context.Id }, !context.IsHidden, true))" />
            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Danger" Icon="fa fa-comments-o" Text="开关评论" IsAsync="true" OnClickWithoutRender="@(() => OnRowEditCanCommentClick(new long[] { context.Id }, !context.CanComment, true))" />
        </RowButtonTemplate>
    </Table>
</div>


@code {

    [NotNull]
    private Table<ListLotteryAloneModel>? TableRows { get; set; }
    private List<ListLotteryAloneModel> SelectedRows { get; set; } = new();


    public ListLotteriesViewModel ListModel { get; set; } = new ListLotteriesViewModel { Lotteries = new List<ListLotteryAloneModel>() };

    private ListLotteryAloneModel SearchModelArticle { get; set; } = new ListLotteryAloneModel();

    private IEnumerable<int> PageItems => new int[] { 10, 20, 40, 80, 200, 5000 };

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    protected override async Task OnInitializedAsync()
    {

    }

    private async Task<QueryData<ListLotteryAloneModel>> OnQueryBasicAsync(QueryPageOptions options)
    {
        try
        {
            return await _httpService.PostAsync<LotteriesPagesInfor, QueryData<ListLotteryAloneModel>>("api/admin/GetLotteryList", new LotteriesPagesInfor { SearchModel = SearchModelArticle, Options = (QueryPageOptionsHelper)options });
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "无法获取抽奖列表");
            return new QueryData<ListLotteryAloneModel>();
        }
    }
    private async Task OnRowEditPriorityClick(long[] ids, int plusPriority, bool showMessage)
    {
        //调用API
        try
        {
            var obj = await _httpService.PostAsync<EditLotteryPriorityViewModel, Result>("api/Lotteries/EditLotteryPriority", new EditLotteryPriorityViewModel { Ids = ids, PlusPriority = plusPriority });
            if (obj.Successful == false)
            {
                await ToastService.Error("修改抽奖权重失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success("修改抽奖权重成功", "修改抽奖权重成功");
                    await TableRows.QueryAsync();
                }

            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "修改抽奖权重失败");
        }

    }


    private async Task OnPriorityUpClick(IEnumerable<ListLotteryAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改抽奖权重", "请选中抽奖");
            return;
        }

        await OnRowEditPriorityClick(items.Select(s => s.Id).ToArray(), 1, false);
        await ToastService.Success("修改抽奖权重成功", "修改抽奖权重成功");
        await TableRows.QueryAsync();
    }
    private async Task OnPriorityDownClick(IEnumerable<ListLotteryAloneModel> items)
    {

        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改抽奖权重", "请选中抽奖");
            return;
        }

        await OnRowEditPriorityClick(items.Select(s => s.Id).ToArray(), -1, false);

        await ToastService.Success("修改抽奖权重成功", "修改抽奖权重成功");
        await TableRows.QueryAsync();
    }

    private async Task OnRowEditIsHiddenClick(long[] ids, bool isHidden, bool showMessage)
    {
        string tempString = isHidden == true ? "隐藏" : "显示";
        //调用API
        try
        {
            var obj = await _httpService.PostAsync<HiddenLotteryModel, Result>("api/Lotteries/HiddenLottery", new HiddenLotteryModel { Ids = ids, IsHidden = isHidden });



            if (obj.Successful == false)
            {
                await ToastService.Error(tempString + "抽奖失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success(tempString + "抽奖成功", tempString + "抽奖成功");
                    await TableRows.QueryAsync();
                }
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, tempString + "抽奖失败");
        }
    }

    private async Task OnHiddenClick(IEnumerable<ListLotteryAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改抽奖显示状态", "请选中抽奖");
            return;
        }

        await OnRowEditIsHiddenClick(items.Select(s => s.Id).ToArray(), true, false);

        await ToastService.Success("隐藏抽奖成功", "隐藏抽奖成功");
        await TableRows.QueryAsync();
    }
    private async Task OnUnHiddenClick(IEnumerable<ListLotteryAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改抽奖显示状态", "请选中抽奖");
            return;
        }

        await OnRowEditIsHiddenClick(items.Select(s => s.Id).ToArray(), false, false);

        await ToastService.Success("显示抽奖成功", "显示抽奖成功");
        await TableRows.QueryAsync();
    }

    public void OnRowLookClick(long id, string name)
    {
        NavigationManager.NavigateTo(Provider, "/lotteries/index/" + id, name, "fa fa-gift");

    }
    public void OnRowEditClick(long id, string name)
    {
        NavigationManager.NavigateTo(Provider, "/lotteries/editlottery/" + id, "编辑投票", "fa fa-pencil");

    }


    private async Task OnRowEditCanCommentClick(long[] ids, bool canComment, bool showMessage)
    {
        string tempString = canComment == true ? "启用抽奖评论" : "关闭抽奖评论";
        //调用API
        try
        {
            var obj = await _httpService.PostAsync<EditLotteryCanCommentModel, Result>("api/comments/EditLotteryCanComment", new EditLotteryCanCommentModel { Ids = ids, CanComment = canComment });



            if (obj.Successful == false)
            {
                await ToastService.Error(tempString + "失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success(tempString + "成功", tempString + "成功");
                    await TableRows.QueryAsync();
                }
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, tempString + "失败");
        }
    }

    private async Task OnCanCommentClick(IEnumerable<ListLotteryAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改抽奖评论状态", "请选中抽奖");
            return;
        }

        await OnRowEditCanCommentClick(items.Select(s => s.Id).ToArray(), true, false);

        await ToastService.Success("开启抽奖评论成功", "开启抽奖评论成功");
        await TableRows.QueryAsync();
    }
    private async Task OnCanNotCommentClick(IEnumerable<ListLotteryAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改抽奖评论状态", "请选中抽奖");
            return;
        }

        await OnRowEditCanCommentClick(items.Select(s => s.Id).ToArray(), false, false);

        await ToastService.Success("关闭抽奖评论成功", "关闭抽奖评论成功");
        await TableRows.QueryAsync();
    }



}

