@page "/admin/listbackuparchives"
@attribute [Authorize(Roles = "Admin")]
@inject IAuthService AuthService
@inject IHttpService _httpService
@inject ToastService? ToastService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject IJSRuntime JS


<TitleTip Title="互联网档案馆备份版块"></TitleTip>


<div class=" rounded shadow-sm -lg p-4 bg-opacity">
    <Table TItem="ListBackUpArchiveAloneModel" IsPagination="true" PageItemsSource="@PageItems" OnQueryAsync="@OnQueryBasicAsync" SearchModel="@searchModel" ShowSearch="true" @ref="TableRows"
           ShowExtendButtons="true" ExtendButtonColumnWidth="70" SelectedRows="@SelectedRows" IsMultipleSelect="true" IsStriped=true IsAutoRefresh="@IsAutoRefresh"
           ShowToolbar="true" ShowDefaultButtons="false" FixedExtendButtonsColumn="true">
        <TableToolbarTemplate>
            <TableToolbarButton TItem="ListBackUpArchiveAloneModel" Color="Color.Info" Icon="fa fa-paper-plane" Text="执行" OnClickCallback="OnRunClick" IsAsync="true" />
            <TableToolbarButton TItem="ListBackUpArchiveAloneModel" Color="Color.Primary" Icon="fa fa-spin fa-spinner fa-fw" Text="切换自动刷新" OnClickCallback="ClickIsAutoRefresh" />
        </TableToolbarTemplate>
        <TableColumns>
            <TableColumn @bind-Field="@context.Id" Sortable="true" DefaultSort="true" DefaultSortOrder="@SortOrder.Desc" Fixed="true" Width="80" />
            <TableColumn @bind-Field="@context.LastBackUpTime" Sortable="true" Width="200" TextWrap="true" />
            <TableColumn @bind-Field="@context.LastTimeUsed" Sortable="true" Width="100" TextWrap="true" FormatString="0.0" />
            <TableColumn @bind-Field="@context.IsLastFail" Sortable="true" ComponentType="@typeof(Switch)" Width="110" />
            <TableColumn @bind-Field="@context.EntryId" Searchable="true" Sortable="true" Width="150" />

            <TableColumn @bind-Field="@context.ArticleId" Searchable="true" Sortable="true" Width="150" />
        </TableColumns>
        <RowButtonTemplate>
            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Info" Icon="fa fa-paper-plane" Text="执行" IsAsync="true" OnClickWithoutRender="@(() => OnRowRunClick( new long[] { context.Id } ,true))" />
        </RowButtonTemplate>
    </Table>
</div>

@code {
    [NotNull]
    private Table<ListBackUpArchiveAloneModel>? TableRows { get; set; }
    private List<ListBackUpArchiveAloneModel> SelectedRows { get; set; } = new();

    public ListBackUpArchivesViewModel ListModel { get; set; } = new ListBackUpArchivesViewModel { BackUpArchives = new List<ListBackUpArchiveAloneModel>() };

    private ListBackUpArchiveAloneModel searchModel { get; set; } = new ListBackUpArchiveAloneModel();

    private IEnumerable<int> PageItems => new int[] { 10, 20, 40, 80, 200, 5000 };
    private bool IsAutoRefresh { get; set; } = true;
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    protected override async Task OnInitializedAsync()
    {

    }

    private async Task<QueryData<ListBackUpArchiveAloneModel>> OnQueryBasicAsync(QueryPageOptions options)
    {
        try
        {
            return await _httpService.PostAsync<BackUpArchivesPagesInfor, QueryData<ListBackUpArchiveAloneModel>>("api/BackUpArchives/GetBackUpArchiveList", new BackUpArchivesPagesInfor { SearchModel = searchModel, Options = (QueryPageOptionsHelper)options });
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "无法获取互联网档案馆备份信息列表");
            return new QueryData<ListBackUpArchiveAloneModel>();
        }
    }

    private async Task OnRowRunClick(long[] ids, bool showMessage)
    {
        //调用API
        try
        {
            var obj = await _httpService.PostAsync<RunBackUpArchiveModel, Result>("api/BackUpArchives/RunBackUpArchive", new RunBackUpArchiveModel { Ids = ids });

            if (obj.Successful == false)
            {
                await ToastService.Error("执行备份失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success("执行备份成功", "执行备份成功");
                    await TableRows.QueryAsync();
                }
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "执行备份失败");
        }
    }

    private async Task OnRunClick(IEnumerable<ListBackUpArchiveAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有执行备份", "请选中备份");
            return;
        }

        await OnRowRunClick(items.Select(s => s.Id).ToArray(), false);

        await ToastService.Success("执行备份成功", "执行备份成功");
        await TableRows.QueryAsync();
    }

    private Task ClickIsAutoRefresh(IEnumerable<ListBackUpArchiveAloneModel> items)
    {
        IsAutoRefresh = !IsAutoRefresh;
        StateHasChanged();
        return Task.CompletedTask;
    }
}
