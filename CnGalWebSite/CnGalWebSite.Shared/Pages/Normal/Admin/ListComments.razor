@page "/admin/listcomments"
@attribute [Authorize(Roles = "Admin")]
@inject IAuthService AuthService
@inject HttpClient Http
@inject ToastService? ToastService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<TitleTip Title="评论版块"></TitleTip>



<div class=" rounded shadow-sm -lg p-4 bg-opacity">
    <Table TItem="ListCommentAloneModel" IsPagination="true" PageItemsSource="@PageItems" OnQueryAsync="@OnQueryBasicAsync" SearchModel="@searchModel" ShowSearch="true" @ref="TableRows"
           ShowExtendButtons="true" ExtendButtonColumnWidth="320" SelectedRows="@SelectedRows" IsMultipleSelect="true" IsStriped=true
           ShowToolbar="true" ShowDefaultButtons="false" FixedExtendButtonsColumn="true">
        <TableToolbarTemplate>
            <TableToolbarButton TItem="ListCommentAloneModel" Color="Color.Primary" Icon="fa fa-map-signs" Text="显示" OnClickCallback="OnUnHiddenClick" IsAsync="true" />
            <TableToolbarButton TItem="ListCommentAloneModel" Color="Color.Success" Icon="fa fa-unlink" Text="隐藏" OnClickCallback="OnHiddenClick" IsAsync="true" />
            <TableToolbarButton TItem="ListCommentAloneModel" Color="Color.Primary" Icon="fa fa-arrow-up" Text="增权重" OnClickCallback="OnPriorityUpClick" IsAsync="true" />
            <TableToolbarButton TItem="ListCommentAloneModel" Color="Color.Success" Icon="fa fa-arrow-down" Text="降权重" OnClickCallback="OnPriorityDownClick" IsAsync="true" />
        </TableToolbarTemplate>
        <TableColumns>
            <TableColumn @bind-Field="@context.Id" Sortable="true" DefaultSort="true" DefaultSortOrder="@SortOrder.Desc" Fixed="true" Width="80" />
            <TableColumn @bind-Field="@context.Type" Searchable="true" Sortable="true" Width="100" />
            <TableColumn @bind-Field="@context.CommentTime" Sortable="true" Width="200" />
            <TableColumn @bind-Field="@context.Text" Searchable="true" TextWrap="true" Width="400" />

            <TableColumn @bind-Field="@context.ApplicationUserId" Searchable="true" Sortable="true" Width="300" />
            <TableColumn @bind-Field="@context.ParentCodeNavigationId" Searchable="true" Sortable="true" Width="110" />

            <TableColumn @bind-Field="@context.EntryId" Searchable="true" Sortable="true" Width="110" />
            <TableColumn @bind-Field="@context.ArticleId" Sortable="true" Width="130" TextWrap="true" />
            <TableColumn @bind-Field="@context.UserSpaceCommentManagerId" Sortable="true" Width="160" />
            <TableColumn @bind-Field="@context.IsHidden" Sortable="true" ComponentType="@typeof(Switch)" Width="110" />
        </TableColumns>
        <RowButtonTemplate>
            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-database" Text="查看" IsAsync="true" OnClickWithoutRender="@(async () => LookComment( context.ArticleId,context.EntryId,context.UserSpaceCommentManagerId,context?.Type??CommentType.None))" />
            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-comments-o" Text="切换显示" IsAsync="true" OnClickWithoutRender="@(() => OnRowEditIsHiddenClick(new long[] { context.Id }, !context.IsHidden, true))" />
            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-arrow-up" Text="增权重" IsAsync="true" OnClickWithoutRender="@(() => OnRowEditPriorityClick(new long[] { context.Id }, 1 , true))" />
            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Info" Icon="fa fa-arrow-down" Text="降权重" IsAsync="true" OnClickWithoutRender="@(() => OnRowEditPriorityClick(new long[] { context.Id }, - 1 , true))" />
        </RowButtonTemplate>
    </Table>
</div>

@code {
    [NotNull]
    private Table<ListCommentAloneModel>? TableRows { get; set; }
    private List<ListCommentAloneModel> SelectedRows { get; set; } = new();

    public ListCommentsViewModel ListModel { get; set; } = new ListCommentsViewModel { Comments = new List<ListCommentAloneModel>() };

    private ListCommentAloneModel searchModel { get; set; } = new ListCommentAloneModel();

    private IEnumerable<int> PageItems => new int[] { 10, 20, 40, 80, 200, 5000 };
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }


    protected override async Task OnInitializedAsync()
    {

    }

    private async Task<QueryData<ListCommentAloneModel>> OnQueryBasicAsync(QueryPageOptions options)
    {
        try
        {
            var result = await Http.PostAsJsonAsync<CommentsPagesInfor>(ToolHelper.WebApiPath + "api/admin/GetCommentList", new CommentsPagesInfor { SearchModel = searchModel, Options = (QueryPageOptionsHelper)options });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            return JsonSerializer.Deserialize<QueryData<ListCommentAloneModel>>(jsonContent, ToolHelper.options);
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "无法获取评论列表");
            return new QueryData<ListCommentAloneModel>();
        }
    }

    private void LookComment(long? articleId, int? entryId, long? spaceId, CommentType type)
    {
        switch (type)
        {
            case CommentType.CommentArticle:
                NavigationManager.NavigateTo(Provider, "/articles/index/" + articleId, "查看评论", "fa fa-comments-o");
                break;
            case CommentType.CommentEntries:
                NavigationManager.NavigateTo(Provider, "/entries/index/" + entryId, "查看评论", "fa fa-comments-o");
                break;
        }
        
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="item"></param>
    private async Task OnRowEditIsHiddenClick(long[] ids, bool isHidden, bool showMessage)
    {
        string tempString = isHidden == true ? "隐藏" : "显示";
        //调用API
        try
        {
            var result = await Http.PostAsJsonAsync<HiddenCommentModel>(ToolHelper.WebApiPath + "api/comments/HiddenComment", new HiddenCommentModel { Ids = ids, IsHidden = isHidden });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            var obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);



            if (obj.Successful == false)
            {
                await ToastService.Error(tempString + "评论失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success(tempString + "评论成功", tempString + "评论成功");
                    await TableRows.QueryAsync();
                }
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, tempString + "评论失败");
        }
    }

    private async Task OnHiddenClick(IEnumerable<ListCommentAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改评论显示状态", "请选中评论");
            return;
        }

        await OnRowEditIsHiddenClick(items.Select(s => s.Id).ToArray(), true, false);

        await ToastService.Success("隐藏评论成功", "隐藏评论成功");
        await TableRows.QueryAsync();
    }
    private async Task OnUnHiddenClick(IEnumerable<ListCommentAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改评论显示状态", "请选中评论");
            return;
        }

        await OnRowEditIsHiddenClick(items.Select(s => s.Id).ToArray(), false, false);

        await ToastService.Success("显示评论成功", "显示评论成功");
        await TableRows.QueryAsync();
    }

    private async Task OnRowEditPriorityClick(long[] ids, int plusPriority, bool showMessage)
    {
        //调用API
        try
        {
            var result = await Http.PostAsJsonAsync<EditCommentPriorityViewModel>(ToolHelper.WebApiPath + "api/comments/EditCommentPriority", new EditCommentPriorityViewModel { Ids = ids, PlusPriority = plusPriority });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            var obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            if (obj.Successful == false)
            {
                await ToastService.Error("修改评论权重失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success("修改评论权重成功", "修改评论权重成功");
                    await TableRows.QueryAsync();
                }

            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "修改评论权重失败");
        }

    }


    private async Task OnPriorityUpClick(IEnumerable<ListCommentAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改评论权重", "请选中评论");
            return;
        }

        await OnRowEditPriorityClick(items.Select(s => s.Id).ToArray(), 1, false);
        await ToastService.Success("修改评论权重成功", "修改评论权重成功");
        await TableRows.QueryAsync();
    }
    private async Task OnPriorityDownClick(IEnumerable<ListCommentAloneModel> items)
    {

        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改评论权重", "请选中评论");
            return;
        }

        await OnRowEditPriorityClick(items.Select(s => s.Id).ToArray(), -1, false);

        await ToastService.Success("修改评论权重成功", "修改评论权重成功");
        await TableRows.QueryAsync();
    }
}
