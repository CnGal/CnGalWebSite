@page "/admin/listfavoritefolders"

@attribute [Authorize(Roles = "Admin")]

@inject HttpClient Http
@inject ToastService? ToastService
@inject NavigationManager NavigationManager

<TitleTip Title="收藏夹板块"></TitleTip>

<div class=" rounded shadow-sm p-4 bg-opacity">
    <Table TItem="ListFavoriteFolderAloneModel" IsPagination="true" PageItemsSource="@PageItems" OnQueryAsync="@OnQueryBasicAsync" SearchModel="@searchModel" ShowSearch="true" @ref="TableRows"
           ShowExtendButtons="true" ExtendButtonColumnWidth="120" SelectedRows="@SelectedRows" IsMultipleSelect="true" IsStriped=true
           ShowToolbar="true" ShowDefaultButtons="false" FixedExtendButtonsColumn="true">
        <TableColumns>
            <TableColumn @bind-Field="@context.Id" Sortable="true" DefaultSort="true" Fixed="true" Width="60" DefaultSortOrder="SortOrder.Desc" />
            <TableColumn @bind-Field="@context.Name" Searchable="true" Sortable="true" Width="100" />
            <TableColumn @bind-Field="@context.BriefIntroduction" Sortable="true" Width="200" TextWrap="true" />
            <TableColumn @bind-Field="@context.UserId" Sortable="true" Width="300" TextWrap="true" />
            <TableColumn @bind-Field="@context.Count" Sortable Searchable="true" TextWrap="true" Width="80" />
            <TableColumn @bind-Field="@context.CreateTime" Sortable TextWrap="true" Width="140" FormatString="yyyy-MM-dd HH:mm" />

            <TableColumn @bind-Field="@context.IsHidden" Sortable="true" ComponentType="@typeof(Switch)" Width="80" />
            <TableColumn @bind-Field="@context.ShowPublicly" Sortable="true" ComponentType="@typeof(Switch)" Width="80" />
            <TableColumn @bind-Field="@context.IsDefault" Sortable="true" ComponentType="@typeof(Switch)" Width="80" />
        </TableColumns>
        <RowButtonTemplate>
            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-edit" Text="编辑" IsAsync="true" OnClickWithoutRender="@(async () => OnRowManageClick(context.Id,context.UserId))" />
            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-share" Text="查看" IsAsync="true" OnClickWithoutRender="@(async () => OnRowLookClick(context.Id))" />
        </RowButtonTemplate>
    </Table>
</div>

@code {

    [NotNull]
    private Table<ListFavoriteFolderAloneModel>? TableRows { get; set; }
    private List<ListFavoriteFolderAloneModel> SelectedRows { get; set; } = new();

    public ListFavoriteFoldersInforViewModel InforModel { get; set; } = new ListFavoriteFoldersInforViewModel();
    public ListFavoriteFoldersViewModel ListModel { get; set; } = new ListFavoriteFoldersViewModel { FavoriteFolders = new List<ListFavoriteFolderAloneModel>() };

    private ListFavoriteFolderAloneModel searchModel { get; set; } = new ListFavoriteFolderAloneModel();

    private IEnumerable<int> PageItems => new int[] { 10, 20, 40, 80, 200, 5000 };
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }


    private async Task<QueryData<ListFavoriteFolderAloneModel>> OnQueryBasicAsync(QueryPageOptions options)
    {
        try
        {
            var result = await Http.PostAsJsonAsync<FavoriteFoldersPagesInfor>(ToolHelper.WebApiPath + "api/favorites/GetFavoriteFolderList", new FavoriteFoldersPagesInfor { Options = (QueryPageOptionsHelper)options, SearchModel = searchModel });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            return JsonSerializer.Deserialize<QueryData<ListFavoriteFolderAloneModel>>(jsonContent, ToolHelper.options);
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "无法获取收藏夹列表");
            return new QueryData<ListFavoriteFolderAloneModel>();
        }
    }

    private void OnRowManageClick(long folderId, string userId)
    {
        NavigationManager.NavigateTo("/space/EditSpaceFavoriteObjects?UserId=" + userId + "&FolderId=" + folderId);
    }

    private void OnRowLookClick(long folderId)
    {
        NavigationManager.NavigateTo("/favoritefolders/index/" + folderId);
    }

}
