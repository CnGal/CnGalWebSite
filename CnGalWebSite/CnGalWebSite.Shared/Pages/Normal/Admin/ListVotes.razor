@page "/admin/listvotes"
@attribute [Authorize(Roles = "Admin")]

@inject IHttpService _httpService
@inject ToastService? ToastService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject IJSRuntime JS


<TitleTip Title="投票版块"></TitleTip>




<div class=" rounded shadow-sm -lg p-4 bg-opacity">
    <Table TItem="ListVoteAloneModel" IsPagination="true" PageItemsSource="@PageItems" OnQueryAsync="@OnQueryBasicAsync" SearchModel="@SearchModelArticle" ShowSearch="true" @ref="TableRows"
           ShowExtendButtons="true" ExtendButtonColumnWidth="340" SelectedRows="@SelectedRows" IsMultipleSelect="true" IsStriped=true
           ShowToolbar="true" ShowDefaultButtons="false" FixedExtendButtonsColumn="true">
        <TableToolbarTemplate>
            <TableToolbarButton TItem="ListVoteAloneModel" Color="Color.Primary" Icon="fa fa-arrow-up" Text="增权重" OnClickCallback="OnPriorityUpClick" IsAsync="true" />
            <TableToolbarButton TItem="ListVoteAloneModel" Color="Color.Success" Icon="fa fa-arrow-down" Text="降权重" OnClickCallback="OnPriorityDownClick" IsAsync="true" />
            <TableToolbarButton TItem="ListVoteAloneModel" Color="Color.Primary" Icon="fa fa-map-signs" Text="显示" OnClickCallback="OnUnHiddenClick" IsAsync="true" />
            <TableToolbarButton TItem="ListVoteAloneModel" Color="Color.Success" Icon="fa fa-unlink" Text="隐藏" OnClickCallback="OnHiddenClick" IsAsync="true" />
            <TableToolbarButton TItem="ListVoteAloneModel" Color="Color.Primary" Icon="fa fa-comments" Text="开启评论" OnClickCallback="OnCanCommentClick" IsAsync="true" />
            <TableToolbarButton TItem="ListVoteAloneModel" Color="Color.Success" Icon="fa fa-comments-o" Text="关闭评论" OnClickCallback="OnCanNotCommentClick" IsAsync="true" />
        </TableToolbarTemplate>
        <TableColumns>
            <TableColumn @bind-Field="@context.Id" Sortable="true" DefaultSort="true" Fixed="true" Width="60" />
            <TableColumn @bind-Field="@context.Type" Searchable="true" Sortable="true" Width="80" />
            <TableColumn @bind-Field="@context.Name" Sortable="true" Searchable="true" TextWrap="true" Width="200" />
            <TableColumn @bind-Field="@context.BriefIntroduction" Searchable="true" TextWrap="true" Width="400" />
            <TableColumn @bind-Field="@context.BeginTime" Sortable="true" Width="120" FormatString="yyyy-MM-dd" />
            <TableColumn @bind-Field="@context.EndTime" Sortable="true" Width="120" FormatString="yyyy-MM-dd" />
            <TableColumn @bind-Field="@context.ReaderCount" Sortable="true" Width="80" />
            <TableColumn @bind-Field="@context.CommentCount" Sortable="true" Width="80" />

            <TableColumn @bind-Field="@context.LastEditTime" Sortable="true" Width="120" FormatString="yyyy-MM-dd" />

            <TableColumn @bind-Field="@context.Priority" Sortable="true" Width="120" />
            <TableColumn @bind-Field="@context.IsHidden" Sortable="true" ComponentType="@typeof(Switch)" Width="110" />
            <TableColumn @bind-Field="@context.CanComment" Sortable="true" ComponentType="@typeof(Switch)" Width="110" />

        </TableColumns>
        <RowButtonTemplate>
            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-map-signs" Text="查看" IsAsync="true" OnClickWithoutRender="@(async () => OnRowLookClick( context.Id , context.Name))" />
            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-arrow-up" Text="增权重" IsAsync="true" OnClickWithoutRender="@(() => OnRowEditPriorityClick(new long[] { context.Id }, 1 , true))" />
            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Info" Icon="fa fa-arrow-down" Text="降权重" IsAsync="true" OnClickWithoutRender="@(() => OnRowEditPriorityClick(new long[] { context.Id }, - 1 , true))" />
            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Danger" Icon="fa fa-unlink" Text="切换显示" IsAsync="true" OnClickWithoutRender="@(() => OnRowEditIsHiddenClick(new long[] { context.Id }, !context.IsHidden, true))" />
            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Danger" Icon="fa fa-comments-o" Text="开关评论" IsAsync="true" OnClickWithoutRender="@(() => OnRowEditCanCommentClick(new long[] { context.Id }, !context.CanComment, true))" />
        </RowButtonTemplate>
    </Table>
</div>


@code {

    [NotNull]
    private Table<ListVoteAloneModel>? TableRows { get; set; }
    private List<ListVoteAloneModel> SelectedRows { get; set; } = new();


    public ListVotesViewModel ListModel { get; set; } = new ListVotesViewModel { Votes = new List<ListVoteAloneModel>() };

    private ListVoteAloneModel SearchModelArticle { get; set; } = new ListVoteAloneModel();

    private IEnumerable<int> PageItems => new int[] { 10, 20, 40, 80, 200, 5000 };

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    protected override async Task OnInitializedAsync()
    {

    }

    private async Task<QueryData<ListVoteAloneModel>> OnQueryBasicAsync(QueryPageOptions options)
    {
        try
        {
            return await _httpService.PostAsync<VotesPagesInfor, QueryData<ListVoteAloneModel>>("api/admin/GetVoteList", new VotesPagesInfor { SearchModel = SearchModelArticle, Options = (QueryPageOptionsHelper)options });
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "无法获取投票列表");
            return new QueryData<ListVoteAloneModel>();
        }
    }
    private async Task OnRowEditPriorityClick(long[] ids, int plusPriority, bool showMessage)
    {
        //调用API
        try
        {
            var obj = await _httpService.PostAsync<EditVotePriorityViewModel, Result>("api/votes/EditVotePriority", new EditVotePriorityViewModel { Ids = ids, PlusPriority = plusPriority });
            if (obj.Successful == false)
            {
                await ToastService.Error("修改投票权重失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success("修改投票权重成功", "修改投票权重成功");
                    await TableRows.QueryAsync();
                }

            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "修改投票权重失败");
        }

    }


    private async Task OnPriorityUpClick(IEnumerable<ListVoteAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改投票权重", "请选中投票");
            return;
        }

        await OnRowEditPriorityClick(items.Select(s => s.Id).ToArray(), 1, false);
        await ToastService.Success("修改投票权重成功", "修改投票权重成功");
        await TableRows.QueryAsync();
    }
    private async Task OnPriorityDownClick(IEnumerable<ListVoteAloneModel> items)
    {

        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改投票权重", "请选中投票");
            return;
        }

        await OnRowEditPriorityClick(items.Select(s => s.Id).ToArray(), -1, false);

        await ToastService.Success("修改投票权重成功", "修改投票权重成功");
        await TableRows.QueryAsync();
    }

    private async Task OnRowEditIsHiddenClick(long[] ids, bool isHidden, bool showMessage)
    {
        string tempString = isHidden == true ? "隐藏" : "显示";
        //调用API
        try
        {
            var obj = await _httpService.PostAsync<HiddenVoteModel, Result>("api/votes/HiddenVote", new HiddenVoteModel { Ids = ids, IsHidden = isHidden });



            if (obj.Successful == false)
            {
                await ToastService.Error(tempString + "投票失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success(tempString + "投票成功", tempString + "投票成功");
                    await TableRows.QueryAsync();
                }
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, tempString + "投票失败");
        }
    }

    private async Task OnHiddenClick(IEnumerable<ListVoteAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改投票显示状态", "请选中投票");
            return;
        }

        await OnRowEditIsHiddenClick(items.Select(s => s.Id).ToArray(), true, false);

        await ToastService.Success("隐藏投票成功", "隐藏投票成功");
        await TableRows.QueryAsync();
    }
    private async Task OnUnHiddenClick(IEnumerable<ListVoteAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改投票显示状态", "请选中投票");
            return;
        }

        await OnRowEditIsHiddenClick(items.Select(s => s.Id).ToArray(), false, false);

        await ToastService.Success("显示投票成功", "显示投票成功");
        await TableRows.QueryAsync();
    }

    public void OnRowLookClick(long id, string name)
    {
        NavigationManager.NavigateTo(Provider, "/votes/index/" + id, name, "fa fa-dropbox");

    }


    private async Task OnRowEditCanCommentClick(long[] ids, bool canComment, bool showMessage)
    {
        string tempString = canComment == true ? "启用投票评论" : "关闭投票评论";
        //调用API
        try
        {
            var obj = await _httpService.PostAsync<EditVoteCanCommentModel, Result>("api/comments/EditVoteCanComment", new EditVoteCanCommentModel { Ids = ids, CanComment = canComment });



            if (obj.Successful == false)
            {
                await ToastService.Error(tempString + "失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success(tempString + "成功", tempString + "成功");
                    await TableRows.QueryAsync();
                }
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, tempString + "失败");
        }
    }

    private async Task OnCanCommentClick(IEnumerable<ListVoteAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改投票评论状态", "请选中投票");
            return;
        }

        await OnRowEditCanCommentClick(items.Select(s => s.Id).ToArray(), true, false);

        await ToastService.Success("开启投票评论成功", "开启投票评论成功");
        await TableRows.QueryAsync();
    }
    private async Task OnCanNotCommentClick(IEnumerable<ListVoteAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改投票评论状态", "请选中投票");
            return;
        }

        await OnRowEditCanCommentClick(items.Select(s => s.Id).ToArray(), false, false);

        await ToastService.Success("关闭投票评论成功", "关闭投票评论成功");
        await TableRows.QueryAsync();
    }



}

