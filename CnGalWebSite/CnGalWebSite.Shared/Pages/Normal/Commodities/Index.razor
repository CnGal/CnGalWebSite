@page "/commodities"
@page "/commodities/{Type}"

@inject IPageModelCatche<List< CommodityUserModel>> _pageModelCatche
@inject NavigationManager NavigationManager
@inject IHttpService _httpService
@implements IDisposable

<CnGalWebSite.Shared.MasaComponent.Shared.Cards.TitleTip Title="看板娘的小卖铺" />

<CnGalWebSite.Components.Containers.MiniModeContainer>
    @if (isReadyA)
    {
        @if (ForceHide)
        {
            <NotAuthorizedTipView NoPermissions="true" />
        }
        else
        {
            <MRow>
                <MCol Cols="12" Md="5" Lg="4" Xl="3" Class="mb-4">
                    <CnGalWebSite.Shared.MasaComponent.PC.Commodities.KanbanCard />
                </MCol>
                <MCol Cols="12" Md="7" Lg="8" Xl="9" Class="mb-4">
                    <MDCard Class="mb-4">
                        <MTabs Value="index" ValueChanged="IndexChanged" IconsAndText Grow CenterActive>
                            <MTab Value="1">
                                小卖铺<MIcon>@IconType.Store.ToIconString()</MIcon>
                            </MTab>
                            <MTab Value="2">
                                G币兑换<MIcon>@IconType.Lottery.ToIconString()</MIcon>
                            </MTab>
                            <MTab Value="3">
                                G币记录<MIcon>@IconType.Record.ToIconString()</MIcon>
                            </MTab>
                        </MTabs>
                    </MDCard>

                    <MTabsItems @bind-Value="index">
                        <MTabItem Value="1">
                            @if (isReadyB)
                            {
                                <MRow>
                                    @foreach (var item in Model)
                                    {
                                        <MCol Cols="6" Md="6" Lg="4" Xl="3" Class="mb-4">
                                            <CnGalWebSite.Shared.MasaComponent.PC.Commodities.ItemCard Model="item" />
                                        </MCol>
                                    }
                                </MRow>
                            }
                            else
                            {
                                <CnGalWebSite.Components.Progressings.ProgressingCard Page Fill />
                            }
                        </MTabItem>
                        <MTabItem Value="2">
                            <CnGalWebSite.Shared.MasaComponent.PC.Commodities.Codes.MainCard />
                        </MTabItem>
                        <MTabItem Value="3">
                            <CnGalWebSite.Shared.MasaComponent.PC.Commodities.ListGCoinsRecordsCard />
                        </MTabItem>

                    </MTabsItems>
                </MCol>
            </MRow>
        }
    }
    else
    {
        <CnGalWebSite.Components.Progressings.ProgressingCard Page Fill />

    }

</CnGalWebSite.Components.Containers.MiniModeContainer>

@code {

    [Parameter]
    public string Type { get; set; }

    bool ForceHide = true;
    bool isReadyA;
    bool isReadyB;
    StringNumber index = 0;

    public List<CommodityUserModel> Model { get; set; }

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }


    protected override async Task OnInitializedAsync()
    {
        LocationChanged(null, null);
        try
        {
            //获取词条信息
            var mode = await _httpService.GetAsync<KanbanPermissionsModel>("api/space/GetKanbanPermissions/");
            ForceHide = !mode.Permissions;
            isReadyA = true;
            StateHasChanged();

            if (ForceHide == false)
            {
                Model = await _pageModelCatche.GetCache("api/commodities/GetAllCommodities");
                isReadyB = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            ForceHide = true;
            isReadyA = true;
            await ErrorHandler.ProcessError(ex, "获取看板娘的小卖铺商品列表失败");
        }
    }


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            NavigationManager.LocationChanged -= LocationChanged;
            NavigationManager.LocationChanged += LocationChanged;
        }
    }

    public void LocationChanged(object sender, LocationChangedEventArgs args)
    {
        index = Type switch
        {
            "Shop" => 1,
            "Code" => 2,
            "Record" => 3,
            _ => 1
        };
        StateHasChanged();

    }


    public void IndexChanged(StringNumber value)
    {
        index = value;

        string baseStr;

        if (NavigationManager.Uri.Contains("8th"))
        {
            baseStr = "8th";
        }
        else
        {
            baseStr = "commodities";
        }

        NavigationManager.NavigateTo($"/{baseStr}/" + (index.ToInt32() switch
        {
            1 => "Shop",
            2 => "Code",
            3 => "Record",
            _ => ""
        }));

    }


    public void Dispose()
    {

        NavigationManager.LocationChanged -= LocationChanged;

        GC.SuppressFinalize(this);
    }
}
