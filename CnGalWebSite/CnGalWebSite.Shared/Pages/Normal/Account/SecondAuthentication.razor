@page "/account/SecondAuthentication/{*ReturnUrl}"

@attribute [Authorize]

@inject IDataCacheService _dataCacheService

@inject IAuthService AuthService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager

@inject ToastService? ToastService

@inject IAuthService AuthService
@inject SwalService SwalService
@inject IHttpService _httpService

<TitleTip NoIndex Title="二次身份验证"></TitleTip>
<CnGalWebSite.Shared.MasaComponent.Shared.Tips.LoginPagesRoot>
    @if (Type == SecondAuthenticationType.None)
    {
        <div class="p-3">
            <h1 class=" login-h1-text mb-3 text-center">我们需要验证你的身份</h1>
            <span>你正在修改或访问敏感信息，在此之前我们需要验证你的身份，你可以选择下方任一一种方式进行验证</span>
            <div class="row pt-6">
                <div class="form-group col-12">
                    @if (_dataCacheService.UserAuthenticationTypeModel.IsOnPhone == false)
                    {
                        <Button Color="Color.Dark" style="width:100%" Text=" 手机号码" IsOutline="false" IsDisabled="true" Icon="fa fa-phone" Size="Size.None" @onclick="OnClickPhone"></Button>
                    }
                    else
                    {
                        <Button Color="Color.Dark" style="width:100%" Text=" 手机号码" IsOutline="true" Icon="fa fa-phone" Size="Size.None" @onclick="OnClickPhone"></Button>
                    }
                </div>
                <div class="form-group col-12">
                    @if (_dataCacheService.UserAuthenticationTypeModel.IsOnEmail == false)
                    {
                        <Button Color="Color.Dark" style="width:100%" Text=" 电子邮箱" IsOutline="false" IsDisabled="true" Icon="fa fa-envelope-o" Size="Size.None" @onclick="OnClickEmail"></Button>
                    }
                    else
                    {
                        <Button Color="Color.Dark" style="width:100%" Text=" 电子邮箱" IsOutline="true" Icon="fa fa-envelope-o" Size="Size.None" @onclick="OnClickEmail"></Button>
                    }
                </div>
            </div>
        </div>
    }
    else if (Type == SecondAuthenticationType.Email)
    {
        <div class="p-3">
            <h1 class=" login-h1-text mb-3 text-center">验证电子邮箱</h1>
            <span class="mb-4">我们已经向你的电子邮箱发送了一封验证邮件，请在下方填写其中的验证码。如果没有在收件箱找到邮件，请检查垃圾箱</span>
            <div class="form-group mt-4  mb-0">

                <div class="row">
                    <div class="form-group col">
                        <BootstrapInput @bind-Value="Model.NumToken" ShowLabel="true" />
                    </div>
                    <div class="form-group col-auto" style=" display: flex; align-items: flex-end;">
                        <PostVerificationCodeTip SendType="SendType.Email"></PostVerificationCodeTip>
                    </div>
                    <div class="form-group col-12">
                        <Button Color="Color.Dark" IsAsync="true" style="width:100%" OnClick="HandleConfirm">验证</Button>
                    </div>

                </div>
            </div>

        </div>
    }
    else if (Type == SecondAuthenticationType.Phone)
    {
        <div class=" p-3">
            <h1 class=" login-h1-text mb-3 text-center">验证手机号码</h1>
            <span class="mb-4">我们已经向你的手机号码发送了一封验证短信，请在下方填写其中的验证码</span>
            <div class="form-group mt-4  mb-0">

                <div class="row">
                    <div class="form-group col-12">
                        <div id="captcha-box"></div>
                    </div>
                    <div class="form-group col">
                        <BootstrapInput @bind-Value="Model.NumToken" ShowLabel="true" />
                    </div>
                    <div class="form-group col-auto" style=" display: flex; align-items: flex-end;">
                        <PostVerificationCodeTip SendType="SendType.Phone"></PostVerificationCodeTip>
                    </div>
                    <div class="form-group col-12">
                        <Button Color="Color.Dark" IsAsync="true" style="width:100%" OnClick="HandleConfirm">验证</Button>
                    </div>

                </div>
            </div>

        </div>
    }

</CnGalWebSite.Shared.MasaComponent.Shared.Tips.LoginPagesRoot>



@code {

    [Parameter]
    public string ReturnUrl { get; set; }

    public SecondAuthenticationType Type { get; set; }

    public bool IsReady { get; set; }

    private SecondAuthenticationModel Model = new SecondAuthenticationModel();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }


    protected override async Task OnInitializedAsync()
    {
        /* if (ToolHelper.UserAuthenticationTypeModel.IsOnPhone == false && ToolHelper.UserAuthenticationTypeModel.IsOnEmail == true)
         {
             await OnClickEmail();
         }
         else if (ToolHelper.UserAuthenticationTypeModel.IsOnPhone == true && ToolHelper.UserAuthenticationTypeModel.IsOnEmail == false)
         {
             await OnClickPhone();
         }

         if(ToolHelper.UserAuthenticationTypeModel.IsOnPhone == false && ToolHelper.UserAuthenticationTypeModel.IsOnEmail == false)
         {
             await SwalService.ShowModal(new SwalOption()
             {
                 Category = SwalCategory.Error,
                 Title = "尝试验证身份失败",
                 Content = "你的账户没有绑定任何一种验证方式，请尝试联系管理员"
             });
             NavigationManager.NavigateTo(Provider,"/");
         }*/
    }

    private async Task OnClickPhone()
    {
        if (await OnSecondAuthentication())
        {
            Type = SecondAuthenticationType.Phone;
            StateHasChanged();

        }
    }
    private async Task OnClickEmail()
    {
        if (await OnSecondAuthentication())
        {
            Type = SecondAuthenticationType.Email;
            StateHasChanged();

        }
    }
    private async Task<bool> OnSecondAuthentication()
    {
        try
        {
            var result = await _httpService.GetAsync<Result>("api/account/SecondAuthentication");
            if (result.Successful == true)
            {
                return true;
            }
            else
            {

                await ToastService.Error("无法获取验证码", result.Error);
                return false;

            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取验证码失败");
            return false;
        }
    }

    private async Task HandleConfirm()
    {

        try
        {

            var obj = await _httpService.PostAsync<SecondAuthenticationModel, Result>("api/account/SecondAuthentication", Model);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("验证码错误", obj.Error);
                return;
            }
            else
            {
                _dataCacheService.LoginKey = obj.Error;
                NavigationManager.NavigateTo(string.IsNullOrWhiteSpace(ReturnUrl) ? "/" : ToolHelper.Base64DecodeUrl(ReturnUrl));

            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "尝试验证身份失败");
        }
    }

}
