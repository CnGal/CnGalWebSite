@page "/account/changeemail/{*ReturnUrl}"
@attribute [Authorize]

@inject IHttpService _httpService

@inject ILocalStorageService _localStorage
@inject ToastService? ToastService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject IDataCacheService _dataCacheService
@inject IServiceProvider Provider


<TitleTip NoIndex Title="修改绑定邮箱"></TitleTip>
<CnGalWebSite.Shared.MasaComponent.Shared.Tips.LoginPagesRoot>
    @if (isReady == false)
    {
        <SecondAuthenticationCheckTip ReturnUrl="@ReturnUrl" OnPassed="OnPassed"></SecondAuthenticationCheckTip>
    }
    else
    {
        if (state == "输入新邮箱")
        {
            <div class="p-3">
                <h1 class=" login-h1-text mb-4 text-center">请输入新邮箱</h1>
                <div class="form-group  mb-0">

                    <div class="row">
                        <div class="form-group col-12  col-sm-12">
                            <BootstrapInput @bind-Value="ModelBefore.NewEmail" type="email" ShowLabel="true" />
                        </div>
                        <div class="form-group col-12">
                            <Button Color="Color.Dark" IsAsync="true" style="width:100%" OnClick="ConfirmEmailBefore">确定</Button>
                        </div>

                    </div>
                </div>
            </div>
        }
        else if (state == "验证新邮箱")
        {
            <div class="p-3">
                <h1 class=" login-h1-text mb-4 text-center">验证电子邮箱</h1>
                <span class="mb-4">我们已经向<strong>@(ModelBefore.NewEmail)</strong>发送了一封验证邮件，请在下方填写其中的验证码。如果没有在收件箱找到邮件，请检查垃圾箱。</span>
                <div class="form-group mt-4  mb-0">

                    <div class="row">
                        <div class="form-group col-12">
                            <div id="captcha-box"></div>
                        </div>
                        <div class="form-group col">
                            <BootstrapInput @bind-Value="ModelAfter.NumToken" ShowLabel="true" />
                        </div>

                        <div class="form-group col-auto" style=" display: flex; align-items: flex-end;">
                            <PostVerificationCodeTip Email="@ModelBefore.NewEmail"></PostVerificationCodeTip>
                        </div>
                        <div class="form-group col-12">
                            <Button Color="Color.Dark" IsAsync="true" style="width:100%" OnClick="ConfirmEmailAfter">验证</Button>
                        </div>

                    </div>
                </div>
            </div>
        }
    }


</CnGalWebSite.Shared.MasaComponent.Shared.Tips.LoginPagesRoot>




    @code {

        [Parameter]
        public string ReturnUrl { get; set; }

        private ChangeEmailBeforeModel ModelBefore = new ChangeEmailBeforeModel();
        private ChangeEmailAfterModel ModelAfter = new ChangeEmailAfterModel();
        string state = "输入新邮箱";
        bool isReady = false;

        [CascadingParameter]
        public ErrorHandler ErrorHandler { get; set; }


        private void OnPassed()
        {
            isReady = true;
            StateHasChanged();
            
        }

        private async Task ConfirmEmailBefore()
        {
            if (string.IsNullOrWhiteSpace(ModelBefore.NewEmail))
            {
                await ToastService.Error("请输入邮箱", "请输入邮箱");
                return;
            }
            try
            {
                ModelBefore.LoginKey = _dataCacheService.LoginKey;
                var obj = await _httpService.PostAsync<ChangeEmailBeforeModel, Result>("api/account/ChangeEmailBefore", ModelBefore);
                //判断结果
                if (obj.Successful == false)
                {
                    await ToastService.Error("向新邮箱发送验证码失败", obj.Error);
                }
                else
                {
                    state = "验证新邮箱";
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                ErrorHandler.ProcessError(ex, "向新邮箱发送验证码失败", "邮箱无效");
            }
        }
        private async Task ConfirmEmailAfter()
        {
            try
            {
                ModelAfter.LoginKey = _dataCacheService.LoginKey;
                ModelAfter.NewEmail = ModelBefore.NewEmail;

                var obj = await _httpService.PostAsync<ChangeEmailAfterModel, Result>("api/account/ChangeEmailAfter", ModelAfter);
                //判断结果
                if (obj.Successful == false)
                {
                    await ToastService.Error("验证新邮箱失败", obj.Error);
                }
                else
                {
                    await ToastService.Success("修改邮箱成功", "修改邮箱成功");
                    NavigationManager.NavigateTo(string.IsNullOrWhiteSpace(ReturnUrl) ? "/" : ToolHelper.Base64DecodeUrl(ReturnUrl));
                }
            }
            catch (Exception ex)
            {
                ErrorHandler.ProcessError(ex, "验证新邮箱失败");
            }
        }
    }
