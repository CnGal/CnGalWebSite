@page "/account/changephonenumber/{*ReturnUrl}"
@attribute [Authorize]

@inject HttpClient Http

@inject ILocalStorageService _localStorage
@inject ToastService? ToastService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject IDataCacheService _dataCacheService


<TitleTip NoIndex Title="修改绑定手机"></TitleTip>
<CnGalWebSite.Shared.MasaComponent.Shared.Tips.LoginPagesRoot>

    @if (isReady == false)
    {
        <SecondAuthenticationCheckTip ReturnUrl="@ReturnUrl" OnPassed="OnPassed"></SecondAuthenticationCheckTip>
    }
    else
    {

        if (state == "输入新手机号码")
        {
            <div class="p-3">

                <h1 class=" login-h1-text mb-4 text-center">请输入新手机号码</h1>
                <div class="form-group  mb-0">

                    <div class="row">
                        <div class="form-group col-12  col-sm-12">
                            <BootstrapInput @bind-Value="ModelBefore.NewPhone" ShowLabel="true" />
                        </div>
                        <div class="form-group col-12">
                            <Button Color="Color.Dark" IsAsync="true" style="width:100%" OnClick="ConfirmEmailBefore">确定</Button>
                        </div>

                    </div>
                </div>
            </div>
        }
        else if (state == "验证新手机号码")
        {
            <div class="p-3">
                <h1 class=" login-h1-text mb-3 text-center">验证手机号码</h1>
                <span class="mb-4">我们已经向<strong>@(ModelBefore.NewPhone)</strong>发送了一封验证短信，请在下方填写其中的验证码</span>
                <div class="form-group mt-4  mb-0">

                    <div class="row">
                        <div class="form-group col-12">
                            <div id="captcha-box"></div>
                        </div>
                        <div class="form-group col">
                            <BootstrapInput @bind-Value="ModelAfter.NumToken" ShowLabel="true" />
                        </div>

                        <div class="form-group col-auto" style=" display: flex; align-items: flex-end;">
                            <PostVerificationCodeTip Email="@ModelBefore.NewPhone" SmsType="DataModel.Models.SMSType.ChangeMobilePhoneNumber"></PostVerificationCodeTip>
                        </div>
                        <div class="form-group col-12">
                            <Button Color="Color.Dark" IsAsync="true" style="width:100%" OnClick="ConfirmEmailAfter">验证</Button>
                        </div>

                    </div>
                </div>
            </div>

        }
    }

</CnGalWebSite.Shared.MasaComponent.Shared.Tips.LoginPagesRoot>




@code {
    [Parameter]
    public string ReturnUrl { get; set; }

    private ChangePhoneNumberBeforeModel ModelBefore = new ChangePhoneNumberBeforeModel();
    private ChangePhoneNumberAfterModel ModelAfter = new ChangePhoneNumberAfterModel();
    public string Email { get; set; }
    string state = "输入新手机号码";
    bool isReady = false;

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    private void OnPassed()
    {
        isReady = true;
        StateHasChanged();
        
    }

    private async Task ConfirmEmailBefore()
    {
        if (string.IsNullOrWhiteSpace(ModelBefore.NewPhone))
        {
            await ToastService.Error("请输入手机号码", "请输入手机号码");
            return;
        }
        try
        {

            ModelBefore.LoginKey = _dataCacheService.LoginKey;

            var result = await Http.PostAsJsonAsync<ChangePhoneNumberBeforeModel>(ToolHelper.WebApiPath + "api/account/ChangePhoneNumberBefore", ModelBefore);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("修改手机号码失败", obj.Error);
            }
            else
            {
                state = "验证新手机号码";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "向新手机发送验证码失败", "手机号无效");
        }
    }
    private async Task ConfirmEmailAfter()
    {
        try
        {
            ModelAfter.NewPhone = ModelBefore.NewPhone;
            ModelAfter.LoginKey = ModelBefore.LoginKey;

            var result = await Http.PostAsJsonAsync<ChangePhoneNumberAfterModel>(ToolHelper.WebApiPath + "api/account/ChangePhoneNumberAfter", ModelAfter);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("验证新手机号码失败", obj.Error);
            }
            else
            {
                await ToastService.Success("修改手机号码成功", "修改手机号码成功");
                NavigationManager.NavigateTo(string.IsNullOrWhiteSpace(ReturnUrl) ? "/" : ToolHelper.Base64DecodeUrl(ReturnUrl));
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "验证新手机号码失败");
        }
    }
}
