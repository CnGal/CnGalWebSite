@page "/account/login/{*ReturnUrl}"
@page "/account/login/"

@inject IAuthService AuthService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject ToastService ToastService
@inject IJSRuntime JS
@inject IHttpService _httpService
@inject IDataCacheService _dataCacheService


<TitleTip NoIndex Title="登入"></TitleTip>

<CnGalWebSite.Shared.MasaComponent.Shared.Tips.LoginPagesRoot>
    @if (isReady)
    {
        @if (isOnRedirecting)
        {
            <AccountWaitingTip Title="正在重定向" Subtitle="我们正在重定向到第三方登入页面，若长时间无响应，请尝试刷新页面"></AccountWaitingTip>
        }
        else
        {
            <div class=" p-3">
                <h1 class="mb-4 text-center login-h1-text">欢迎来到CnGal资料站</h1>

                <div>
                    <div>
                        <MTextField Label="用户名或邮箱" 
                                    @bind-Value="Model.UserName"></MTextField>

                    </div>
                    <div>
                        <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaPasswordInput Label="密码"
                                                                                               @bind-Value="Model.Password" />

                    </div>

                    <div class="mb-8" style="display: flex; justify-content: space-between; align-items: flex-end;">

                        <MCheckbox @bind-Value="Model.RememberMe"
                                   Label="记住我" Class="m-0"
                                   HideDetails="true"
                                   ></MCheckbox>
                        <a href="/account/forgetpassword">忘记密码？</a>

                    </div>
                    <div>
                        <div id="captcha-box"></div>
                    </div>

                    <div class="mb-4">
                        <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaButton Text="登入" IsAsync="true" OnClick="OnClickLogin" Class="w-100" Rounded Depressed />
                    </div>

                    <span class="mb-4 d-flex" style="justify-content: center; ">
                        还没有账号？ <a style="float:right" href="/account/register">立即注册</a>
                    </span>
                    @if (_dataCacheService.IsOnThirdPartyLogin && ToolHelper.IsMaui == false)
                    {
                        <ThirdPartyLoginButtonListView ReturnUrl="@ReturnUrl" OnRedirecting="OnRedirecting"></ThirdPartyLoginButtonListView>
                    }
                </div>
            </div>
        }
    }

</CnGalWebSite.Shared.MasaComponent.Shared.Tips.LoginPagesRoot>
<CnGalWebSite.Shared.MasaComponent.Shared.Components.HumanMachineVerification @ref="humanMachineVerification" OnVerficated="OnVerficated" WaitChecked/>
<CnGalWebSite.Shared.MasaComponent.Shared.Components.DeviceIdentification @ref="deviceIdentification" />

@code {
    [Parameter]
    public string ReturnUrl { get; set; }
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    bool isOnRedirecting = false;
    bool isReady = false;
    private int widgetId = -1;
    private LoginModel Model = new LoginModel();
  

    bool isSuccess = true;

    string Challenge = "";
    string Validate = "";
    string Seccode = "";
    bool IsInitGeetest = false;

    CnGalWebSite.Shared.MasaComponent.Shared.Components.HumanMachineVerification humanMachineVerification;
    CnGalWebSite.Shared.MasaComponent.Shared.Components.DeviceIdentification deviceIdentification;

    public async Task OnClickLogin()
    {
        if (string.IsNullOrWhiteSpace(Model.Password))
        {
            await ToastService.Error("请输入密码", "请输入密码");
            return;
        }
        if (string.IsNullOrWhiteSpace(Model.UserName))
        {
            await ToastService.Error("请输入用户名", "请输入户名");
            return;
        }

        await humanMachineVerification.StartVerification();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {

            //判断是否已经登入
            if (await AuthService.IsLogin())
            {
                NavigationManager.NavigateTo(string.IsNullOrWhiteSpace(ReturnUrl) ? "/" : ToolHelper.Base64DecodeUrl(ReturnUrl));
                return;
            }
            //服务端登入跳转到客户端
            try
            {
                if (ToolHelper.IsSSR == true)//&& IsSmallScreen == false)
                {

                    /* NavigationManager.NavigateTo(Provider,"https://app.cngal.org/account/loginfromssr?ReturnUrl=" + ReturnUrl);
                     return;*/

                    //NavigationManager.NavigateTo(Provider,"/account/loginfromssr/" + ReturnUrl);

                }
                else
                {
                    isReady = true;
                    StateHasChanged();
                }

            }
            catch (Exception ex)
            {
                ErrorHandler.ProcessError(ex, "尝试跳转客户端模式失败");
            }
            isReady = true;
            StateHasChanged();
        }
    }



    public async Task OnVerficated(HumanMachineVerificationResult model)
    {
        try
        {
            Model.isNeedVerification = true;

            Model.Verification = model;
            if(deviceIdentification!=null)
            {
                Model.Identification =await deviceIdentification.GetDeviceIdentificationModel();
            }

            var result = await AuthService.Login(Model);

            switch (result.Code)
            {
                case LoginResultCode.OK:
                    NavigationManager.NavigateTo(string.IsNullOrWhiteSpace(ReturnUrl) ? "/" : ToolHelper.Base64DecodeUrl(ReturnUrl));
                    break;
                case LoginResultCode.HistoricalUser:
                    _dataCacheService.UserName = result.ErrorInfor;
                    NavigationManager.NavigateTo("/account/historyuserlogin/" + ToolHelper.Base64EncodeUrl(NavigationManager.Uri));
                    break;
                case LoginResultCode.FailedRealNameValidation:
                    await AuthService.Login(result.Token);
                    NavigationManager.NavigateTo("/account/ChooseVerificationMethod/" + ToolHelper.Base64EncodeUrl(NavigationManager.Uri));
                    break;
                case LoginResultCode.FailedEmailValidation:
                    _dataCacheService.UserName = result.ErrorInfor;
                    NavigationManager.NavigateTo("/account/ConfirmEmailRegister/" + ToolHelper.Base64EncodeUrl(NavigationManager.Uri));
                    break;
                default:
                    await ToastService.Error("登入失败", result.ErrorDescribe);
                    isSuccess = false;
                    break;
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "登入失败");
            isSuccess = false;
        }
    }

    private void OnRegister()
    {
        NavigationManager.NavigateTo("/account/register/" + ReturnUrl);
    }

    private void OnRedirecting()
    {
        isOnRedirecting = true;
        StateHasChanged();
        
    }

}


