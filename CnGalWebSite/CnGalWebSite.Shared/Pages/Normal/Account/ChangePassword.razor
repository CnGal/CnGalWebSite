@page "/account/changepassword/{*ReturnUrl}"
@attribute [Authorize]

@inject HttpClient Http

@inject ILocalStorageService _localStorage
@inject ToastService? ToastService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject IAuthService AuthService

@inject IJSRuntime JS
@inject IDataCacheService _dataCacheService

<TitleTip NoIndex Title="修改密码"></TitleTip>
<CnGalWebSite.Shared.MasaComponent.Shared.Tips.LoginPagesRoot>

    @if (isReady == false)
    {
        <SecondAuthenticationCheckTip ReturnUrl="@ReturnUrl" OnPassed="OnPassed"></SecondAuthenticationCheckTip>
    }
    else
    {

        <div class="p-3 ">

            <h1 class=" login-h1-text mb-4 text-center">请输入新密码</h1>
            <div class="form-group  mb-0">

                <div class="row">
                    <div class="form-group col-12  col-sm-12">
                        <BootstrapInput @bind-Value="Model.Password" type="password" ShowLabel="true" />
                    </div>
                    <div class="form-group col-12  col-sm-12">
                        <BootstrapInput @bind-Value="Model.ConfirmPassword" type="password" ShowLabel="true" />
                    </div>
                    <div class="form-group col-12">
                        <Button Color="Color.Dark" IsAsync="true" style="width:100%" OnClick="ConfirmPassword">确定</Button>
                    </div>

                </div>
            </div>
        </div>

    }

</CnGalWebSite.Shared.MasaComponent.Shared.Tips.LoginPagesRoot>

@code {
    [Parameter]
    public string ReturnUrl { get; set; }

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }


    private ChangeUserPasswordModel Model = new ChangeUserPasswordModel();

    bool isReady = false;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    private void OnPassed()
    {
        isReady = true;
        StateHasChanged();
        
    }

    private async Task ConfirmPassword()
    {
        try
        {
            var authState = await authenticationStateTask;
            var user = authState.User;

            Model.UserName = user.Identity.Name;
            Model.LoginKey = _dataCacheService.LoginKey;

            var result = await Http.PostAsJsonAsync<ChangeUserPasswordModel>(ToolHelper.WebApiPath + "api/account/ChangePassword", Model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("修改密码失败", obj.Error);
            }
            else
            {
                await ToastService.Success("修改密码成功", "修改密码成功，请重新登入");
                await AuthService.Logout();

                NavigationManager.NavigateTo("/account/login/" + ReturnUrl);
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "修改密码失败");
        }
    }

}
