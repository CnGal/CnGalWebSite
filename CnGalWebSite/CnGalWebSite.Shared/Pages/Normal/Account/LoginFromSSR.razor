@page "/account/loginfromssr"

@inject IAuthService AuthService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject ToastService ToastService
@inject IJSRuntime JS
@inject IHttpService _httpService
@inject IDataCacheService _dataCacheService

@inject IIPLocatorProvider? IPLocator
@inject WebClientService? ClientService

<TitleTip NoIndex></TitleTip>
@*<CnGalWebSite.Shared.MasaComponent.Shared.Tips.LoginPagesRoot>
    <style>
        .swal2-icon.swal2-info {
            border-color: #009ef7;
            color: #009ef7;
        }

        .bg-opacity {
            background-color: rgba(255,255,255,.8);
        }
    </style>
    <div class="p-3">
        <div>

            <h1 class=" login-h1-text text-center">你已进入APP模式</h1>

            <div class="text-center">
                APP模式将会带来更加稳定的编辑体验，你可以将 app.cngal.org 加入收藏夹，便于再次进入~
            </div>
            <div class="mt-3 text-center">
                <Button Icon="fa fa-star" Text="添加收藏夹" @onclick="OnClickRight" Color="Color.Dark" IsOutline="true" class="ms-2" Size="Size.Small"></Button>
                <Button Icon="fa fa-check" Text="我知道了" @onclick="OnClickLeft" Color="Color.Dark" Size="Size.Small" class="ms-3"></Button>
            </div>
        </div>
    </div>

</CnGalWebSite.Shared.MasaComponent.Shared.Tips.LoginPagesRoot>*@



@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string ReturnUrl { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Code { get; set; }


    public string Url { get; set; }
    [Inject]
    [NotNull]
    private DialogService? DialogService { get; set; }
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }
    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            if(string.IsNullOrWhiteSpace(Code)==false)
            {
                try
                {
                    var obj = await _httpService.PostAsync<OneTimeCodeModel, LoginResult>("api/account/LoginByOneTimeCode", new OneTimeCodeModel { Code = Code });
                    //判断结果
                    if (obj.Code == LoginResultCode.OK)
                    {
                        if (await AuthService.Login(obj.Token) == false)
                        {
                            ErrorHandler.ProcessError(new Exception(), "获取令牌成功，但是尝试登入失败");
                        }
                        else
                        {

                        }
                    }
                }
                catch (Exception exc)
                {

                }

            }

            OnClickLeft();
        }
    }

    private void OnClickLeft()
    {
        //处理回调
        if (string.IsNullOrWhiteSpace(ReturnUrl) == false)
        {
            ReturnUrl = ToolHelper.Base64EncodeUrl(ToolHelper.Base64DecodeUrl(ReturnUrl).Replace("www.cngal.org", "app.cngal.org").Replace("m.cngal.org", "app.cngal.org"));
        }
        //Url = "/account/login/" + ReturnUrl;
        NavigationManager.NavigateTo(string.IsNullOrWhiteSpace(ReturnUrl) ? "/" : ToolHelper.Base64DecodeUrl(ReturnUrl));
        
    }
    private async Task OnClickRight()
    {
        try
        {
            await JS.InvokeAsync<string>("addfavorite");

        }
        catch
        {

        }
    }

}
