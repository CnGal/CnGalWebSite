@inject IDataCacheService _dataCacheService
@inject IApplicationStateService _applicationStateService
@inject NavigationManager NavigationManager
@inject IHttpService _httpService
@inject IJSRuntime JS
@inject I18n I18n
@inject ILocalStorageService _localStorage
@inject IEventService _eventService
@inject IServiceProvider _serviceProvider
@inject IMauiService _mauiService

@using BlazorComponent.I18n
@using CnGalWebSite.Shared.Layout;

<MApp>
    <CascadingValue Value="connectionInfo" IsFixed="true">
        <CascadingAuthenticationState>
            <CnGalWebSite.Shared.MasaComponent.Shared.Tips.CnGalRootTip>
                <Router AppAssembly="@typeof(App).Assembly" PreferExactMatches="@true">
                    <Found Context="routeData">
                        @if (ToolHelper.IsSSR)
                        {
                            <RouteView RouteData="@routeData" DefaultLayout="LayoutType" />
                        }
                        else
                        {
                            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="LayoutType">
                                <NotAuthorized>
                                    <NotAuthorizedTipView NoPermissions="@(context.User.Identity?.IsAuthenticated == true)" />
                                </NotAuthorized>
                                <Authorizing>

                                </Authorizing>
                            </AuthorizeRouteView>
                        }
                        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
                    </Found>
                    <NotFound>
                        <LayoutView Layout="LayoutType">
                            <CnGalWebSite.Shared.MasaComponent.Shared.Cards.Errors.NotFoundError />
                        </LayoutView>
                    </NotFound>
                </Router>
            </CnGalWebSite.Shared.MasaComponent.Shared.Tips.CnGalRootTip>
        </CascadingAuthenticationState>
    </CascadingValue>
</MApp>


@code {
    [Parameter]
    public ConnectionInfo? connectionInfo { get; set; }
    [Parameter]
    public bool Mobile { get; set; }


    private System.Threading.Timer mytimer;
    public Type LayoutType
    {
        get
        {
            return NavigationManager.Uri.Contains("/admin") ? typeof(AdminLayout) : (_dataCacheService.IsApp ? typeof(AppLayout) : typeof(PCLayout));
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        I18n.SetCulture(System.Globalization.CultureInfo.GetCultureInfo("zh-CN"));//将语言切换成zh-CN

        //判断移动端
        if (Mobile)
        {
            _dataCacheService.IsApp = true;
        }

        if (ToolHelper.IsMaui)
        {
            _dataCacheService.IsApp = ToolHelper.IsApp;
        }

        //判断来源
        if (NavigationManager.Uri.Contains("ref=gov"))
        {
            _dataCacheService.IsMiniMode = true;
        }

    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        //已经结束预渲染
        _applicationStateService.InPreRendered = false;

        if (firstRender && (OperatingSystem.IsBrowser() || ToolHelper.IsMaui))
        {
            try
            {
                await JS.InvokeVoidAsync("$.loading");
            }
            catch
            {

            }
        }

        if (firstRender)
        {
            var needRefresh = false;
            //检查是否为移动设备
            if (NavigationManager.Uri.Contains("app.cngal.org") || NavigationManager.Uri.Contains("localhost") && ToolHelper.IsMaui == false)
            {
                var isApp = await IsMobile();
                if (isApp != _dataCacheService.IsApp)
                {
                    _dataCacheService.IsApp = isApp;
                    // needRefresh = true;

                }
            }
            //检查迷你模式
            try
            {
                if (await _localStorage.GetItemAsync<bool>("IsMiniMode"))
                {
                    if (_dataCacheService.IsMiniMode == false)
                    {
                        _dataCacheService.IsMiniMode = true;
                        needRefresh = true;
                    }
                }
                else
                {
                    if (_dataCacheService.IsMiniMode)
                    {
                        await _localStorage.SetItemAsync<bool>("IsMiniMode", true);
                    }
                }

            }
            catch
            {

            }

            if (needRefresh)
            {
                _eventService.OnToggleMiniMode();
                //await _dataCacheService.OnRefreshRequsted(null);
            }
        }



    }

    public async Task<bool> IsMobile()
    {
        try
        {
            var re = await JS.InvokeAsync<string>("isMobile");
            if (re == "true")
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        catch
        {
            return false;
        }

    }
}

