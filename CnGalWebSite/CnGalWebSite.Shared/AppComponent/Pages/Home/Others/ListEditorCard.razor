@inject IHttpService _httpService
@inject ToastService ToastService


<div class="" style="display: flex; flex-direction: column;">
    <CnGalWebSite.Shared.AppComponent.Normal.Titles.TitleLine Title="最新编辑" ShowButton="true" UrlName="刷新" OnClick="GetNewRandomList" Icon="fa fa-refresh" />


    <div class="row h-100 m-0 mt-1">
        @for (int i = 0; i < Model.Count && i < 6; i++)
        {
            var item = Model[i];
            <div class="mb-3 ps-1 pe-1 col-12">
                <div class="bg-opacity p-2 rounded shadow-sm">
                    @{
                        string name = item.RelatedName + " 编辑记录";
                        string context = string.IsNullOrWhiteSpace(item.RelatedName) ? ("Id：" + item.RelatedId) : item.RelatedName;
                        string url = "/" + item.Type switch
                        {
                            ExaminedNormalListModelType.Entry => "entries",
                            ExaminedNormalListModelType.Article => "articles",
                            ExaminedNormalListModelType.Tag => "tags",
                            ExaminedNormalListModelType.Disambig => "disambigs",
                            ExaminedNormalListModelType.Periphery => "peripheries",
                            ExaminedNormalListModelType.Video => "videos",
                        } + "/index/" + item.RelatedId;
                    }

                    <a href="@url" class="a-font-color">
                        <div>
                            <UserRankTextViewTip UserId="@item.UserId" UserName="@item.UserName" Image="@item.UserImage" Ranks="@item.Ranks" Time="@item.ApplyTime"
                                                 Text="@("对 "+context+" "+item.Operation.GetDisplayName())" ForceBadgeShowText></UserRankTextViewTip>
                        </div>
                    </a>

                </div>

            </div>
        }
    </div>
</div>

@code {
    int ItemNum = 4;

    public List<ExaminedNormalListModel> Model { get; set; } = new List<ExaminedNormalListModel>();

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Model = await _httpService.GetAsync<List<ExaminedNormalListModel>>("api/perfections/GetRecentlyEditList");

        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取近期编辑列表失败");
        }
    }


    public async Task GetNewRandomList()
    {
        await OnInitializedAsync();
    }



}
