@inject IHttpService _httpService
@inject ToastService? ToastService
@inject SwalService SwalService
@inject NavigationManager NavigationManager

<Textarea style="width: 100%;background-color: #F1F1F1; border-radius: 15px; padding-top: 8px;height: -7px;border:0;"
          class="me-2" @bind-Value="Text" rows="1" placeholder="@Describe">
</Textarea>
<div style=" display: flex;  flex-direction: column; justify-content: center;" class="me-2 font-color" @onclick="OnComment">
    <i class="fa fa-comments fa-fw " style=" font-size: 20px;"></i>
</div>


@code {
    [Parameter]
    public CommentType Type { get; set; }

    [Parameter]
    public string ObjectId { get; set; }
    [Parameter]
    public string Text { get; set; }
    [Parameter]
    public string Describe { get; set; }

    [Parameter]
    public EventCallback RelyCallBack { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }


    protected override async Task OnInitializedAsync()
    {

    }

    public async Task OnComment()
    {
        var user = await authenticationStateTask;

        if (user.User.Identity.IsAuthenticated == false)
        {
            NavigationManager.NavigateTo("/account/apps/login/" + ToolHelper.Base64EncodeUrl(NavigationManager.Uri));
            return;
        }
        //上传
        try
        {
            if (string.IsNullOrWhiteSpace(Text))
            {
                await ToastService.Error("发表评论失败", "你还什么都没说呢，我们不能发表空的评论哦");
                return;
            }
            var obj = await _httpService.PostAsync<PublishCommentModel, Result>("api/comments/PublishComment", new PublishCommentModel { ObjectId = ObjectId, Text = Text, Type = Type });
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("发表评论失败", obj.Error);
            }
            else
            {


                if (user.User.IsInRole("Admin"))
                {
                    await ToastService.Success("发表评论成功", "发表评论成功");
                }
                else
                {
                    await SwalService.Show(new SwalOption()
                    {
                        Category = SwalCategory.Success,
                        Title = "评论成功",
                        Content = "评论将会在审核后发布"
                    });
                }

                await RelyCallBack.InvokeAsync();
            }
        }
        catch(Exception ex)
        {
            ErrorHandler.ProcessError(ex, "发表评论失败");
        }
    }
}
