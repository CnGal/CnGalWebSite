@inject IAuthService AuthService
@inject HttpClient Http
@inject ToastService? ToastService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager

<CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaTitleContainer Icon="fa fa-fw fa-users" Title="@Title" Class="mb-4">
    <Table TItem="ListRankUserAloneModel" IsPagination="true" PageItemsSource="@PageItems" OnQueryAsync="@OnQueryBasicAsync" SearchModel="@SearchModelUser" ShowSearch="true" @ref="TableRows"
           ShowExtendButtons="true" ExtendButtonColumnWidth="170" SelectedRows="@SelectedRows" IsMultipleSelect="true" IsStriped=true
            ShowToolbar="true" ShowDefaultButtons="false" FixedExtendButtonsColumn="true">
        <TableToolbarTemplate>
            <TableToolbarButton TItem="ListRankUserAloneModel" Color="Color.Warning" Icon="fa fa-plus" Text="添加" OnClickCallback="@((IEnumerable<ListRankUserAloneModel> items)=> { return OnAddRankUser(); })" IsAsync="true" />
            <TableToolbarButton TItem="ListRankUserAloneModel" Color="Color.Success" Icon="fa fa-map-signs" Text="显示" OnClickCallback="OnUnHiddenClick" IsAsync="true" />
            <TableToolbarButton TItem="ListRankUserAloneModel" Color="Color.Primary" Icon="fa fa-unlink" Text="隐藏" OnClickCallback="OnHiddenClick" IsAsync="true" />
            <TableToolbarButton TItem="ListRankUserAloneModel" Color="Color.Danger" Icon="fa fa-close" Text="删除" OnClickCallback="OnDeleteClick" IsAsync="true" />
        </TableToolbarTemplate>
        <TableColumns>
            <TableColumn @bind-Field="@context.UserId" Sortable="true" Fixed="true" Width="300" />
            <TableColumn @bind-Field="@context.UserName" Searchable="true" Sortable="true" Width="200" TextWrap="true" />
            <TableColumn @bind-Field="@context.Time" Sortable="true" Searchable="true" Width="150" FormatString="yyyy-MM-dd HH:mm" DefaultSort="true" DefaultSortOrder="@SortOrder.Desc" />
            <TableColumn @bind-Field="@context.IsHidden" Sortable="true" ComponentType="@typeof(Switch)" Width="110" />
        </TableColumns>
        <RowButtonTemplate>
            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-database" Text="查看" IsAsync="true" OnClickWithoutRender="@(async () => LookLink( context.UserId , context.UserName))" />

            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Success" IsShow="context.IsHidden"
                             Icon="fa fa-map-signs" Text="显示" IsAsync="true" OnClickWithoutRender="@(() => OnRowEditIsHiddenClick(new long[] { context.Id }, false, true))" />

            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" IsShow="!context.IsHidden"
                             Color="Color.Primary" Icon="fa fa-unlink" Text="隐藏" IsAsync="true" OnClickWithoutRender="@(() => OnRowEditIsHiddenClick(new long[] { context.Id }, true, true))" />

            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Danger" Icon="fa fa-trash" Text="删除" IsAsync="true" OnClickWithoutRender="@(() =>  OnRowDeleteClick(new string[] { context.UserId },true))" />
        </RowButtonTemplate>
    </Table>
</CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaTitleContainer>



@code {
    [Parameter]
    public long Id { get; set; }
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public string Subtitle { get; set; }

    [NotNull]
    private Table<ListRankUserAloneModel>? TableRows { get; set; }
    private List<ListRankUserAloneModel> SelectedRows { get; set; } = new();

    public ListRankUsersInforViewModel InforModel { get; set; } = new ListRankUsersInforViewModel();
    public ListRankUsersViewModel ListModel { get; set; } = new ListRankUsersViewModel { RankUsers = new List<ListRankUserAloneModel>() };

    private ListRankUserAloneModel SearchModelUser { get; set; } = new ListRankUserAloneModel();

    private IEnumerable<int> PageItems => new int[] { 10, 20, 40, 80, 200, 5000 };
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }



    private async Task<QueryData<ListRankUserAloneModel>> OnQueryBasicAsync(QueryPageOptions options)
    {
        try
        {
            var result = await Http.PostAsJsonAsync<RankUsersPagesInfor>(ToolHelper.WebApiPath + "api/ranks/GetRankUserList", new RankUsersPagesInfor { SearchModel = SearchModelUser, Options = (QueryPageOptionsHelper)options, RankId = Id });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            return JsonSerializer.Deserialize<QueryData<ListRankUserAloneModel>>(jsonContent, ToolHelper.options);
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "无法获取头衔相关用户列表");
            return new QueryData<ListRankUserAloneModel>();
        }
    }

    private void LookLink(string userId, string name)
    {

        NavigationManager.NavigateTo(Provider, "/space/index/" + userId, name, "fa fa-star-o");
        
    }


    private async Task OnRowDeleteClick(string[] ids, bool showMessage)
    {
        //调用API
        try
        {
            var result = await Http.PostAsJsonAsync<RemoveUserRankModel>(ToolHelper.WebApiPath + "api/ranks/RemoveUserRank", new RemoveUserRankModel { UserIds = ids, RankIds = new long[] { Id } });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            var obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);

            if (obj.Successful == false)
            {
                await ToastService.Error("移除用户失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success("移除用户成功", "移除用户成功");
                    await TableRows.QueryAsync();
                }
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "移除用户失败");
        }
    }

    private async Task OnDeleteClick(IEnumerable<ListRankUserAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有移除用户", "请选中用户");
            return;
        }

        await OnRowDeleteClick(items.Select(s => s.UserId).ToArray(), false);

        await ToastService.Success("移除用户成功", "移除用户成功");
        await TableRows.QueryAsync();
    }

    private async Task OnRowEditIsHiddenClick(long[] ids, bool isHidden, bool showMessage)
    {
        string tempString = isHidden == true ? "隐藏头衔" : "显示头衔";
        //调用API
        try
        {
            var result = await Http.PostAsJsonAsync<HiddenUserRankModel>(ToolHelper.WebApiPath + "api/ranks/HiddenUserRank", new HiddenUserRankModel { Ids = ids, IsHidden = isHidden });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            var obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);



            if (obj.Successful == false)
            {
                await ToastService.Error(tempString + "失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success(tempString + "成功", tempString + "成功");
                    await TableRows.QueryAsync();
                }
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, tempString + "失败");
        }
    }

    private async Task OnHiddenClick(IEnumerable<ListRankUserAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改头衔状态", "请选中头衔");
            return;
        }

        await OnRowEditIsHiddenClick(items.Select(s => s.Id).ToArray(), true, false);

        await ToastService.Success("显示成功", "开启成功");
        await TableRows.QueryAsync();
    }
    private async Task OnUnHiddenClick(IEnumerable<ListRankUserAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改头衔状态", "请选中头衔");
            return;
        }

        await OnRowEditIsHiddenClick(items.Select(s => s.Id).ToArray(), false, false);

        await ToastService.Success("隐藏成功", "隐藏成功");
        await TableRows.QueryAsync();
    }

    [Inject]
    [NotNull]
    private DialogService? DialogService { get; set; }
    public async Task OnAddRankUser()
    {
        AddUserRankModel model = new AddUserRankModel
        {
            RankId = Id
        };
        var items = Utility.GenerateEditorItems<AddUserRankModel>();
        // var item = items.First(i => i.GetFieldName() == nameof(Foo.Hobby));
        //item.Data = Foo.GenerateHobbys(Localizer);

        var option = new EditDialogOption<AddUserRankModel>()
        {
            Title = "添加头衔用户",
            Model = model,
            Items = items,
            OnEditAsync = async context =>
            {
                return await AddRankUser((AddUserRankModel)context.Model);
            }
        };

        await DialogService.ShowEditDialog(option);
    }

    private async Task<bool> AddRankUser(AddUserRankModel model)
    {
        try
        {
            var result = await Http.PostAsJsonAsync<AddUserRankModel>(ToolHelper.WebApiPath + "api/ranks/AddUserRank", model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            var obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            if (obj.Successful == false)
            {
                await ToastService.Error("添加头衔用户失败", obj.Error);
                return false;
            }
            else
            {
                await ToastService.Success("添加头衔用户成功", "添加头衔用户成功");
                await TableRows.QueryAsync();
                return true;
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "添加头衔用户失败");
            return false;
        }

    }
}
