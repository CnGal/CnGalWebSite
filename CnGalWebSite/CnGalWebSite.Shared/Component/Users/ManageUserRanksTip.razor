@inject IAuthService AuthService
@inject IHttpService _httpService
@inject ToastService? ToastService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
<div class="">
        <div class="mb-4" style="padding-right: 0;padding-left: 0;">
            <div class=" rounded shadow-sm -lg p-4 bg-opacity">
                <h3 class="fw-bold">@Title</h3>
                <h5 class="text-truncate mb-4 fw-bold">@Subtitle</h5>
                <hr />
                <Table TItem="ListUserRankAloneModel" IsPagination="true" PageItemsSource="@PageItems" OnQueryAsync="@OnQueryBasicAsync" SearchModel="@SearchModelUser" ShowSearch="true" @ref="TableRows"
                       ShowExtendButtons="true" ExtendButtonColumnWidth="120" SelectedRows="@SelectedRows" IsMultipleSelect="true" IsStriped=true
                        ShowToolbar="true" ShowDefaultButtons="false" FixedExtendButtonsColumn="true">
                    <TableToolbarTemplate>
                        <TableToolbarButton TItem="ListUserRankAloneModel" Color="Color.Success" Icon="fa fa-map-signs" Text="显示" OnClickCallback="OnUnHiddenClick" IsAsync="true" />
                        <TableToolbarButton TItem="ListUserRankAloneModel" Color="Color.Primary" Icon="fa fa-unlink" Text="隐藏" OnClickCallback="OnHiddenClick" IsAsync="true" />
                        <TableToolbarButton TItem="ListUserRankAloneModel" Color="Color.Danger" Icon="fa fa-close" Text="删除" OnClickCallback="OnDeleteClick" IsAsync="true" />
                    </TableToolbarTemplate>
                    <TableColumns>
                        <TableColumn @bind-Field="@context.RankId" Sortable="true"  Fixed="true" Width="200" />
                        <TableColumn @bind-Field="@context.Name" Sortable="true" Searchable="true" Fixed="true" Width="200" />
                        <TableColumn @bind-Field="@context.Time" Sortable="true" Searchable="true" Width="150" FormatString="yyyy-MM-dd HH:mm" DefaultSort="true" DefaultSortOrder="@SortOrder.Desc"/>
                        <TableColumn @bind-Field="@context.IsHidden" Sortable="true" ComponentType="@typeof(Switch)" Width="110" />
                    </TableColumns>
                    <RowButtonTemplate>
                        @if(context.IsHidden)
                        {
                              <TableCellButton AutoSelectedRowWhenClick="false"  Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-map-signs" Text="显示" IsAsync="true" OnClickWithoutRender="@(() => OnRowEditIsHiddenClick(new long[] { context.Id }, false, true))" />
                        }
                        else
                        {
                              <TableCellButton AutoSelectedRowWhenClick="false"  Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-unlink" Text="隐藏" IsAsync="true" OnClickWithoutRender="@(() => OnRowEditIsHiddenClick(new long[] { context.Id }, true, true))" />
                        }
                        <TableCellButton AutoSelectedRowWhenClick="false"  Size="Size.ExtraSmall" Color="Color.Danger" Icon="fa fa-trash" Text="删除" IsAsync="true" OnClickWithoutRender="@(() =>  OnRowDeleteClick(new long[] { context.RankId },true))" />
                    </RowButtonTemplate>
                </Table>
            </div>
        </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public string Subtitle { get; set; }

    [NotNull]
    private Table<ListUserRankAloneModel>? TableRows { get; set; }
    private List<ListUserRankAloneModel> SelectedRows { get; set; } = new();

    public ListUserRanksInforViewModel InforModel { get; set; } = new ListUserRanksInforViewModel();
    public ListUserRanksViewModel ListModel { get; set; } = new ListUserRanksViewModel { UserRanks = new List<ListUserRankAloneModel>() };

    private ListUserRankAloneModel SearchModelUser { get; set; } = new ListUserRankAloneModel();

    private IEnumerable<int> PageItems => new int[] { 10, 20, 40, 80, 200, 5000 };

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }


    private async Task<QueryData<ListUserRankAloneModel>> OnQueryBasicAsync(QueryPageOptions options)
    {
        try
        {
           return await _httpService.PostAsync<UserRanksPagesInfor, QueryData<ListUserRankAloneModel>>("api/ranks/GetUserRankList", new UserRanksPagesInfor { SearchModel = SearchModelUser, Options = (QueryPageOptionsHelper)options, UserId = Id });
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取用户关联头衔列表");
            return new QueryData<ListUserRankAloneModel>();
        }
    }

    private void LookLink(string userId, string name)
    {

        NavigationManager.NavigateTo(Provider,"/space/index/" + userId, name, "fa fa-star-o");
        
    }


    private async Task OnRowDeleteClick(long[] ids, bool showMessage)
    {
        //调用API
        try
        {
            var obj = await _httpService.PostAsync<RemoveUserRankModel, Result>("api/ranks/RemoveUserRank", new RemoveUserRankModel { RankIds = ids ,UserIds= new string[] { Id} });

            if (obj.Successful == false)
            {
                await ToastService.Error("移除头衔失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success("移除头衔成功", "移除头衔成功");
                    await TableRows.QueryAsync();
                }
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "移除头衔失败");
        }
    }

    private async Task OnDeleteClick(IEnumerable<ListUserRankAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有移除头衔", "请选中头衔");
            return;
        }

        await OnRowDeleteClick(items.Select(s => s.Id).ToArray(), false);

        await ToastService.Success("移除头衔成功", "移除头衔成功");
        await TableRows.QueryAsync();
    }

    private async Task OnRowEditIsHiddenClick(long[] ids, bool isHidden, bool showMessage)
    {
        string tempString = isHidden == true ? "隐藏头衔" : "显示头衔";
        //调用API
        try
        {
            var obj = await _httpService.PostAsync<HiddenUserRankModel, Result>("api/ranks/HiddenUserRank", new HiddenUserRankModel { Ids = ids, IsHidden = isHidden });



            if (obj.Successful == false)
            {
                await ToastService.Error(tempString + "失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success(tempString + "成功", tempString + "成功");
                    await TableRows.QueryAsync();
                }
            }
        }
        catch(Exception ex)
        {
            ErrorHandler.ProcessError(ex, tempString + "失败");
        }
    }

    private async Task OnHiddenClick(IEnumerable<ListUserRankAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改头衔状态", "请选中头衔");
            return;
        }

        await OnRowEditIsHiddenClick(items.Select(s => s.Id).ToArray(), true, false);

        await ToastService.Success("显示成功", "开启成功");
        await TableRows.QueryAsync();
    }
    private async Task OnUnHiddenClick(IEnumerable<ListUserRankAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改头衔状态", "请选中头衔");
            return;
        }

        await OnRowEditIsHiddenClick(items.Select(s => s.Id).ToArray(), false, false);

        await ToastService.Success("隐藏成功", "隐藏成功");
        await TableRows.QueryAsync();
    }

}
