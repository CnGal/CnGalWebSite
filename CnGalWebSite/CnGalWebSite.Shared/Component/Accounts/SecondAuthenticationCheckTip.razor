@inject IAuthService AuthService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager

@inject ToastService? ToastService

@inject IAuthService AuthService
@inject SwalService SwalService
@inject IHttpService _httpService
@inject ILocalStorageService _localStorage
@inject IDataCacheService _dataCacheService


<AccountWaitingTip Title="正在验证身份" Subtitle="你正在修改或访问敏感信息，在此之前我们需要验证你的身份"></AccountWaitingTip>

@code {
    [Parameter]
    public EventCallback OnPassed { get; set; }
    [Parameter]
    public string ReturnUrl { get; set; }
    [Parameter]
    public bool IsOnPhone { get; set; } = true;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            //尝试读取
            var tempKey = await _localStorage.GetItemAsStringAsync("LoginKey");
            if (string.IsNullOrWhiteSpace(tempKey) == false)
            {
                _dataCacheService.LoginKey = tempKey;
            }
            try
            {
                string userId = "";
                var authState = await authenticationStateTask;
                var user = authState.User;
                foreach (var item in user.Claims)
                {
                    if (item.Type == "userid")
                    {
                        userId = item.Value;
                    }
                }

                var obj = await _httpService.PostAsync<CheckSecondAuthenticationModel, Result>("api/account/CheckSecondAuthentication", new CheckSecondAuthenticationModel { UserId = userId, LoginKey = _dataCacheService.LoginKey });
                //判断结果
                if (obj.Successful == false)
                {
                    //验证失败 获取该用户的验证类型
                    var model = await _httpService.GetAsync<UserAuthenticationTypeModel>("api/account/GetUserAuthenticationType");
                    _dataCacheService.UserAuthenticationTypeModel = model;
                    //判断是否开启手机验证
                    if (IsOnPhone == false)
                    {
                        _dataCacheService.UserAuthenticationTypeModel.IsOnPhone = false;
                    }
                    NavigationManager.NavigateTo("/account/SecondAuthentication/" + ToolHelper.Base64EncodeUrl(NavigationManager.Uri));
                    return;
                }
                else
                {

                    await OnPassed.InvokeAsync();
                    return;
                }
            }
            catch
            {
                await SwalService.ShowModal(new SwalOption()
                {
                    
                    Category = SwalCategory.Error,
                    Title = "尝试验证身份失败",
                    Content = "[Code:308] 无法连接到服务器，请确保网络正常后联系开发人员"
                });
                NavigationManager.NavigateTo(string.IsNullOrWhiteSpace(ReturnUrl) ? "/" : ToolHelper.Base64DecodeUrl(ReturnUrl));
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {

    }
}
