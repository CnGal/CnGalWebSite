@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject SwalService SwalService
@inject IHttpService _httpService
@inject ILocalStorageService _localStorage


@code {
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            if (ToolHelper.IsSSR)
            {
                //读取是否提示
                /* var isNotShowTip = await _localStorage.GetItemAsync<bool>("isNotShowWASMTip");
                 if (isNotShowTip == false)
                 {
                     SwalOption op = null;

                     op = new SwalOption()
                     {
                         Category = SwalCategory.Success,
                         Title = "这里是一些编辑指引",
                         Content = "网站目前还很脆弱，不要长时间放置在后台，不然你的编辑可能会被吃掉哦；在编辑之前请查看公告区的对应编辑规范，不然也会被吃掉哦",
                         ShowClose = false
                     };
                     op.ButtonTemplate = new RenderFragment(builder =>
                     {

                         builder.OpenComponent<Button>(0);
                         builder.AddAttribute(2, nameof(Button.Text), "不再提示");
                         builder.AddAttribute(3, nameof(Button.Color), Color.Primary);
                         builder.AddAttribute(4, "class", "me-4");
                         builder.AddAttribute(5, nameof(Button.IsOutline), true);
                         builder.AddAttribute(6, nameof(Button.OnClick), EventCallback.Factory.Create<MouseEventArgs>(this, async () =>
                         {
                             await _localStorage.SetItemAsync("isNotShowWASMTip", true);
                             await op.Close();
                         }));
                         builder.CloseComponent();
                         builder.OpenComponent<Button>(1);
                         builder.AddAttribute(1, nameof(Button.Text), "我知道了");
                         builder.AddAttribute(3, nameof(Button.Color), Color.Success);
                         builder.AddAttribute(4, nameof(Button.IsOutline), false);
                         builder.AddAttribute(5, nameof(Button.OnClick), EventCallback.Factory.Create<MouseEventArgs>(this, async () =>
                         {
                             await op.Close();
                         }));
                         builder.CloseComponent();
                     });
                     await SwalService.Show(op);
                 }*/
                //获取一次性代码
                var code = "";

                try
                {
                    var Model = await _httpService.GetAsync<OneTimeCodeModel>("api/account/GetOneTimeCode");
                    code = Model.Code;

                }
                catch (Exception ex)
                {
                    // ErrorHandler.ProcessError(ex, "尝试跳转APP模式失败");
                }
                //跳转
                NavigationManager.NavigateTo("https://app.cngal.org/account/loginfromssr?Code=" + code + "&ReturnUrl=" + ToolHelper.Base64EncodeUrl(NavigationManager.Uri));
            }

        }
    }
}
