@inject IHttpService _httpService
@inject SwalService SwalService
@inject ILocalStorageService _localStorage
@inject ToastService? ToastService

@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject IDataCacheService _dataCacheService
@inject IServiceProvider Provider

@inject IJSRuntime JS

@if (isReady == false)
{
    <AccountWaitingTip Title="正在验证身份" Subtitle="你正在使用第三方账户登入，我们正在检查以确保一切正常。若长时间未响应，请尝试返回上一个页面"></AccountWaitingTip>
}
else
{
    @if (isLogin == false)
    {
        <UserOnlineCheckTip ReturnUrl="@ReturnUrl" OnPassed="OnLogin" Title="绑定到账户" Subtitle="请登入或创建一个账户，成功后我们将会绑定到你登入的账户上"></UserOnlineCheckTip>
    }
    else
    {
        if (isPassed == false)
        {
            <SecondAuthenticationCheckTip ReturnUrl="@ReturnUrl" OnPassed="OnPassed" IsOnPhone="false"></SecondAuthenticationCheckTip>
        }
        else
        {
            <AccountWaitingTip Title="正在验证身份" Subtitle="你正在使用第三方账户登入，我们正在检查以确保一切正常"></AccountWaitingTip>
        }
    }
}


@code {
    [Parameter]
    public string ReturnUrl { get; set; }
    [Parameter]
    public ThirdPartyLoginType Type { get; set; }
    [Parameter]
    public string Code { get; set; }

    private ChangeUserPasswordModel Model = new ChangeUserPasswordModel();

    bool isPassed = false;

    bool isLogin = false;

    bool isReady = false;

    bool isProgressing = false;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            try
            {
                if (isProgressing == false)
                {
                    isProgressing = true;
                }
                else
                {
                    return;
                }

                //检查是否完成第一步 验证code
                if (_dataCacheService.ThirdPartyLoginTempModel != null)
                {
                    isReady = true;
                    StateHasChanged();
                    return;
                }

                //检查参数是否合法
                if (string.IsNullOrWhiteSpace(Code) && string.IsNullOrWhiteSpace(ReturnUrl))
                {
                    await ShowInformation("第三方登入失败", "[Code:303] 回调链接不正确，请联系管理员", EventCallback.Factory.Create<MouseEventArgs>(this, () =>
                    {
                        NavigationManager.NavigateTo(Provider,"/home", "主页", "fa fa-home");
                    }));

                    return;
                }

                var authState = await authenticationStateTask;
                var user = authState.User;
                //检查三方登入是否通过 检查是否已经绑定到某个用户

                var obj = await _httpService.PostAsync<ThirdPartyLoginModel, ThirdPartyLoginResult>("api/account/ThirdPartyLogin", new ThirdPartyLoginModel { Code = Code, Type = Type, ReturnUrl = ToolHelper.GetThirdPartyCallbackUrl(Type), IsSSR = ToolHelper.IsSSR });
                //判断结果
                switch (obj.Code)
                {
                    case ThirdPartyLoginResultType.Failed:
                        await ShowInformation("尝试验证身份失败", "[Code:304] " + obj.Error + "，请重试后联系管理员", EventCallback.Factory.Create<MouseEventArgs>(this, () =>
                        {
                            NavigationManager.NavigateTo(string.IsNullOrWhiteSpace(ReturnUrl) ? "/" : ToolHelper.Base64DecodeUrl(ReturnUrl));
                        }));

                        return;
                    case ThirdPartyLoginResultType.LoginSuccessed:

                        //判断当前是否已经登入账户 如果已经登入 则代表正在修改 但是成功登返回代表已经被绑定

                        if (user.Identity.IsAuthenticated)
                        {
                            string text = "";
                            if (user.Identity.Name != obj.UserName)
                            {
                                text = "[Code:305] 该账号已经被绑定";
                            }
                            else
                            {
                                text = "[Code:306] 你已绑定该账号，请尝试更换其他账号绑定";
                            }
                            await ShowInformation("绑定第三方账号失败", text, EventCallback.Factory.Create<MouseEventArgs>(this, () =>
                            {
                                NavigationManager.NavigateTo(string.IsNullOrWhiteSpace(ReturnUrl) ? "/" : ToolHelper.Base64DecodeUrl(ReturnUrl));

                            }));
                        }
                        else
                        {
                            if (await AuthService.Login(obj.Token) == false)
                            {
                                await ShowInformation("出现一个错误", "[Code:307] 第三方登入验证成功，但是尝试登入失败", EventCallback.Factory.Create<MouseEventArgs>(this, () =>
                                {
                                    NavigationManager.NavigateTo(string.IsNullOrWhiteSpace(ReturnUrl) ? "/" : ToolHelper.Base64DecodeUrl(ReturnUrl));

                                }));
                            }
                            else
                            {

                                await AuthService.Refresh();
                                NavigationManager.NavigateTo(string.IsNullOrWhiteSpace(ReturnUrl) ? "/" : ToolHelper.Base64DecodeUrl(ReturnUrl));

                            }
                        }
                        return;

                    case ThirdPartyLoginResultType.NoAssociatedAccount:
                        //继续后续步骤
                        _dataCacheService.ThirdPartyLoginTempModel = new ThirdPartyLoginTempModel
                        {
                            ThirdLoginKey = obj.ThirdLoginKey,
                            Type = Type
                        };
                        isReady = true;
                        StateHasChanged();
                        break;
                    case ThirdPartyLoginResultType.RepeatRequest:
                        return;
                }
            }
            catch (Exception exc)
            {
                await ShowInformation("尝试验证身份失败", "[Code:308] <" + exc.Message + "> 无法连接到服务器，请确保网络正常后联系开发人员", EventCallback.Factory.Create<MouseEventArgs>(this, () =>
                {
                    NavigationManager.NavigateTo(string.IsNullOrWhiteSpace(ReturnUrl) ? "/" : ToolHelper.Base64DecodeUrl(ReturnUrl));

                }));

            }
        }
    }

    public async Task ShowInformation(string title, string text, EventCallback<MouseEventArgs> eventCallback)
    {
        var op = new SwalOption()
        {
            Category = SwalCategory.Error,
            Title = title,
            Content = text,
            ShowClose = false
        };
        op.ButtonTemplate = new RenderFragment(builder =>
        {
            builder.OpenComponent<Button>(0);
            builder.AddAttribute(1, nameof(Button.Text), "我知道了");
            builder.AddAttribute(2, nameof(Button.Icon), "fa fa-check");
            builder.AddAttribute(3, nameof(Button.Color), Color.Danger);
            builder.AddAttribute(4, nameof(Button.IsOutline), true);
            builder.AddAttribute(5, nameof(Button.OnClick), EventCallback.Factory.Create<MouseEventArgs>(this, async () =>
            {
                await op.Close();
                await eventCallback.InvokeAsync();
            }));
            builder.CloseComponent();
        });
        await SwalService.Show(op);
    }

    protected override async Task OnInitializedAsync()
    {

    }

    private void OnLogin()
    {
        isLogin = true;
        StateHasChanged();
        
    }

    private async Task OnPassed()
    {
        isPassed = true;
        StateHasChanged();
        await AddThirdPartyLogin();
    }

    private async Task AddThirdPartyLogin()
    {
        try
        {

            var obj = await _httpService.PostAsync<AddThirdPartyLoginInforModel, Result>("api/account/AddThirdPartyLoginInfor", new AddThirdPartyLoginInforModel { ThirdPartyKey = _dataCacheService.ThirdPartyLoginTempModel.ThirdLoginKey, LoginKey = _dataCacheService.LoginKey, Type = _dataCacheService.ThirdPartyLoginTempModel.Type });
            //判断结果
            if (obj.Successful == false)
            {
                await ShowInformation("添加第三方登入失败", "[Code:309] " + obj.Error, EventCallback.Factory.Create<MouseEventArgs>(this, () =>
                {
                    NavigationManager.NavigateTo(string.IsNullOrWhiteSpace(ReturnUrl) ? "/" : ToolHelper.Base64DecodeUrl(ReturnUrl));

                }));

            }
            else
            {
                NavigationManager.NavigateTo(string.IsNullOrWhiteSpace(ReturnUrl) ? "/" : ToolHelper.Base64DecodeUrl(ReturnUrl));
            }
        }
        catch
        {
            await ShowInformation("添加第三方登入失败", "[Code:310] 无法连接到服务器，请确保网络正常后联系开发人员", EventCallback.Factory.Create<MouseEventArgs>(this, () =>
            {
                NavigationManager.NavigateTo(string.IsNullOrWhiteSpace(ReturnUrl) ? "/" : ToolHelper.Base64DecodeUrl(ReturnUrl));

            }));
        }
    }

}
