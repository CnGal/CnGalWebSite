@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject SwalService SwalService
@inject ToastService ToastService
@inject IServiceProvider Provider

<div class="@Class">
    <div class="row">
        @for (int i = 0; i < Model.Count; i++)
        {
            int temp = i;
            <div class="col-12 col-md-6 col-lg-4 col-xxl-3 mb-2">
                <AutoComplete Items="@AutoCompleteItems" IsLikeMatch="true" IgnoreCase="true" Id="name" Value="@Model[temp].DisplayName" placeholder="标签" OnValueChanged="@((s)=>OnValueChanged(temp,s))"/>
            </div>
        }
    </div>
    <div>
        <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaButton Text="添加" OnClick="OnAdd" Icon="mdi-plus" Color="info"/>
        <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaButton Text="创建" OnClick="OnCreate" Icon="mdi-creation" Class="ms-2" Color="success"/>
    </div>
</div>

@code {
    [Parameter]
    public List<RelevancesModel> Model { get; set; }
    [Parameter]
    public IEnumerable<string> AutoCompleteItems { get; set; }
    [Parameter]
    public string Class { get; set; }
    [Parameter]
    public EventCallback<string> OnInput { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await Task.Delay(500);
            await OnInput.InvokeAsync();
        }
    }

    private async Task OnAdd()
    {
        try
        {
            Model.Add(new RelevancesModel());
            await OnInput.InvokeAsync();
            StateHasChanged();
        }
        catch
        {
            await ToastService.Error("添加标签失败", "发生了未预料的异常，请联系开发人员");
        }
    }

    public void Refresh()
    {
        StateHasChanged();
        

    }

    public async Task OnValueChanged(int index, string text)
    {
        Model[index].DisplayName = text;
        await OnInput.InvokeAsync();
        StateHasChanged();
    }

    public async Task OnCreate()
    {
        //确认
        var op = new SwalOption()
        {
            Title = "确认跳转标签创建页面",
            Content = "跳转后当前页面数据不会保存，请确保备份编辑数据后跳转",

            Category = SwalCategory.Warning,
        };
        var ret = await SwalService.ShowModal(op);
        if (ret == false)
        {
            return;
        }
        NavigationManager.NavigateTo(Provider, "/tags/createtag", "创建标签", "fa fa-pencil");
    }

}
