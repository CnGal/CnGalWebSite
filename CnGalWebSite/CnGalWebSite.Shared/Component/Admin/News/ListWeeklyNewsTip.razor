
@inject IHttpService _httpService
@inject ToastService? ToastService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject DialogService DialogService

<div class="">
    <Table TItem="ListWeeklyNewAloneModel" IsPagination="true" PageItemsSource="@PageItems" OnQueryAsync="@OnQueryBasicAsync" SearchModel="@SearchModelUser" ShowSearch="true" @ref="TableRows"
           ShowExtendButtons="true" ExtendButtonColumnWidth="120" SelectedRows="@SelectedRows" IsMultipleSelect="true" IsStriped=true
            ShowToolbar="true" ShowDefaultButtons="false" FixedExtendButtonsColumn="true">
        <TableToolbarTemplate>

        </TableToolbarTemplate>
        <TableColumns>
            <TableColumn @bind-Field="@context.Id" Sortable="true" DefaultSort="true" DefaultSortOrder="@SortOrder.Desc" Fixed="true" Width="80" />
            <TableColumn @bind-Field="@context.State" Sortable="true" Searchable="true" DefaultSort="true" DefaultSortOrder="SortOrder.Asc" TextWrap="true" Width="50" />
            <TableColumn @bind-Field="@context.Title" Searchable="true" TextWrap="true" Width="220" />
            <TableColumn @bind-Field="@context.BriefIntroduction" Searchable="true" TextWrap="true" Width="200" />

            <TableColumn @bind-Field="@context.CreateTime" Sortable="true" TextWrap="true" Width="150" FormatString="yyyy-MM-dd HH:mm" />
            <TableColumn @bind-Field="@context.PublishTime" Sortable="true" TextWrap="true" Width="150" FormatString="yyyy-MM-dd HH:mm" />
        </TableColumns>
        <RowButtonTemplate>
            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-edit" Text="编辑" IsAsync="true" OnClickWithoutRender="@(() => EditWeeklyNews(context.Id))" />

            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-arrow-up" Text="查看" IsAsync="true" OnClickWithoutRender="@(async () => EditArticle(context.ArticleId ))" IsShow="context.ArticleId != 0" />
        </RowButtonTemplate>
    </Table>
</div>

<EditWeeklyNewsTip @ref="editWeeklyNewsTip"  OnRefreshTable="RefreshTable" />

@code {
    [NotNull]
    private Table<ListWeeklyNewAloneModel> TableRows { get; set; }
    private List<ListWeeklyNewAloneModel> SelectedRows { get; set; } = new();

    public ListWeeklyNewsViewModel ListModel { get; set; } = new ListWeeklyNewsViewModel { WeeklyNews = new List<ListWeeklyNewAloneModel>() };

    private ListWeeklyNewAloneModel SearchModelUser { get; set; } = new ListWeeklyNewAloneModel();

    private IEnumerable<int> PageItems => new int[] { 10, 20, 40, 80, 200, 5000 };
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }
    EditWeeklyNewsTip editWeeklyNewsTip;


    protected override async Task OnInitializedAsync()
    {
        try
        {

        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "无法获取周报数据");
        }

    }

    private async Task<QueryData<ListWeeklyNewAloneModel>> OnQueryBasicAsync(QueryPageOptions options)
    {
        try
        {
            return await _httpService.PostAsync<WeeklyNewsPagesInfor, QueryData<ListWeeklyNewAloneModel>>("api/news/GetWeeklyNewList", new WeeklyNewsPagesInfor { SearchModel = SearchModelUser, Options = (QueryPageOptionsHelper)options });
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "无法获取周报列表");
            return new QueryData<ListWeeklyNewAloneModel>();
        }
    }
    private async Task RefreshTable()
    {
        await TableRows.QueryAsync();
    }
    private void EditArticle(long id)
    {
        NavigationManager.NavigateTo( "/articles/index/" + id);

    }

    private async Task EditWeeklyNews(long id)
    {
        if (editWeeklyNewsTip != null)
        {
            await editWeeklyNewsTip.Refresh(true, id);
        }
    }

}
