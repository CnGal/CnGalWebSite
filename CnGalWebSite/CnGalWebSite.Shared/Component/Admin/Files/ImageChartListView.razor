@inject IHttpService _httpService
@inject ToastService? ToastService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IEventService _eventService

<Table TItem="ListFileAloneModel" IsPagination="true" PageItemsSource="@PageItems" OnQueryAsync="@OnQueryBasicAsync" SearchModel="@searchModel" ShowSearch="true" @ref="TableRows"
       ShowExtendButtons="true" ExtendButtonColumnWidth="70" SelectedRows="@SelectedRows" IsMultipleSelect="true" IsStriped=true
        ShowToolbar="true" ShowDefaultButtons="false" FixedExtendButtonsColumn="true">
    <TableColumns>
        <TableColumn @bind-Field="@context.Id" Sortable="true" DefaultSort="true" DefaultSortOrder="@SortOrder.Desc" Fixed="true" Width="80" />
        <TableColumn @bind-Field="@context.FileName" Searchable="true" Sortable="true" Width="200" TextWrap="true" />
        <TableColumn @bind-Field="@context.FileSize" Sortable="true" Width="100" TextWrap="true" Formatter="FileSizeFormatter" />
        <TableColumn @bind-Field="@context.Duration" Sortable="true" Width="100" TextWrap="true" Formatter="AudioLengthFormatter" />
        <TableColumn @bind-Field="@context.Type" Sortable="true" Width="100" TextWrap="true" />
        <TableColumn @bind-Field="@context.UploadTime" TextWrap="true" Width="170" />
        <TableColumn @bind-Field="@context.UserId" Searchable="true" Sortable="true" Width="200" TextWrap="true" />
        <TableColumn @bind-Field="@context.Sha1" Searchable="true" Sortable="true" Width="200" TextWrap="true" />
    </TableColumns>
    <RowButtonTemplate>
        <TableCellButton AutoSelectedRowWhenClick="false"  Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-database" Text="查看" IsAsync="true" OnClickWithoutRender="@(() => LookFile( context.FileName))" />
    </RowButtonTemplate>
</Table>

@code {
    [NotNull]
    private Table<ListFileAloneModel> TableRows { get; set; }
    private List<ListFileAloneModel> SelectedRows { get; set; } = new();

    public ListFilesViewModel ListModel { get; set; } = new ListFilesViewModel { Files = new List<ListFileAloneModel>() };

    private ListFileAloneModel searchModel { get; set; } = new ListFileAloneModel();

    private IEnumerable<int> PageItems => new int[] { 10, 20, 40, 80, 200, 5000 };


    private async Task<QueryData<ListFileAloneModel>> OnQueryBasicAsync(QueryPageOptions options)
    {
        try
        {

            return await _httpService.PostAsync<FilesPagesInfor, QueryData<ListFileAloneModel>>("api/admin/GetFileList", new FilesPagesInfor { SearchModel = searchModel, Options = (QueryPageOptionsHelper)options });
        }
        catch (Exception exc)
        {
            await ToastService.Error("无法获取评论列表", "未知异常，请在确保网络正常后联系开发人员");
            return new QueryData<ListFileAloneModel>();
        }
    }

    public Task<string> FileSizeFormatter(object price)
    {
        long? size = (long?)((BootstrapBlazor.Components.TableColumnContext<ListFileAloneModel, System.Object>)price).Value;
        if (size == null)
        {
            return Task.FromResult("无");
        }
        string res = ((double)size / 1024 / 1024).ToString("0.00");
        if (res == "0.00")
        {
            res = "无";
        }
        else
        {
            res +=" MB";
        }

        return Task.FromResult(res);
    }

    public Task<string> AudioLengthFormatter(object price)
    {
        string res = "";
        var time= (TimeSpan?)((BootstrapBlazor.Components.TableColumnContext<ListFileAloneModel, System.Object>)price).Value;
        if(time==null)
        {
            res = "无";
        }
        else
        {
            res = time.Value.TotalSeconds.ToString("0.0");
            if (res == "0.0")
            {
                res = "无";
            }
            else
            {
                res += " s";
            }
        }


        return Task.FromResult(res);
    }

    private async Task LookFile(string url)
    {
        await _eventService.OpenNewPage(url);
    }

}
