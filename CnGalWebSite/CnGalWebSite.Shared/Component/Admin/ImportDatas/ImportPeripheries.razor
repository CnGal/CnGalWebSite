@inject ToastService? ToastService
@inject HttpClient Http

<div class="card h-100  rounded shadow-sm  bg-opacity p-4" style="border:0px">
    <div style="height:100%">
        <h4 class="fw-bold">@Title</h4>
        <p class="" style="color: gray;margin-top:20px">
            @BriefIntroduction
        </p>

    </div>
    <div class="card-footer" style="background-color: transparent; border: 0px; padding: 0px">
        @if (isProgressing)
        {
            <p class="" style="color: gray; margin: 0;">
                @ProgressText
            </p>
            <Progress @bind-Value="@Value" Color="Color.Primary" IsShowValue="true" Height="10"></Progress>
            <div class="mt-2">
                <Button style="width: 100px" @onclick="OnCancel" IsAsync="true" Color="Color.Danger" IsOutline="true">取消导入</Button>
            </div>
        }
        else
        {
            <ButtonUpload TValue="string" IsSingle="true" DefaultFileList="DefaultFormatFileList" OnChange="@OnClickToUpload" OnDelete="@(fileName => Task.FromResult(true))" BrowserButtonText="上传文件" Accept=".json" BrowserButtonIcon="fa fa-upload" BrowserButtonClass="btn-success"></ButtonUpload>
        }
    </div>
</div>

@code {
    string typeString = "周边";
    bool isProgressing = false;

    public int Value { get; set; } = 0;

    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public string BriefIntroduction { get; set; }

    public string ProgressText { get; set; }
    private bool isCancel = false;
    private List<UploadFile> DefaultFormatFileList { get; set; } = new List<UploadFile>();

    private async Task OnClickToUpload(UploadFile file)
    {
        try
        {
            //尝试解析Json数据
            List<ImportPeripheryModel> entryList = null;
            string jsonStr = "";

            using (System.IO.Stream stream = file.File.OpenReadStream(file.File.Size))
            {

                Memory<byte> bytes = new byte[stream.Length];

                int totalRead = 0;
                while (totalRead < bytes.Length)
                {
                    int bytesRead = await stream.ReadAsync(bytes.Slice(totalRead));
                    if (bytesRead == 0) break;
                    totalRead += bytesRead;
                }


                if (totalRead < stream.Length)
                {
                    await ToastService.Error($"导入{typeString}数据失败", "无法Json文件过大，读取到缓冲区的字节数与文件流字节数不一致");
                    DefaultFormatFileList = new List<UploadFile>();
                    StateHasChanged();
                    return;
                }
                jsonStr = System.Text.Encoding.UTF8.GetString(bytes.ToArray());
            }
            try
            {
                using (System.IO.TextReader str = new System.IO.StringReader(jsonStr))
                {
                    Newtonsoft.Json.JsonSerializer serializer = new Newtonsoft.Json.JsonSerializer();
                    entryList = (List<ImportPeripheryModel>)serializer.Deserialize(str, typeof(List<ImportPeripheryModel>));
                }
            }
            catch
            {
                await ToastService.Error($"导入{typeString}数据失败", "无法解析Json文件，请核对文件格式");
                DefaultFormatFileList = new List<UploadFile>();
                StateHasChanged();
                return;
            }

            if (entryList == null || entryList.Count == 0)
            {
                await ToastService.Error($"导入{typeString}数据失败", "数据不能为空");
                DefaultFormatFileList = new List<UploadFile>();
                StateHasChanged();
                return;
            }

            //上传数据
            ProgressText = "正在导入数据，共" + entryList.Count + "条";
            double temp = (double)100 / entryList.Count;
            double sum = 0;
            isCancel = false;

            await ToastService.Information($"正在导入{typeString}数据", "任务执行需要一定时间，请稍安勿躁");
            isProgressing = true;
            StateHasChanged();
            int errorCount = 0;
            foreach (var item in entryList)
            {
                if (await OnImportData(item) == false)
                {
                    errorCount++;
                }
                if (isCancel == true)
                {
                    isProgressing = false;
                    StateHasChanged();
                    return;
                }
                Value = (int)sum;
                sum += temp;
                StateHasChanged();
            }

            //上传成功
            if (errorCount > 0)
            {
                await ToastService.Success($"{typeString}数据数据导入完成", $"共尝试导入共计{entryList.Count}条数据，其中条{errorCount}数据导入错误");
            }
            else
            {
                await ToastService.Success($"成功导入{typeString}数据", "成功导入共计" + entryList.Count + "条数据");
            }

            isProgressing = false;
            StateHasChanged();
        }
        catch (Exception exc)
        {
            await ToastService.Error($"导入{typeString}数据失败", "发生未知错误，错误信息：" + exc.Message);
            DefaultFormatFileList = new List<UploadFile>();
            StateHasChanged();
            return;
        }

    }

    public async Task<bool> OnImportData(ImportPeripheryModel model)
    {
        //上传
        try
        {
            var result = await Http.PostAsJsonAsync<ImportPeripheryModel>(ToolHelper.WebApiPath + "api/batch/ImportPeripheryData", model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error($"导入{typeString}失败", obj.Error);
                return false;
            }
        }
        catch
        {
            await ToastService.Error($"导入{typeString}失败", "发生了未预料的异常，请联系开发人员");
            return false;
        }
        return true;
    }

    public void OnCancel()
    {
        isCancel = true;
        
    }
}
