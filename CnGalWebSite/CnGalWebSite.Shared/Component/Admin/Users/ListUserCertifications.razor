@attribute [Authorize(Roles = "Admin")]

@inject HttpClient Http
@inject ToastService? ToastService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<Table TItem="ListUserCertificationAloneModel" IsPagination="true" PageItemsSource="@PageItems" OnQueryAsync="@OnQueryBasicAsync" SearchModel="@SearchModelEntry" ShowSearch="true" @ref="TableRows"
       ShowExtendButtons="true" ExtendButtonColumnWidth="170" SelectedRows="@SelectedRows" IsMultipleSelect="true" IsStriped=true
        ShowToolbar="true" ShowDefaultButtons="false" FixedExtendButtonsColumn="true">
    <TableColumns>
        <TableColumn @bind-Field="@context.Id" Sortable="true" DefaultSort="true" Fixed="true" Width="60" DefaultSortOrder="SortOrder.Desc" />
        <TableColumn @bind-Field="@context.UserName" Sortable Searchable TextWrap Width="150" />
        <TableColumn @bind-Field="@context.UserId" Sortable Searchable TextWrap Width="320" />
        <TableColumn @bind-Field="@context.EntryId" Sortable Searchable TextWrap Width="80" />
        <TableColumn @bind-Field="@context.EntryName" Sortable Searchable TextWrap Width="200" />
        <TableColumn @bind-Field="@context.CertificationTime" Sortable="true" Width="200" TextWrap="true" />

    </TableColumns>
    <RowButtonTemplate>
        <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-users" Text="查看用户" IsAsync="true" OnClickWithoutRender="@(async () => OnRowLookUserClick(context.UserId))" />
        <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-codepen" Text="查看词条" IsAsync="true" OnClickWithoutRender="@(async () => OnRowLookEntryClick(context.EntryId))" />
    </RowButtonTemplate>
</Table>


@code { [NotNull]
    private Table<ListUserCertificationAloneModel>? TableRows { get; set; }
    private List<ListUserCertificationAloneModel> SelectedRows { get; set; } = new();

    private ListUserCertificationAloneModel SearchModelEntry { get; set; } = new ListUserCertificationAloneModel();

    private IEnumerable<int> PageItems => new int[] { 10, 20, 40, 80, 200, 5000 };
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }


    protected override async Task OnInitializedAsync()
    {


    }

    private async Task<QueryData<ListUserCertificationAloneModel>> OnQueryBasicAsync(QueryPageOptions options)
    {
        try
        {
            var result = await Http.PostAsJsonAsync<UserCertificationsPagesInfor>(ToolHelper.WebApiPath + "api/admin/GetUserCertificationList", new UserCertificationsPagesInfor { SearchModel = SearchModelEntry, Options = (QueryPageOptionsHelper)options });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            return JsonSerializer.Deserialize<QueryData<ListUserCertificationAloneModel>>(jsonContent, ToolHelper.options);
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "无法获取用户认证列表");
            return new QueryData<ListUserCertificationAloneModel>();
        }
    }


    public void OnRowLookUserClick(string id)
    {
        NavigationManager.NavigateTo("/space/index/" + id);
        
    }

    public void OnRowLookEntryClick(int id)
    {
        NavigationManager.NavigateTo("/entries/index/" + id);
        
    }

}

