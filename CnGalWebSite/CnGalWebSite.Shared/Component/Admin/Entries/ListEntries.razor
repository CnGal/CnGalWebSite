@attribute [Authorize(Roles = "Admin")]

@inject IHttpService _httpService
@inject ToastService? ToastService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<Table TItem="ListEntryAloneModel" IsPagination="true" PageItemsSource="@PageItems" OnQueryAsync="@OnQueryBasicAsync" SearchModel="@SearchModelEntry" ShowSearch="true" @ref="TableRows"
       ShowExtendButtons="true" ExtendButtonColumnWidth="340" SelectedRows="@SelectedRows" IsMultipleSelect="true" IsStriped=true
      ShowToolbar="true" ShowDefaultButtons="false" FixedExtendButtonsColumn="true">
    <TableToolbarTemplate>
        <TableToolbarButton TItem="ListEntryAloneModel" Color="Color.Success" Icon="fa fa-pencil" Text="编辑" OnClickCallback="OnEditModel" IsAsync="true" />
        <TableToolbarButton TItem="ListEntryAloneModel" Color="Color.Primary" Icon="fa fa-arrow-up" Text="增权重" OnClickCallback="OnPriorityUpClick" IsAsync="true" />
        <TableToolbarButton TItem="ListEntryAloneModel" Color="Color.Info" Icon="fa fa-arrow-down" Text="降权重" OnClickCallback="OnPriorityDownClick" IsAsync="true" />
        <TableToolbarButton TItem="ListEntryAloneModel" Color="Color.Primary" Icon="fa fa-map-signs" Text="显示" OnClickCallback="OnUnHiddenClick" IsAsync="true" />
        <TableToolbarButton TItem="ListEntryAloneModel" Color="Color.Success" Icon="fa fa-unlink" Text="隐藏" OnClickCallback="OnHiddenClick" IsAsync="true" />
        <TableToolbarButton TItem="ListEntryAloneModel" Color="Color.Primary" Icon="fa fa-map-signs" Text="开外链" OnClickCallback="OnUnHideOutlinkClick" IsAsync="true" />
        <TableToolbarButton TItem="ListEntryAloneModel" Color="Color.Info" Icon="fa fa-unlink" Text="关外链" OnClickCallback="OnHideOutlinkClick" IsAsync="true" />
        <TableToolbarButton TItem="ListEntryAloneModel" Color="Color.Primary" Icon="fa fa-comments" Text="开评" OnClickCallback="OnCanCommentClick" IsAsync="true" />
        <TableToolbarButton TItem="ListEntryAloneModel" Color="Color.Success" Icon="fa fa-comments-o" Text="关评" OnClickCallback="OnCanNotCommentClick" IsAsync="true" />

    </TableToolbarTemplate>
    <TableColumns>
        <TableColumn @bind-Field="@context.Id" Sortable="true" DefaultSort="true" Fixed="true" Width="60"  DefaultSortOrder="SortOrder.Desc"/>
        <TableColumn @bind-Field="@context.Type" Searchable="true" Sortable="true" Width="80" />
        <TableColumn @bind-Field="@context.Name" Sortable="true" Searchable="true" Width="120" TextWrap="true" />
        <TableColumn @bind-Field="@context.BriefIntroduction" Searchable="true" TextWrap="true" Width="300" />

        <TableColumn @bind-Field="@context.Priority" Sortable="true" Width="120" />
        <TableColumn @bind-Field="@context.IsHidden" Sortable="true" ComponentType="@typeof(Switch)" Width="95" />
        <TableColumn @bind-Field="@context.IsHideOutlink" Sortable="true" ComponentType="@typeof(Switch)" Width="110" />
        <TableColumn @bind-Field="@context.CanComment" Sortable="true" ComponentType="@typeof(Switch)" Width="110" />
    </TableColumns>
    <RowButtonTemplate>
        <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Warning" Icon="fa fa-map-signs" Text="查看" IsAsync="true" OnClickWithoutRender="@(async () => OnRowLookClick( context.Id))" />
        <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-arrow-up" Text="增权" IsAsync="true" OnClickWithoutRender="@(() => OnRowEditPriorityClick(new int[] { context.Id },1 , true))" />
        <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-arrow-down" Text="降权" IsAsync="true" OnClickWithoutRender="@(() => OnRowEditPriorityClick(new int[] { context.Id }, - 1 , true))" />
        <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-unlink" Text="隐藏" IsAsync="true" IsShow="!context.IsHidden" OnClickWithoutRender="@(() => OnRowEditIsHiddenClick(new int[] { context.Id }, true, true))" />
        <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Danger" Icon="fa fa-link" Text="显示" IsAsync="true" IsShow="context.IsHidden" OnClickWithoutRender="@(() => OnRowEditIsHiddenClick(new int[] { context.Id }, false, true))" />
        <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Danger" Icon="fa fa-unlink" Text="关外链" IsAsync="true" IsShow="!context.IsHideOutlink" OnClickWithoutRender="@(() => OnRowEditIsHideOutlinkClick(new int[] { context.Id }, true, true))" />
        <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-link" Text="开外链" IsAsync="true" IsShow="context.IsHideOutlink" OnClickWithoutRender="@(() => OnRowEditIsHideOutlinkClick(new int[] { context.Id }, false, true))" />
        <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Info" Icon="fa fa-comments-o" Text="开评" IsAsync="true" IsShow="!context.CanComment" OnClickWithoutRender="@(() => OnRowEditCanCommentClick(new int[] { context.Id }, true, true))" />
        <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Danger" Icon="fa fa-comments-o" Text="关评" IsAsync="true" IsShow="context.CanComment" OnClickWithoutRender="@(() => OnRowEditCanCommentClick(new int[] { context.Id }, false, true))" />
    </RowButtonTemplate>
</Table>


@code { [NotNull]
    private Table<ListEntryAloneModel>? TableRows { get; set; }
    private List<ListEntryAloneModel> SelectedRows { get; set; } = new();

    public ListEntriesViewModel ListModel { get; set; } = new ListEntriesViewModel { Entries = new List<ListEntryAloneModel>() };

    private ListEntryAloneModel SearchModelEntry { get; set; } = new ListEntryAloneModel();

    private IEnumerable<int> PageItems => new int[] { 10, 20, 40, 80, 200, 5000 };
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }




    protected override async Task OnInitializedAsync()
    {

    }

    private async Task<QueryData<ListEntryAloneModel>> OnQueryBasicAsync(QueryPageOptions options)
    {
        try
        {

            return await _httpService.PostAsync<EntriesPagesInfor, QueryData<ListEntryAloneModel>>("api/admin/GetEntryList", new EntriesPagesInfor { SearchModel = SearchModelEntry, Options = (QueryPageOptionsHelper)options });
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "无法获取词条列表");
            return new QueryData<ListEntryAloneModel>();
        }
    }
    private async Task OnRowEditPriorityClick(int[] ids, int plusPriority, bool showMessage)
    {
        //调用API
        try
        {
            var obj = await _httpService.PostAsync<EditEntryPriorityViewModel, Result>("api/entries/EditEntryPriority", new EditEntryPriorityViewModel { Ids = ids, PlusPriority = plusPriority });
            if (obj.Successful == false)
            {
                await ToastService.Error("修改词条权重失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success("修改词条权重成功", "修改词条权重成功");
                    await TableRows.QueryAsync();
                }

            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "修改词条权重失败");
        }

    }


    private async Task OnPriorityUpClick(IEnumerable<ListEntryAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改词条权重", "请选中词条");
            return;
        }

        await OnRowEditPriorityClick(items.Select(s => s.Id).ToArray(), 1, false);
        await ToastService.Success("修改词条权重成功", "修改词条权重成功");
        await TableRows.QueryAsync();
    }
    private async Task OnPriorityDownClick(IEnumerable<ListEntryAloneModel> items)
    {

        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改词条权重", "请选中词条");
            return;
        }

        await OnRowEditPriorityClick(items.Select(s => s.Id).ToArray(), -1, false);

        await ToastService.Success("修改词条权重成功", "修改词条权重成功");
        await TableRows.QueryAsync();
    }

    private async Task OnRowEditIsHiddenClick(int[] ids, bool isHidden, bool showMessage)
    {
        string tempString = isHidden == true ? "隐藏" : "显示";
        //调用API
        try
        {
            var obj = await _httpService.PostAsync<HiddenEntryModel, Result>("api/entries/HiddenEntry", new HiddenEntryModel { Ids = ids, IsHidden = isHidden });



            if (obj.Successful == false)
            {
                await ToastService.Error(tempString + "词条失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success(tempString + "词条成功", tempString + "词条成功");
                    await TableRows.QueryAsync();
                }
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, tempString + "词条失败");
        }
    }

    private async Task OnHiddenClick(IEnumerable<ListEntryAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改词条显示状态", "请选中词条");
            return;
        }

        await OnRowEditIsHiddenClick(items.Select(s => s.Id).ToArray(), true, false);

        await ToastService.Success("隐藏词条成功", "隐藏词条成功");
        await TableRows.QueryAsync();
    }
    private async Task OnUnHiddenClick(IEnumerable<ListEntryAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改词条显示状态", "请选中词条");
            return;
        }

        await OnRowEditIsHiddenClick(items.Select(s => s.Id).ToArray(), false, false);

        await ToastService.Success("显示词条成功", "显示词条成功");
        await TableRows.QueryAsync();
    }

    private async Task OnRowEditIsHideOutlinkClick(int[] ids, bool isHidden, bool showMessage)
    {
        string tempString = isHidden == true ? "隐藏" : "显示";
        //调用API
        try
        {
            var obj = await _httpService.PostAsync<HiddenEntryModel, Result>("api/entries/HideEntryOutlink", new HiddenEntryModel { Ids = ids, IsHidden = isHidden });



            if (obj.Successful == false)
            {
                await ToastService.Error(tempString + "词条外部链接失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success(tempString + "词条外部链接成功", tempString + "词条外部链接成功");
                    await TableRows.QueryAsync();
                }
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, tempString + "词条外部链接失败");
        }
    }

    private async Task OnHideOutlinkClick(IEnumerable<ListEntryAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改词条外部链接显示状态", "请选中词条");
            return;
        }

        await OnRowEditIsHideOutlinkClick(items.Select(s => s.Id).ToArray(), true, false);

        await ToastService.Success("隐藏词条外部链接成功", "隐藏词条外部链接成功");
        await TableRows.QueryAsync();
    }
    private async Task OnUnHideOutlinkClick(IEnumerable<ListEntryAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改词条外部链接显示状态", "请选中词条");
            return;
        }

        await OnRowEditIsHideOutlinkClick(items.Select(s => s.Id).ToArray(), false, false);

        await ToastService.Success("显示词条外部链接成功", "显示词条外部链接成功");
        await TableRows.QueryAsync();
    }

    public void OnRowLookClick(int id)
    {
        NavigationManager.NavigateTo( "/entries/index/" + id);
    }

    private async Task OnRowEditCanCommentClick(int[] ids, bool canComment, bool showMessage)
    {
        string tempString = canComment == true ? "启用词条评论" : "关闭词条评论";
        //调用API
        try
        {
            var obj = await _httpService.PostAsync<EditEntryCanCommentModel, Result>("api/comments/EditEntryCanComment", new EditEntryCanCommentModel { Ids = ids, CanComment = canComment });



            if (obj.Successful == false)
            {
                await ToastService.Error(tempString + "失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success(tempString + "成功", tempString + "成功");
                    await TableRows.QueryAsync();
                }
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, tempString + "失败");
        }
    }

    private async Task OnCanCommentClick(IEnumerable<ListEntryAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改词条评论状态", "请选中词条");
            return;
        }

        await OnRowEditCanCommentClick(items.Select(s => s.Id).ToArray(), true, false);

        await ToastService.Success("开启词条评论成功", "开启词条评论成功");
        await TableRows.QueryAsync();
    }
    private async Task OnCanNotCommentClick(IEnumerable<ListEntryAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改词条评论状态", "请选中词条");
            return;
        }

        await OnRowEditCanCommentClick(items.Select(s => s.Id).ToArray(), false, false);

        await ToastService.Success("关闭词条评论成功", "关闭词条评论成功");
        await TableRows.QueryAsync();
    }


    [Inject]
    [NotNull]
    private DialogService? DialogService { get; set; }

    public async Task OnEditModel(IEnumerable<ListEntryAloneModel> items)
    {
        int count = items.Count();
        if (count == 0)
        {
            await ToastService.Information("没有修改词条评论状态", "请选中词条");
            return;
        }
        else if (count > 1)
        {
            await ToastService.Information("没有修改词条评论状态", "请选中一个词条");
            return;
        }
        var model = Utility.GenerateEditorItems<ListEntryAloneModel>();
        // var item = items.First(i => i.GetFieldName() == nameof(Foo.Hobby));
        //item.Data = Foo.GenerateHobbys(Localizer);

        var option = new EditDialogOption<ListEntryAloneModel>()
        {
            Title = "编辑词条",
            Model = items.First(),
            Items = model,
            OnEditAsync = async context =>
            {
                // Trace.Log("保存按钮被点击");
                var editModel = (ListEntryAloneModel)context.Model;
                await EditData(editModel);
                return true;
            }
        };

        await DialogService.ShowEditDialog(option);
    }

    public async Task EditData(ListEntryAloneModel model)
    {
        try
        {
            var obj = await _httpService.PostAsync<ListEntryAloneModel, Result>("api/batch/UpdateEntryData", model);

            if (obj.Successful == false)
            {
                await ToastService.Error("保存数据失败", obj.Error);
            }
            else
            {

                await ToastService.Success("保存数据成功", "保存数据成功，不会留下审核记录和编辑记录");
                await TableRows.QueryAsync();
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "保存数据失败");
        }
    }
}

