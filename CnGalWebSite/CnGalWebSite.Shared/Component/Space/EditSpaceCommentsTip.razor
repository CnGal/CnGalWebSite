@inject IAuthService AuthService
@inject IHttpService _httpService
@inject ToastService? ToastService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
<div class="">
        <div class="mb-4" style="padding-right: 0;padding-left: 0;">
            <div class=" rounded shadow-sm -lg p-4 bg-opacity">
                <h3 class="fw-bold">@Title</h3>
                <h5 class="text-truncate mb-4 fw-bold">@Subtitle</h5>
                <hr />
                <Table TItem="ListCommentAloneModel" IsPagination="true" PageItemsSource="@PageItems" OnQueryAsync="@OnQueryBasicAsync" SearchModel="@searchModel" ShowSearch="true" @ref="TableRows"
                       ShowExtendButtons="true" ExtendButtonColumnWidth="270" SelectedRows="@SelectedRows" IsMultipleSelect="true" IsStriped=true
                        ShowToolbar="true" ShowDefaultButtons="false" FixedExtendButtonsColumn="true">
                    <TableToolbarTemplate>
                        <TableToolbarButton TItem="ListCommentAloneModel" Color="Color.Primary" Icon="fa fa-arrow-up" Text="增权重" OnClickCallback="OnPriorityUpClick" IsAsync="true" />
                        <TableToolbarButton TItem="ListCommentAloneModel" Color="Color.Success" Icon="fa fa-arrow-down" Text="降权重" OnClickCallback="OnPriorityDownClick" IsAsync="true" />

                        <TableToolbarButton TItem="ListCommentAloneModel" Color="Color.Success" Icon="fa fa-map-signs" Text="显示" OnClickCallback="OnUnHiddenClick" IsAsync="true" />
                        <TableToolbarButton TItem="ListCommentAloneModel" Color="Color.Primary" Icon="fa fa-unlink" Text="隐藏" OnClickCallback="OnHiddenClick" IsAsync="true" />
                        <TableToolbarButton TItem="ListCommentAloneModel" Color="Color.Danger" Icon="fa fa-close" Text="删除" OnClickCallback="OnDeleteClick" IsAsync="true" />

                    </TableToolbarTemplate>
                    <TableColumns>
                        <TableColumn @bind-Field="@context.Id" Sortable="true" DefaultSort="true" DefaultSortOrder="@SortOrder.Desc" Fixed="true" Width="80" />
                        <TableColumn @bind-Field="@context.Type" Searchable="true" Sortable="true" Width="100" />
                        <TableColumn @bind-Field="@context.CommentTime" Sortable="true" Width="200" />
                        <TableColumn @bind-Field="@context.Text" Searchable="true" TextWrap="true" Width="400" />
                        <TableColumn @bind-Field="@context.Priority" TextWrap="true" Width="100" />

                        <TableColumn @bind-Field="@context.ApplicationUserId" Searchable="true" Sortable="true" Width="300" />
                        <TableColumn @bind-Field="@context.ParentCodeNavigationId" Searchable="true" Sortable="true" Width="110" />
                        <TableColumn @bind-Field="@context.IsHidden" Sortable="true" ComponentType="@typeof(Switch)" Width="110" />
                    </TableColumns>
                    <RowButtonTemplate>
                        <TableCellButton AutoSelectedRowWhenClick="false"  Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-arrow-up" Text="增权重" IsAsync="true" OnClickWithoutRender="@(() => OnRowEditPriorityClick(new long[] { context.Id }, 1 , true))" />
                        <TableCellButton AutoSelectedRowWhenClick="false"  Size="Size.ExtraSmall" Color="Color.Info" Icon="fa fa-arrow-down" Text="降权重" IsAsync="true" OnClickWithoutRender="@(() => OnRowEditPriorityClick(new long[] { context.Id }, - 1 , true))" />
                        <TableCellButton AutoSelectedRowWhenClick="false"  Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-comments-o" Text="切换显示" IsAsync="true" OnClickWithoutRender="@(() => OnRowEditIsHiddenClick(new long[] { context.Id }, !context.IsHidden, true))" />
                        <TableCellButton AutoSelectedRowWhenClick="false"  Size="Size.ExtraSmall" Color="Color.Danger" Icon="fa fa-close" Text="删除" IsAsync="true" OnClickWithoutRender="@(() =>  OnRowDeleteClick(new long[] { context.Id } ,true))" />
                    </RowButtonTemplate>
                </Table>
            </div>
        </div>
</div>
@code {
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public string Subtitle { get; set; }
    [Parameter]
    public CommentType Type { get; set; }


    [NotNull]
    private Table<ListCommentAloneModel>? TableRows { get; set; }
    private List<ListCommentAloneModel> SelectedRows { get; set; } = new();

    public ListCommentsInforViewModel InforModel { get; set; } = new ListCommentsInforViewModel();
    public ListCommentsViewModel ListModel { get; set; } = new ListCommentsViewModel { Comments = new List<ListCommentAloneModel>() };

    private ListCommentAloneModel searchModel { get; set; } = new ListCommentAloneModel();

    private IEnumerable<int> PageItems => new int[] { 10, 20, 40, 80, 200, 5000 };
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    private async Task<QueryData<ListCommentAloneModel>> OnQueryBasicAsync(QueryPageOptions options)
    {
        try
        {
            return await _httpService.PostAsync<CommentsPagesInfor, QueryData<ListCommentAloneModel>>("api/comments/GetCommentListNormal", new CommentsPagesInfor { SearchModel = searchModel, Options = (QueryPageOptionsHelper)options, Type = Type, ObjectId = Id });
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "无法获取评论列表");
            return new QueryData<ListCommentAloneModel>();
        }
    }

    private void LookComment(long? articleId, int? entryId, long? apsceId, CommentType type)
    {
        switch (type)
        {
            case CommentType.CommentArticle:
                NavigationManager.NavigateTo(Provider,"/articles/index/" + articleId, "查看评论", "fa fa-comments-o");
                break;
            case CommentType.CommentEntries:
                NavigationManager.NavigateTo(Provider,"/entries/index/" + entryId, "查看评论", "fa fa-comments-o");
                break;

        }

    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="item"></param>
    private async Task OnRowEditIsHiddenClick(long[] ids, bool isHidden, bool showMessage)
    {
        string tempString = isHidden == true ? "隐藏" : "显示";
        //调用API
        try
        {
            var obj = await _httpService.PostAsync<HiddenCommentModel, Result>("api/comments/UserHiddenComment", new HiddenCommentModel { Ids = ids, IsHidden = isHidden });



            if (obj.Successful == false)
            {
                await ToastService.Error(tempString + "评论失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success(tempString + "评论成功", tempString + "评论成功");
                    await TableRows.QueryAsync();
                }
            }
        }
        catch(Exception ex)
        {
            ErrorHandler.ProcessError(ex, tempString + "评论失败");
        }
    }

    private async Task OnHiddenClick(IEnumerable<ListCommentAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改评论显示状态", "请选中评论");
            return;
        }

        await OnRowEditIsHiddenClick(items.Select(s => s.Id).ToArray(), true, false);

        await ToastService.Success("隐藏评论成功", "隐藏评论成功");
        await TableRows.QueryAsync();
    }
    private async Task OnUnHiddenClick(IEnumerable<ListCommentAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改评论显示状态", "请选中评论");
            return;
        }

        await OnRowEditIsHiddenClick(items.Select(s => s.Id).ToArray(), false, false);

        await ToastService.Success("显示评论成功", "显示评论成功");
        await TableRows.QueryAsync();
    }

    /// <summary>
    ///
    /// </summary>
    /// <param name="item"></param>
    private async Task OnRowDeleteClick(long[] ids, bool showMessage)
    {
        //调用API
        try
        {
            var obj = await _httpService.PostAsync<DeleteCommentModel, Result>("api/comments/UserDeleteComment", new DeleteCommentModel { Ids = ids });

            if (obj.Successful == false)
            {
                await ToastService.Error("删除评论失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success("删除评论成功", "删除评论成功");
                    await TableRows.QueryAsync();
                }
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "删除评论失败");
        }
    }

    private async Task OnDeleteClick(IEnumerable<ListCommentAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有删除评论", "请选中评论");
            return;
        }

        await OnRowDeleteClick(items.Select(s => s.Id).ToArray(), false);

        await ToastService.Success("删除评论成功", "删除评论成功");
        await TableRows.QueryAsync();
    }

    private async Task OnRowEditPriorityClick(long[] ids, int plusPriority, bool showMessage)
    {
        //调用API
        try
        {
            var obj = await _httpService.PostAsync<EditCommentPriorityViewModel, Result>("api/comments/EditCommentPriority", new EditCommentPriorityViewModel { Ids = ids, PlusPriority = plusPriority });
            if (obj.Successful == false)
            {
                await ToastService.Error("修改评论权重失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success("修改评论权重成功", "修改评论权重成功");
                    await TableRows.QueryAsync();
                }

            }
        }
        catch(Exception ex)
        {
            ErrorHandler.ProcessError(ex, "修改评论权重失败");
        }

    }


    private async Task OnPriorityUpClick(IEnumerable<ListCommentAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改评论权重", "请选中评论");
            return;
        }

        await OnRowEditPriorityClick(items.Select(s => s.Id).ToArray(), 1, false);
        await ToastService.Success("修改评论权重成功", "修改评论权重成功");
        await TableRows.QueryAsync();
    }
    private async Task OnPriorityDownClick(IEnumerable<ListCommentAloneModel> items)
    {

        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改评论权重", "请选中评论");
            return;
        }

        await OnRowEditPriorityClick(items.Select(s => s.Id).ToArray(), -1, false);

        await ToastService.Success("修改评论权重成功", "修改评论权重成功");
        await TableRows.QueryAsync();
    }

}
