@inject HttpClient Http
@inject ToastService? ToastService
@inject DialogService DialogService
@inject NavigationManager NavigationManager

<CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaTitleContainer Title="收藏列表" Icon="fa fa-fw fa-list" Class="mb-4">

        <Table TItem="ListFavoriteObjectAloneModel" IsPagination="true" PageItemsSource="@PageItems" OnQueryAsync="@OnQueryBasicAsync" SearchModel="@searchModel" ShowSearch="true" @ref="TableRows"
               ShowExtendButtons="true" ExtendButtonColumnWidth="150" SelectedRows="@SelectedRows" IsMultipleSelect="true" IsStriped=true
               ShowToolbar="true" ShowDefaultButtons="false" FixedExtendButtonsColumn="true">
            <TableToolbarTemplate>
                <TableToolbarButton TItem="ListFavoriteObjectAloneModel" Color="Color.Primary" Icon="fa fa-exchange" Text="移动" OnClickCallback="OnMoveClick" IsAsync="true" />
                <TableToolbarButton TItem="ListFavoriteObjectAloneModel" Color="Color.Danger" Icon="fa fa-trash" Text="删除" OnClickCallback="OnDeleteClick" IsAsync="true" />
            </TableToolbarTemplate>
            <TableColumns>
                <TableColumn @bind-Field="@context.Type" Width="100" TextWrap="true" />
                <TableColumn @bind-Field="@context.Name" Width="200" TextWrap/>
                <TableColumn @bind-Field="@context.CreateTime" TextWrap="true" Sortable="true" Width="150" FormatString="yyyy-MM-dd HH:mm" />
            </TableColumns>
            <RowButtonTemplate>
                <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-share" Text="查看" IsAsync="true" OnClickWithoutRender="@(() => OnRowLookClick(context.ObjectId,context.Type))" />
                <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-exchange" Text="移动" IsAsync="true" OnClickWithoutRender="@(() => OnRowMoveClick(context.ObjectId,context.Type))" />
                <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Danger" Icon="fa fa-trash" Text="删除" IsAsync="true" OnClickWithoutRender="@(() =>  OnRowDeleteClick(new long[] { context.Id } ,true))" />
            </RowButtonTemplate>
        </Table>
</CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaTitleContainer>

<MoveFavoriteFolderTip Id="Id"  OnMoved="@(async () => {await TableRows.QueryAsync(); })" @ref="moveFavoriteFolderTip"/>

@code {
    [Parameter]
    public long Id { get; set; }

    [NotNull]
    private Table<ListFavoriteObjectAloneModel>? TableRows { get; set; }
    private List<ListFavoriteObjectAloneModel> SelectedRows { get; set; } = new();

    public ListFavoriteObjectsInforViewModel InforModel { get; set; } = new ListFavoriteObjectsInforViewModel();
    public ListFavoriteObjectsViewModel ListModel { get; set; } = new ListFavoriteObjectsViewModel { FavoriteObjects = new List<ListFavoriteObjectAloneModel>() };

    private ListFavoriteObjectAloneModel searchModel { get; set; } = new ListFavoriteObjectAloneModel();

    private IEnumerable<int> PageItems => new int[] { 10, 20, 40, 80, 200, 5000 };
    public FavoriteFoldersViewModel UserFavoriteInfor { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    MoveFavoriteFolderTip moveFavoriteFolderTip;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await GetUserFavoriteInforFromFolderId(Id);
        }
    }

    private async Task<QueryData<ListFavoriteObjectAloneModel>> OnQueryBasicAsync(QueryPageOptions options)
    {
        try
        {
            var result = await Http.PostAsJsonAsync<FavoriteObjectsPagesInfor>(ToolHelper.WebApiPath + "api/favorites/GetFavoriteObjectList", new FavoriteObjectsPagesInfor { Options = (QueryPageOptionsHelper)options, SearchModel = searchModel, FavoriteFolderId = Id });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            return JsonSerializer.Deserialize<QueryData<ListFavoriteObjectAloneModel>>(jsonContent, ToolHelper.options);
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "无法获取收藏夹数据");
            return new QueryData<ListFavoriteObjectAloneModel>();
        }
    }

    private async Task OnRowLookClick(long id, FavoriteObjectType type)
    {
        if (type == FavoriteObjectType.Entry)
        {
            NavigationManager.NavigateTo($"/entries/index/{id}");
        }
        else if (type == FavoriteObjectType.Video)
        {
            NavigationManager.NavigateTo($"/videos/index/{id}");
        }
        else if (type == FavoriteObjectType.Article)
        {
            NavigationManager.NavigateTo($"/articles/index/{id}");
        }
        else if (type == FavoriteObjectType.Tag)
        {
            NavigationManager.NavigateTo($"/tags/index/{id}");
        }
        else if (type == FavoriteObjectType.Periphery)
        {
            NavigationManager.NavigateTo($"/peripheries/index/{id}");
        }
    }



    private async Task OnRowDeleteClick(long[] ids, bool showMessage)
    {
        //调用API
        try
        {
            var result = await Http.PostAsJsonAsync<DeleteFavoriteObjectsModel>(ToolHelper.WebApiPath + "api/favorites/UserDeleteFavoriteObject", new DeleteFavoriteObjectsModel { FavorieFolderId = Id, Ids = ids });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            var obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);

            if (obj.Successful == false)
            {
                await ToastService.Error("删除收藏失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success("删除收藏成功", "删除收藏成功");
                    await TableRows.QueryAsync();
                }
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "删除收藏失败");
        }
    }

    private async Task OnDeleteClick(IEnumerable<ListFavoriteObjectAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有删除收藏", "请选中收藏");
            return;
        }

        await OnRowDeleteClick(items.Select(s => s.Id).ToArray(), false);

        await ToastService.Success("删除收藏成功", "删除收藏成功");
        await TableRows.QueryAsync();
    }

    private async Task OnMoveClick(IEnumerable<ListFavoriteObjectAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有移动收藏", "请选中收藏");
            return;
        }
        List<KeyValuePair<FavoriteObjectType, long>> ObjectIds = new List<KeyValuePair<FavoriteObjectType, long>>();
        foreach (var item in items)
        {
            ObjectIds.Add(new KeyValuePair<FavoriteObjectType, long>(item.Type, item.ObjectId));
        }

        if (moveFavoriteFolderTip!=null)
        {
            moveFavoriteFolderTip.Refresh(ObjectIds,UserFavoriteInfor);
        }

    }

    private async Task OnRowMoveClick(long id, FavoriteObjectType type)
    {
        List<KeyValuePair<FavoriteObjectType, long>> temp = new List<KeyValuePair<FavoriteObjectType, long>>();
        temp.Add(new KeyValuePair<FavoriteObjectType, long>(type, id));
        if (moveFavoriteFolderTip != null)
        {
            moveFavoriteFolderTip.Refresh(temp, UserFavoriteInfor);
        }
    }

    public async Task GetUserFavoriteInforFromFolderId(long id)
    {
        try
        {
            UserFavoriteInfor = await Http.GetFromJsonAsync<FavoriteFoldersViewModel>(ToolHelper.WebApiPath + "api/favorites/GetUserFavoriteInforFromFolderId/" + id, ToolHelper.options);
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取用户收藏夹失败");
        }
    }


}
