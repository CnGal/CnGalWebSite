@inject IHttpService _httpService
@inject ToastService? ToastService
@inject NavigationManager NavigationManager


<div class=" ps-4 pe-4 pt-3 pb-3 mt-3 @(IsChild ? "comment-layout-child" : " bg-opacity") shadow-sm rounded " style="cursor:default">
    <div>

        <UserRankTextViewTip UserId="@Model.ApplicationUserId" UserName="@Model.UserName" Image="@Model.UserImage" Ranks="@Model.Ranks" Text="@Model.CommentTime.ToString("yyyy年M月d日 H:mm")"></UserRankTextViewTip>
        <div class="mt-2">
            <MarkdownViewTip IsNeedHighlight="true" Text="@(ReplyTip+Model.Text)"/>
        </div>

        <AuthorizeView>
            <Authorized>
                <div class="mt-2" style=" display: flex; justify-content: flex-end; ">
                    @if (IsReplying)
                    {
                        <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaButton Text="取消回复" OnClick="OnUnReplyClick" XSmall />
                    }
                    else
                    {
                        <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaButton Text="回复" OnClick="OnReplyClick" IsAsync XSmall />
                    }


                    @if (CanDeleted)
                    {
                        <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaButton Text="删除" OnClick="OnDeleteClick" IsAsync XSmall Class="ms-3"/>
                    }
                </div>
            </Authorized>
        </AuthorizeView>



        @if (Deepth < MaxDeepth)
        {
            if (IsReplying)
            {
                <div class="mt-3">
                    <ReplyCommentTip ObjectId="@ObjectId" IsChild="IsChild" Type="CommentType.ReplyComment" OnRefresh="OnRely"></ReplyCommentTip>
                </div>
            }
            @foreach (var item in Model.InverseParentCodeNavigation)
            {

                <CommentPartTip Model="item" IsChild="true" OnRefresh="OnRely_Comment"
                                Deepth="Deepth+1"  ParentCommentModel="@Model" CanDeleted="@CanDeleted" ></CommentPartTip>
            }
        }

    </div>
</div>
@if (Deepth >= MaxDeepth)
{
    @if (IsReplying)
    {
        <div class="mt-3">
            <ReplyCommentTip ObjectId="@ObjectId" IsChild="IsChild" Type="CommentType.ReplyComment" OnRefresh="OnRely"></ReplyCommentTip>

        </div>
    }
    @foreach (var item in Model.InverseParentCodeNavigation)
    {
        <CommentPartTip Model="item" IsChild="true" OnRefresh="OnRely_Comment"
                        Deepth="Deepth+1" ParentCommentModel="@Model" CanDeleted="@CanDeleted" ></CommentPartTip>
    }
}

@code {
    [Parameter]
    public CommentViewModel Model { get; set; }

    [Parameter]
    public bool IsChild { get; set; }

    [Parameter]
    public EventCallback OnRefresh { get; set; }

    [Parameter]
    public CommentViewModel ParentCommentModel { get; set; }

    public long LastId { get; set; }

    [Parameter]
    public bool CanDeleted { get; set; }

    [Parameter]
    public int Deepth { get; set; }

    private int MaxDeepth = 3;

    bool isRead = false;

    private bool IsReplying { get; set; }

    private string StringMarked { get; set; }

    public string ReplyTip { get { return Deepth > MaxDeepth ? $"回复<a href=\"/space/index/{ParentCommentModel.ApplicationUserId}\">@{ParentCommentModel.UserName}</a>\n": ""; } }


    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    private string ObjectId
    {
        get
        {
            return Model.Id.ToString();
        }
    }

    public void OnReplyClick()
    {
        IsReplying = true;
        StateHasChanged();
    }

    public void OnUnReplyClick()
    {
        IsReplying = false;
        StateHasChanged();
    }

    public void OnLoginClick()
    {
        NavigationManager.NavigateTo("/account/longin");
    }

    public async Task OnRely()
    {
        //这是回复组件的事件回调
        IsReplying = false;
        await OnRefresh.InvokeAsync();
    }

    public async Task OnRely_Comment()
    {
        //这是级联传递的事件回调
        await OnRefresh.InvokeAsync();
    }

    public void OnUserClick()
    {
        if (Model != null)
        {
            NavigationManager.NavigateTo( "/space/index/" + Model.ApplicationUserId);
        }
    }

    int count = 0;

    private async Task OnDeleteClick()
    {

        //调用API
        try
        {
            count++;
            if (count < 2)
            {
                await ToastService.Error("你确定要删除这条评论吗？", "确认删除请再次点击删除按钮");
                return;
            }

            var obj = await _httpService.PostAsync<HiddenCommentModel, Result>("api/comments/UserHiddenComment", new HiddenCommentModel { Ids = new long[] { Model.Id },IsHidden=true });

            if (obj.Successful == false)
            {
                await ToastService.Error("删除评论失败", obj.Error);
            }
            else
            {

                await ToastService.Success("删除评论成功", "删除评论成功");
                await OnRefresh.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "删除评论失败");
        }
    }
}
