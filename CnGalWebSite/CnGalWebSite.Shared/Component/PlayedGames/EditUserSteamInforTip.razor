@inject ToastService ToastService
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IDataCacheService _dataCacheService


<MDialog @bind-Value="Dialog"
         Width="600">
    <MCard>
        <MCardTitle Class="text-h5">
            绑定Steam账号
        </MCardTitle>
        <MCardText>
        
            填写微博链接后点击保存，再到列表中找到创建的动态，点击编辑，在新的窗口中确认无误后发布
        </MCardText>

        <MCardText>
                <MTextField @bind-Value="Model.SteamId" Label="SteamID64（64位的数字Id，可用逗号分隔多个Id）"  />
        </MCardText>
        <MCardActions Class="pb-6 pe-6 ps-6 pt-6">
            <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaButton Text="如何获取SteamId" IsAsync="true" OnClick="OnClickQuestion" Icon="mdi-help-circle-outline" Color="error" TextStyle />

            <MSpacer></MSpacer>
            <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaButton Text="保存" IsAsync="true" OnClick="OnSubmit" Icon="mdi-check" Color="green" TextStyle />
        </MCardActions>
    </MCard>
</MDialog>

@code {

    [Parameter]
    public EventCallback<string> OnChanged { get; set; }

    public EditUserDataViewModel Model = new EditUserDataViewModel();

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }
    bool Dialog { get; set; }

    bool isReady = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Model = await Http.GetFromJsonAsync<EditUserDataViewModel>(ToolHelper.WebApiPath + "api/space/EditUserData", ToolHelper.options);
            isReady = true;
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取编辑用户信息失败");
        }
    }

    private async Task OnSubmit()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(Model.SteamId))
            {
                await ToastService.Error("编辑用户Steam信息失败", "SteamId不能为空");
                return;
            }
            System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex("^(-?[0-9]*[.]*[0-9]{0,3})$");
            var steamIds = Model.SteamId.Replace("，", ",").Replace("、", ",").Split(',');
            foreach (var item in steamIds)
            {
                if (regex.IsMatch(Model.SteamId) == false)
                {
                    await ToastService.Error("编辑用户Steam信息失败", "SteamId需为64位纯数字");
                    return;
                }
            }

            var result = await Http.PostAsJsonAsync<EditUserDataViewModel>(ToolHelper.WebApiPath + "api/space/EditUserData", Model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {

                await ToastService.Error("编辑用户Steam信息失败", obj.Error);
            }
            else
            {
                await ToastService.Success("编辑用户Steam信息成功", "编辑用户Steam信息成功");
                Dialog = false;
                StateHasChanged(); 
                await OnChanged.InvokeAsync(Model.SteamId);

            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "编辑用户Steam信息失败");
        }
    }

    public void OnClickQuestion()
    {
        NavigationManager.NavigateTo( "/articles/index/5");
        
    }

    public void Refresh(bool dialog)
    {
        Dialog = dialog;
        StateHasChanged();
        
    }


}
