@inject IDataCacheService _dataCacheService

@if (Model.MainState == EditState.Preview)
{
    <CnGalWebSite.Shared.MasaComponent.Shared.Editors.Buttons.RevokeButton Url="@("/peripheries/EditMain/" + Model.Id)" ExamineType="Operation.EditPeripheryMain" OnClickRevoke="OnRevoke" Class="ms-4 me-4" />
}
<CnGalWebSite.Shared.MasaComponent.Shared.MaterialDesigns.MDMainInfoCard Name="@Model.Name" Image="@Model.MainPicture"
                                                                         BriefIntroduction="@Model.BriefIntroduction" Small="ForceSmall">
    <ButtonContent>
        @if (HiddenButton == false)
        {
            <CnGalWebSite.Components.Containers.MiniModeContainer>
                <div class="mt-2" style="@("display: flex; "+(ForceSmall||_dataCacheService.IsApp?"justify-content: center;":"justify-content: flex-end;"))">
                    <CnGalWebSite.Shared.MasaComponent.Shared.Buttons.FavoriteButton Id="Model.Id" Type="FavoriteObjectType.Periphery" Class="me-4" />
                    <CnGalWebSite.Shared.MasaComponent.PC.Peripheries.CollectionButton Id="Model.Id" Class="me-4" CollectionChanged="CollectionChanged" />
                    <CnGalWebSite.Shared.MasaComponent.Shared.Editors.Buttons.EditButton Type="ExaminedNormalListModelType.Periphery" Id="Model.Id" @bind-IsHidden="@Model.IsHidden" @bind-IsEdit="@Model.IsEdit" />


                    @if (ToolHelper.IsMaui)
                    {
                        <CnGalWebSite.Shared.MasaComponent.Shared.Buttons.ShareButton Title="@((Model.Type)+" - "+Model.Name)" Class="ms-4" Text="@($"【{Model.Type}】《{Model.Name}》\n{Model.BriefIntroduction}")" />
                    }
                </div>
            </CnGalWebSite.Components.Containers.MiniModeContainer>

        }
    </ButtonContent>
</CnGalWebSite.Shared.MasaComponent.Shared.MaterialDesigns.MDMainInfoCard>
@code {
    [Parameter]
    public PeripheryViewModel Model { get; set; }
    [Parameter]
    public bool HiddenButton { get; set; }
    [Parameter]
    public bool ForceSmall { get; set; }

    [Parameter]
    public EventCallback<Operation> OnRevoke { get; set; }
    [Parameter]
    public EventCallback<bool> OnPreEdit { get; set; }
    [Parameter]
    public EventCallback<bool> CollectionChanged { get; set; }
}
