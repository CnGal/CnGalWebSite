@inject ToastService? ToastService


<style>
    .option-card {
        border: 1px solid var(--bs-secondary);
    }

        .option-card:hover {
            border: 1px solid var( --main-color);
        }

    .option-card-active {
        border: 1px solid var( --main-color) !important;
    }
    .option-card-show {
        border: 1px solid var(--bs-secondary);
    }
    .option-background {
        background-color: #EAEFF5;
    }
    .option-card-active .option-background {
        background-color: var(--main-color) !important;
        opacity: 0.5;
    }

</style>
<div>
    <div class="mb-2" style="display: flex; justify-content: space-between; align-items: flex-end; ">
        <div class="fw-bold " style="font-size:large">投票选项</div>
        <div  style="color:gray;">@( Model.Type==VoteType.MultipleChoice?(Model.MaximumSelectionCount==Model.MinimumSelectionCount?($"每人投{Model.MaximumSelectionCount}票"):($"最多投{Model.MaximumSelectionCount}票，最少投{Model.MinimumSelectionCount}票")):"每人只能投1票")</div>

    </div>
    @if (IsShowResult)
    {
        @foreach (var item in Model.Options)
        {
            <div class="@("mb-2 "+((Model.Options.MaxBy(s=>s.Count).Count==item.Count)?"option-card-active":"option-card-show"))" style="border-radius: 5px; ">
                <OptionAloneCard TotalCount="Model.Count" IsShowResult="IsShowResult" Model="item" IsSeleted="@(Model.UserSelections.Contains(item.OptionId))"
                                 ImageMinWidth="@ImageMinWidth"/>
            </div>
        }
    }
    else
    {
        <div>
            @foreach (var item in Model.Options)
            {
                <div class="@(Model.UserSelections.Contains(item.OptionId)?"mb-2 option-card-active":"mb-2 option-card")" style=" display: flex; flex-direction: row; border-radius: 5px; cursor:pointer"
                     @onclick="@(()=>OnSeletedItemChanged(item,Model.UserSelections.Contains(item.OptionId)?CheckboxState.UnChecked:CheckboxState.Checked))">
                    <div style=" display: flex; flex-direction: column; justify-content: center; " class=" ms-3">
                        <Checkbox TValue="string" State="@(Model.UserSelections.Contains(item.OptionId)?CheckboxState.Checked:CheckboxState.UnChecked)" OnStateChanged="@((e,o)=>OnSeletedItemChanged(item,e))"
                                  IsDisabled="@(Model.UserSelections.Contains(item.OptionId)?false:(Model.UserSelections.Count>=Model.MaximumSelectionCount))"></Checkbox>
                    </div>
                    <OptionAloneCard TotalCount="Model.Count" IsShowResult="IsShowResult" Model="item" IsSeleted="@(Model.UserSelections.Contains(item.OptionId))"
                                     ImageMinWidth="@ImageMinWidth"/>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public VoteViewModel Model { get; set; }
    [Parameter]
    public bool IsShowResult { get; set; }

    public string ImageMinWidth { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if(Model.Options.Any(s=>string.IsNullOrWhiteSpace(s.Image)==false))
        {
            if (Model.Entries.Any(s => s.Type == EntryType.Game || s.Type == EntryType.ProductionGroup) || Model.Artciles.Count > 0 || Model.Peripheries.Count > 0)
            {
                ImageMinWidth = "min-width:107px;";
            }
            else
            {

                ImageMinWidth = "min-width:50px;";
            }
        }
        else
        {

        }
    }

    public List<long> GetSeletedItems()
    {
        return Model.UserSelections;
    }

    public async Task OnSeletedItemChanged(VoteOptionViewModel item, CheckboxState state)
    {
        if (state == CheckboxState.Checked)
        {
            if (Model.Type == VoteType.SingleChoice)
            {
                Model.UserSelections.Clear();
            }
            else
            {
                if (Model.UserSelections.Count == Model.MaximumSelectionCount)
                {
                    await ToastService.Error($"最多选择{Model.MaximumSelectionCount}项", $"最多选择{Model.MaximumSelectionCount}项");
                    StateHasChanged();
                    return;
                }
            }
            Model.UserSelections.Add(item.OptionId);
        }
        else
        {
            Model.UserSelections.Remove(item.OptionId);
        }


    }
}
