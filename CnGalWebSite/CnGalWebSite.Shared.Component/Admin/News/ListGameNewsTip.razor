
@inject IHttpService _httpService
@inject ToastService? ToastService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject DialogService DialogService

<div>
    <Table TItem="ListGameNewAloneModel" IsPagination="true" PageItemsSource="@PageItems" OnQueryAsync="@OnQueryBasicAsync" SearchModel="@SearchModelUser" ShowSearch="true" @ref="TableRows"
           ShowExtendButtons="true" ExtendButtonColumnWidth="160" SelectedRows="@SelectedRows" IsMultipleSelect="true" IsStriped=true
            ShowToolbar="true" ShowDefaultButtons="false" FixedExtendButtonsColumn="true">
        <TableToolbarTemplate>
            <TableToolbarButton TItem="ListGameNewAloneModel" Color="Color.Success" Icon="fa fa-plus" Text="添加自定义动态" OnClickCallback="AddCustomNews" IsAsync="true" />
            <TableToolbarButton TItem="ListGameNewAloneModel" Color="Color.Primary" Icon="fa fa-plus" Text="添加微博动态" OnClickCallback="AddWeiboNews" IsAsync="true" />
            <TableToolbarButton TItem="ListGameNewAloneModel" Color="Color.Info" Icon="fa fa-map-signs" Text="关注" OnClickCallback="OnUnIgnoredClick" IsAsync="true" />
            <TableToolbarButton TItem="ListGameNewAloneModel" Color="Color.Danger" Icon="fa fa-unlink" Text="隐藏" OnClickCallback="OnIgnoredClick" IsAsync="true" />

        </TableToolbarTemplate>
        <TableColumns>
            <TableColumn @bind-Field="@context.Id" Sortable="true" Fixed="true" Width="50" />
            <TableColumn @bind-Field="@context.State" Sortable="true" Searchable="true" DefaultSort="true" DefaultSortOrder="SortOrder.Asc" TextWrap="true" Width="50" />
            <TableColumn @bind-Field="@context.Author" Searchable="true" TextWrap="true" Sortable="true" Width="120" />
            <TableColumn @bind-Field="@context.Title" Searchable="true" TextWrap="true" Width="200" />
            <TableColumn @bind-Field="@context.BriefIntroduction" Searchable="true" TextWrap="true" Width="200" />

            <TableColumn @bind-Field="@context.PublishTime" Sortable="true" TextWrap="true" Width="150" FormatString="yyyy-MM-dd HH:mm" />
        </TableColumns>
        <RowButtonTemplate>
            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-edit" Text="编辑" IsAsync="true" OnClickWithoutRender="@(() => EditGameNews(context.Id))" />

            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-arrow-up" Text="查看" IsAsync="true" OnClickWithoutRender="@(async () => EditArticle(context.ArticleId ))" IsShow="context.ArticleId != 0" />


            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-map-signs" Text="关注" IsAsync="true" OnClickWithoutRender="@(() => OnRowEditIsIgnoredClick(new long[] { context.Id }, false, true))" IsShow="context.State == GameNewsState.Ignore" />

            <TableCellButton AutoSelectedRowWhenClick="false" Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-unlink" Text="忽略" IsAsync="true" OnClickWithoutRender="@(() => OnRowEditIsIgnoredClick(new long[] { context.Id }, true, true))" IsShow="context.State != GameNewsState.Ignore" />

        </RowButtonTemplate>
    </Table>
</div>

<AddCustomNewsTip @ref="addCustomNewsTip" OnRefreshTable="RefreshTable" />
<AddWeiboNewsTip @ref="addWeiboNewsTip"  OnRefreshTable="RefreshTable" />
<EditGameNewsTip @ref="editGameNewsTip"  OnRefreshTable="RefreshTable" />

@code {
    [NotNull]
    private Table<ListGameNewAloneModel>? TableRows { get; set; }
    private List<ListGameNewAloneModel> SelectedRows { get; set; } = new();

    public ListGameNewsViewModel ListModel { get; set; } = new ListGameNewsViewModel { GameNews = new List<ListGameNewAloneModel>() };

    private ListGameNewAloneModel SearchModelUser { get; set; } = new ListGameNewAloneModel();

    private IEnumerable<int> PageItems => new int[] { 10, 20, 40, 80, 200, 5000 };
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    AddCustomNewsTip addCustomNewsTip;
    AddWeiboNewsTip addWeiboNewsTip;
    EditGameNewsTip editGameNewsTip;

    protected override async Task OnInitializedAsync()
    {
        try
        {

        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "无法获取动态数据");
        }

    }

    private async Task<QueryData<ListGameNewAloneModel>> OnQueryBasicAsync(QueryPageOptions options)
    {
        try
        {

            return await _httpService.PostAsync<GameNewsPagesInfor, QueryData<ListGameNewAloneModel>>("api/news/GetGameNewList", new GameNewsPagesInfor { SearchModel = SearchModelUser, Options = (QueryPageOptionsHelper)options });
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "无法获取动态列表");
            return new QueryData<ListGameNewAloneModel>();
        }
    }

    private async Task RefreshTable()
    {
        await TableRows.QueryAsync();
    }

    private void EditArticle(long id)
    {
        NavigationManager.NavigateTo( "/articles/index/" + id);

    }

    private async Task EditGameNews(long id)
    {

        if (editGameNewsTip != null)
        {
            await editGameNewsTip.Refresh(true, id);
        }
    }
    private async Task AddWeiboNews(IEnumerable<ListGameNewAloneModel> items)
    {
        if (addWeiboNewsTip != null)
        {
            await addWeiboNewsTip.Refresh(true, new AddWeiboNewsModel());
        }
    }
    private async Task AddCustomNews(IEnumerable<ListGameNewAloneModel> items)
    {
        if (addCustomNewsTip != null)
        {
            await addCustomNewsTip.Refresh(true, new EditGameNewsModel());
        }
    }
    private async Task OnRowEditIsIgnoredClick(long[] ids, bool isIgnore, bool showMessage)
    {
        string tempString = isIgnore == true ? "隐藏动态" : "关注动态";
        //调用API
        try
        {
            var obj = await _httpService.PostAsync<IgnoreGameNewsModel, Result>("api/news/IgnoreGameNews", new IgnoreGameNewsModel { Ids = ids, IsIgnore = isIgnore });



            if (obj.Successful == false)
            {
                await ToastService.Error(tempString + "失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success(tempString + "成功", tempString + "成功");
                    await TableRows.QueryAsync();
                }
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, tempString + "失败");
        }
    }

    private async Task OnIgnoredClick(IEnumerable<ListGameNewAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改动态状态", "请选中动态");
            return;
        }

        await OnRowEditIsIgnoredClick(items.Select(s => s.Id).ToArray(), true, false);

        await ToastService.Success("忽略成功", "忽略成功");
        await TableRows.QueryAsync();
    }
    private async Task OnUnIgnoredClick(IEnumerable<ListGameNewAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改动态状态", "请选中动态");
            return;
        }

        await OnRowEditIsIgnoredClick(items.Select(s => s.Id).ToArray(), false, false);

        await ToastService.Success("关注成功", "关注成功");
        await TableRows.QueryAsync();
    }


}
