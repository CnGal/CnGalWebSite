@inject ToastService ToastService
@inject IHttpService _httpService
@inject NavigationManager NavigationManager
@inject IDataCacheService _dataCacheService

<div class="@Class">
    <div class="rounded shadow-sm  bg-opacity rounded ps-4 pe-4 pt-3 pb-4">
        <div>
            <MCardText>
                <MTextField Label="附加贡献值" TValue="int" @bind-Value="Model.ContributionValue" Color="success"></MTextField>
                <MTextarea Label="批注" Rows="3" Color="success"
                           @bind-Value="Model.Comments">
                </MTextarea>

            </MCardText>
            <MCardActions>
                <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaButton Text="通过" IsAsync="true" OnClick="()=>OnExamine(true)" Icon="mdi-check" Color="success" />

                <MSpacer />
                <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaButton Text="驳回" IsAsync="true" OnClick="()=>OnExamine(false)" Icon="mdi-close" Color="error" />

            </MCardActions>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public ExamineViewModel Model { get; set; }
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }
    [Parameter]
    public string Class { get; set; }

    private async Task OnExamine(bool isPassed)
    {
        //上传
        try
        {
            if (Model.SensitiveWords != null && Model.SensitiveWords.Count != 0 && isPassed)
            {
                System.Text.StringBuilder sb = new System.Text.StringBuilder();
                foreach (var item in Model.SensitiveWords)
                {
                    if (Model.SensitiveWords.IndexOf(item) != Model.SensitiveWords.Count - 1)
                    {
                        sb.Append('，');
                    }

                    sb.Append(item);
                }

                //提醒敏感词
            }
            var obj = await _httpService.PostAsync<ExamineProcModel, Result>("api/examines/proc", new ExamineProcModel
            {
                Id = Model.Id,
                IsPassed = isPassed,
                Comments = Model.Comments,
                ContributionValue = Model.ContributionValue
            });
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("审核失败", obj.Error);
            }
            else
            {
                await ToastService.Success("审核成功", "对『" + (string.IsNullOrWhiteSpace(Model.ObjectName) ? ("Id：" + Model.ObjectId) : Model.ObjectName) + "』的审核已完成");
                //清除缓存
                if (_dataCacheService.UserContentCenterCatche?.PendingExamines != null)
                {
                    _dataCacheService.UserContentCenterCatche.PendingExamines.RemoveAll(s => s.Id == Model.Id);
                }
                NavigationManager.NavigateTo("/contentcenter");
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "审核失败");
        }
    }
}
