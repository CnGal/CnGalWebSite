@page "/user/space/{Id}/{Type}"
@page "/user/space/{Id}"

@inject IPageModelCatche<UserSpaceViewModel> _pageModelCatche
@inject NavigationManager NavigationManager
@implements IDisposable

@if (Model != null)
{
    <CnGalWebSite.ProjectSite.Shared.Components.Users.UserInfoCard Model="Model.UserInfo" />

    <MDCard Class="mb-4">
        <MTabs Value="Model.TabIndex" IconsAndText Grow CenterActive ValueChanged="TabValueChanged">
             <MTab Value="0">
                 企划<MIcon>@IconType.Project.ToIconString()</MIcon>
             </MTab>
             <MTab Value="1">
                 作品<MIcon>@IconType.Shape.ToIconString()</MIcon>
             </MTab>
             <MTab Value="2">
                 约稿<MIcon>mdi-script-text-outline</MIcon>
             </MTab>
         </MTabs>
     </MDCard>
    <MTabsItems Value="Model.TabIndex">
        <MTabItem Value="0">
            <CnGalWebSite.ProjectSite.Shared.Components.Users.MainCards.ProjectGroupCard Model="Model.projects"/>
        </MTabItem>
    </MTabsItems>

}
else
{
    <CnGalWebSite.Components.Progressings.ProgressingCard Page />
}


@code {
    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string Type { get; set; }

    UserSpaceViewModel Model;

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        NavigationManager.LocationChanged += OnLocationChanged;

        await Refresh();
    }

    public async Task Refresh()
    {
        try
        {
            Model = await _pageModelCatche.GetCache($"api/user/GetUserSpace?id={Id}");
            if (Type == "0")
            {
                Model.UserInfo.Type = UserType.Person;
            }
            else if (Type == "1")
            {
                Model.UserInfo.Type = UserType.Organization;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandler.ProcessError(ex, "获取用户空间数据失败");
        }
    }

    public async void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        await Refresh();
    }


    public void TabValueChanged(StringNumber index)
    {
        Model.TabIndex = index.ToInt32();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        GC.SuppressFinalize(this);
    }

}
