@inject NavigationManager NavigationManager
@inject IHttpService _httpService
@inject IPopupService PopupService
@inject IUserService _userService
@implements IDisposable

<MMenu OffsetY CloseOnContentClick="false" @bind-Value="menu">
     <ActivatorContent Context="m">
         <MTooltip Bottom>
            <ActivatorContent Context="c">
                @{
                    var attrs = new Dictionary<string, object>();
                    m.Attrs.ToList().ForEach(item => attrs[item.Key] = item.Value);
                    c.Attrs.ToList().ForEach(item => attrs[item.Key] = item.Value);
                }
                <MButton Icon Class="me-4" @attributes="@attrs">
                     <CnGalWebSite.Components.Images.MasaImage Style="width: 35px; border-radius: 50%; aspect-ratio: 1" Src="@_userService.UserInfo.Avatar" Alt="@_userService.UserInfo.Name" Type="ImageType.Avatar" />
                 </MButton>
             </ActivatorContent>
             <ChildContent>
                 <span>@GetName()</span>
             </ChildContent>
         </MTooltip>
     </ActivatorContent>

     <ChildContent>
         <MDCard Class="pa-3" Style="width:300px;flex-direction: column; align-items: center; ">
             <div class="d-flex" style="align-items: center; flex-direction: column; ">
                 <CnGalWebSite.Components.Images.MasaImage Src="@_userService.UserInfo.Avatar" Alt="@_userService.UserInfo.Name" Style="width:60px;border-radius:50%;" Type="ImageType.Avatar" />
                 <div style="display: flex; flex-direction: column; align-items: center; " class="mt-2">
                     <span class="title-large mb-1">@GetName()</span>
                     <MChip Small Color="primary">@_userService.UserInfo.Type.GetDisplayName()</MChip>
                 </div>
             </div>
             <MDivider Class="w-100 mt-2 mb-2"></MDivider>
             <div class="w-100" style="display: flex;flex-direction: column;">
                 <AuthorizeView Roles="Admin">
                     <Authorized>
                         <CnGalWebSite.Components.Buttons.MasaButton TextStyle Text="管理员后台" Icon="mdi-car-traction-control" Href="/admin" Color="secondary" />
                     </Authorized>
                </AuthorizeView>
                 <CnGalWebSite.Components.Buttons.MasaButton TextStyle Text="个人空间" Icon="mdi-star" Href="@($"/user/space/{_userService.UserInfo.Id}")" />
                 <CnGalWebSite.Components.Buttons.MasaButton TextStyle Text="编辑资料" Icon="@IconType.Edit.ToIconString()" Href="@($"/user/edit/{_userService.UserInfo.Id}")" />
                 <CnGalWebSite.Components.Buttons.MasaButton TextStyle Text="主题设置" Icon="@IconType.Setting.ToIconString()" OnClick="OnClickSetting" />
                 <CnGalWebSite.Components.Buttons.MasaButton TextStyle Text="退出登入" Icon="@IconType.Logout.ToIconString()" OnClick="_userService.Logout" />
            </div>
        </MDCard>
    </ChildContent>
</MMenu>

@if(_userService.UserInfo.Type== UserType.Person)
{
    <CnGalWebSite.Components.Buttons.MasaButton Icon="@IconType.Create.ToIconString()" Text="创建橱窗" Rounded Href="/stall/edit" />
}
else
{
    <CnGalWebSite.Components.Buttons.MasaButton Icon="@IconType.Create.ToIconString()" Text="创建企划" Rounded Href="/project/edit" />
}

<CnGalWebSite.ProjectSite.Shared.Components.Layout.SettingDialog @ref="settingDialog" />


 @code {
    private bool menu { get; set; }

    CnGalWebSite.ProjectSite.Shared.Components.Layout.SettingDialog settingDialog;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshUserInfor();
        _userService.UserInfoChanged -= OnUserInfoChanged;
        _userService.UserInfoChanged += OnUserInfoChanged;

    }

    public void OnUserInfoChanged()
    {
        StateHasChanged();
    }

    public async Task RefreshUserInfor()
    {
        var user = await authenticationStateTask;
        if (user.User.Identity.IsAuthenticated)
        {
            try
            {
                await _userService.Refresh();
            }
            catch(Exception ex)
            {
                await ErrorHandler.ProcessError(ex,"获取用户信息失败");
            }
        }
    }

    public string GetName()
    {
        if (_userService.UserInfo.Type == UserType.Organization)
        {
            return _userService.UserInfo.OrganizationName ?? _userService.UserInfo.Name;
        }
        else
        {
            return _userService.UserInfo.PersonName ?? _userService.UserInfo.Name;
        }
    }

    public void OnClickSetting()
    {
        settingDialog?.Refresh();
    }

    public void Dispose()
    {
        _userService.UserInfoChanged -= OnUserInfoChanged;
        GC.SuppressFinalize(this);
    }
}
