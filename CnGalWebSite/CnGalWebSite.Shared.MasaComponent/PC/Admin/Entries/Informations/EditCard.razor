@inject IHttpService _httpService
@inject IPopupService PopupService


@if (Model == null)
{
    <CnGalWebSite.Components.Progressings.ProgressingCard />
}
else
{
    <MDCard>
        <MCardTitle>
            @(Id==0? $"添加{_name}" : $"编辑{_name}")  @Model.Name
        </MCardTitle>
        <MCardText>
            Id：@Model.Id
        </MCardText>
        <MCardText>
            <MRow>
                <MCol Cols="12" Md="6">
                    <MTextField @bind-Value="Model.Name" Label="名称" />
                </MCol>
                <MCol Cols="12" Md="6">
                    <MTextField @bind-Value="Model.Icon" Label="图标" />
                </MCol>
                <MCol Cols="12" Md="6">
                    <MCheckbox @bind-Value="Model.IsHidden" Label="隐藏" TValue="bool" />
                </MCol>
                <MCol Cols="12">
                    <MTextField @bind-Value="Model.Description" Label="描述" />
                </MCol>
                <MCol Cols="12">
                    <CnGalWebSite.Components.Checkboxes.InputEnumCheckboxList Items="Model.Types" TValue="EntryType" Label="支持的词条类型" />
                </MCol>
            </MRow>
        </MCardText>
        <MCardActions>
            <MSpacer></MSpacer>
            <MButton Color="primary"
                     Text
                     OnClick="SaveEdit">
                <MIcon Left>mdi-check</MIcon>
                保存
            </MButton>
        </MCardActions>

    </MDCard>

}



@code {
    [Parameter]
    public long Id { get; set; }
    [Parameter]
    public EventCallback OnEdited { get; set; }

    EntryInformationTypeEditModel Model;

    private string _baseUrl = "api/entries/EditEntryInformationType";
    private string _name = "词条基础信息类型";


    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    public async Task Refresh()
    {
        try
        {
            Model = null;
            StateHasChanged();
            Model = Id == 0 ? new EntryInformationTypeEditModel() : await _httpService.GetAsync<EntryInformationTypeEditModel>($"{_baseUrl}?id={Id}");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandler.ProcessError(ex, $"获取{_name}信息失败");
        }
    }

    public async Task SaveEdit()
    {
        try
        {
            var result = await _httpService.PostAsync<EntryInformationTypeEditModel, Result>($"{_baseUrl}", Model);
            if (result.Successful)
            {
                if (!string.IsNullOrWhiteSpace(result.Error))
                {
                    await PopupService.ToastAsync(result.Error, AlertTypes.Success);
                }
                await OnEdited.InvokeAsync(Model);
                StateHasChanged();
            }
            else
            {
                await PopupService.ToastAsync(result.Error ?? "操作失败", AlertTypes.Error);
            }
        }
        catch (Exception ex)
        {
            await ErrorHandler.ProcessError(ex, Model.Id == 0 ? $"添加{_name}失败" : $"编辑{_name}信息失败");
        }

    }
}
