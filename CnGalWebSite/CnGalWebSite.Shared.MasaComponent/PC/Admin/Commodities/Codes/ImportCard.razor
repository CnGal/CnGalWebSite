@inject IHttpService _httpService
@inject IPopupService PopupService


@if (Model == null)
{
    <MDCard>
        <MCardText Class="pt-8 pb-8">
            <CnGalWebSite.Components.Progressings.ProgressingCard />
        </MCardText>
    </MDCard>
}
else
{
    <MDCard>
        <MCardTitle>
            批量导入兑换码
        </MCardTitle>
        <MCardText>
            Id：@Model.Id
        </MCardText>
        <MCardText>
            <MRow>
                <MCol Cols="12">
                    <MTextarea Rows="5" @bind-Value="Code" Label="兑换码（每行输入一个）" />
                </MCol>
                <MCol Cols="12" Md="6">
                    <CnGalWebSite.Components.Inputs.MasaSelecte @bind-Value="Model.Type" TValue="CommodityCodeType" Label="类型" />
                </MCol>
                <MCol Cols="12" Md="6">
                    <MTextField @bind-Value="Model.Count" Label="数量" />
                </MCol>
                <MCol Cols="12" Md="6">
                    <MCheckbox @bind-Value="Model.Hide" Label="隐藏" TValue="bool" />
                </MCol>
                <MCol Cols="12" Md="6">
                    <MCheckbox @bind-Value="Model.CanRedeemed" Label="可兑换" TValue="bool" />
                </MCol>
            </MRow>

        </MCardText>
        <MCardActions Class="pb-6 ps-6 pe-6">
            <MSpacer></MSpacer>
            <MButton Color="primary" Rounded OnClick="SaveEdit">
                <MIcon Left>mdi-check</MIcon>
                保存
            </MButton>
        </MCardActions>

    </MDCard>

}



@code {
    [Parameter]
    public EventCallback OnEdited { get; set; }

    CommodityCodeEditModel Model;

    private string _baseUrl = "api/commodities/";
    private string _name = "兑换码";


    string Code;


    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    public async Task Refresh()
    {
        try
        {
            Model = null;
            StateHasChanged();
            Model = new CommodityCodeEditModel();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandler.ProcessError(ex, $"获取{_name}信息失败");
        }
    }

    public async Task SaveEdit()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(Code))
            {
                return;
            }
            var codes = Code.Replace(" ", "").Replace('\r', '\n').Split('\n');
            foreach (var item in codes)
            {
                Model.Code = item;
                var result = await _httpService.PostAsync<CommodityCodeEditModel, Result>($"{_baseUrl}editcode", Model);
                if (result.Successful)
                {
                    if (!string.IsNullOrWhiteSpace(result.Error))
                    {
                        await PopupService.ToastAsync(result.Error, AlertTypes.Success);
                    }
                }
                else
                {
                    await PopupService.ToastAsync(result.Error ?? "操作失败", AlertTypes.Error);
                }
            }

            StateHasChanged();
            await OnEdited.InvokeAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandler.ProcessError(ex, Model.Id == 0 ? $"添加{_name}失败" : $"编辑{_name}信息失败");
        }

    }
}
