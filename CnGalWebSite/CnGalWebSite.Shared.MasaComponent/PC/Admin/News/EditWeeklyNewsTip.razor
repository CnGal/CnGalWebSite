@inject ToastService ToastService
@inject DialogService DialogService
@inject IHttpService _httpService
@inject NavigationManager NavigationManager
@inject IDataCacheService _dataCacheService


<MDialog @bind-Value="Dialog"
         Width="800">
    <MCard>
        <MCardTitle Class="text-h5">
            编辑周报
        </MCardTitle>
        <MCardText>
            主页一般情况下留空，会根据包含的动态进行动态解析生成，也可以用特殊语法控制显示
        </MCardText>
        <MCardText>
            @if (isReady)
            {
                <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaTitleContainer Icon="fa fa-fw fa fa-fw fa-home" Title="正文" Class="mb-4" Collapable Outline OutlineHead>
                    <div class="row">
                        <div class="col-12 col-sm-6">
                            <CnGalWebSite.Shared.MasaComponent.Shared.Editors.Buttons.ImageUploadButton ShowCropper @bind-ImagePath="@Model.MainPicture" Type="ImageAspectType._16_9" Text="上传主图"/>
                        </div>
                    </div>

                    <div class="form-group mt-4">
                        <div class="row">

                            <div class="form-group col-12">
                                <BootstrapInput @bind-Value="Model.Title" ShowLabel="true" />
                            </div>
                            <div class="form-group col-12">
                                <Textarea @bind-Value="Model.BriefIntroduction" rows="5" ShowLabel="true" />
                            </div>
                            <div class="form-group col-12">
                                <Textarea @bind-Value="Model.MainPage" rows="5" ShowLabel="true" />
                            </div>

                        </div>
                    </div>
                </CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaTitleContainer>
                <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaTitleContainer Icon="fa fa-fw fa-info-circle" Title="基本信息" Class="mb-4" Collapable Outline OutlineHead>
                    <div class="form-group">
                        <div class="row">
                            <div class="form-group col-12  col-sm-6">
                                <Select @bind-Value="Model.Type" ShowLabel="true"></Select>
                            </div>
                            <div class="form-group col-12  col-sm-6">
                                <DateTimePicker @bind-Value="@Model.PublishTime" ViewMode="DatePickerViewMode .DateTime" ShowLabel="true" />
                            </div>
                        </div>
                    </div>
                </CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaTitleContainer>
                <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaTitleContainer Icon="fa fa-fw fa-link" Title="包含的动态" Class="mb-4" Collapable Outline OutlineHead>
                    @foreach (var item in Model.News)
                    {
                        <MCheckbox @bind-Value="item.IsSelected" Label="@($"{item.NewsId}. {item.NewsTitle}")" Class="m-0" ></MCheckbox>
                    }

                    <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaButton Text="重置" IsAsync="true" OnClick="OnReset" Icon="mdi-refresh" Color="error" />

                </CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaTitleContainer>

            }
            else
            {
                <CnGalWebSite.Shared.MasaComponent.Shared.Cards.ProgressingCard />
            }

        </MCardText>
        <MCardActions Class="pb-6 pe-6 ps-6 pt-6">
            @if (isReady)
            {
                @if (Model.State == GameNewsState.Edit)
                {
                    <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaButton Text="预览" IsAsync="true" OnClick="OnPreview" Icon="mdi-view-day" TextStyle/>
                }
                else if (Model.State == GameNewsState.Publish && Model.ArticleId != null)
                {
                    <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaButton Text="查看" IsAsync="true" OnClick="OnLook" Icon="mdi-view-day"  TextStyle/>

                }
            }
            <MSpacer></MSpacer>
            @if (Model.State == GameNewsState.Edit)
            {
                <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaButton Text="发布" IsAsync="true" OnClick="OnPublish" Icon="mdi-publish" Class="me-2" TextStyle/>

            }


            <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaButton Text="保存" IsAsync="true" OnClick="OnSave" Icon="mdi-check" Color="success" TextStyle/>
        </MCardActions>
    </MCard>
</MDialog>

<PreviewArticleTip @ref="previewArticleTip" />

@code {
    [Parameter]
    public EventCallback OnRefreshTable { get; set; }

    private long Id { get; set; }


    private EditWeeklyNewsModel Model { get; set; } = new EditWeeklyNewsModel();

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    bool isReady = false;
    bool Dialog { get; set; }

    List<SelectedItem> GameNewsItems { get; set; } = new List<SelectedItem>();
    private List<string> GameNewsValue { get; set; } = new List<string>();

    PreviewArticleTip previewArticleTip;

    private async Task Init()
    {
        try
        {
            Model = await _httpService.GetAsync<EditWeeklyNewsModel>("api/news/EditWeeklyNews/" + Id);


            isReady = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取编辑周报信息失败");
        }
    }

    public async Task DataChanged()
    {
        isReady = false;
        StateHasChanged();
        await Init();
        await OnRefreshTable.InvokeAsync();

    }

    public async Task OnSave()
    {
        //上传
        try
        {
            //处理数据
            if (Model.News.Any(s => s.IsSelected) == false)
            {
                await ToastService.Error("保存周报数据失败", "至少选中一个动态");
                return;
            }

            var obj = await _httpService.PostAsync<EditWeeklyNewsModel, Result>("api/news/EditWeeklyNews", Model);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("保存周报数据失败", obj.Error);
            }
            else
            {
                await DataChanged();
                await ToastService.Success("保存周报数据成功", "保存周报数据成功");
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "保存周报数据失败");
        }
    }


    public async Task OnPublish()
    {
        //先保存
        await OnSave();
        try
        {
            var result = await _httpService.GetAsync<Result>("api/news/PublishWeelyNews/" + Id);
            if (result.Successful)
            {
                await ToastService.Success("发布周报成功", "发布周报成功");
                Dialog = false;
            }
            else
            {
                await ToastService.Error("发布周报失败", result.Error);
            }

        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "发布周报失败");
        }

    }


    public async Task OnPreview()
    {

        try
        {
            ArticleViewModel model = await _httpService.GetAsync<ArticleViewModel>("api/news/GetWeelyNewsPreview/" + Id);


            if (previewArticleTip != null)
            {
                previewArticleTip.Refresh(true, model);
            }

        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "获取周报预览数据失败");
        }

    }

    private async Task OnLook()
    {
        Dialog = false;
        NavigationManager.NavigateTo("/articles/index/" + Model.ArticleId);

    }
    public async Task OnReset()
    {
        try
        {
            var result = await _httpService.GetAsync<Result>("api/news/ResetWeelyNews/" + Id);
            if (result.Successful)
            {
                await DataChanged();
                await ToastService.Success("重置周报成功", "重置周报成功");

            }
            else
            {
                await ToastService.Error("重置周报失败", result.Error);
            }

        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "重置周报失败");
        }

    }

    public async Task Refresh( long id)
    {
        Dialog = true;
        Id = id;
        isReady = false;

        StateHasChanged();

        await Init();

        StateHasChanged();
    }

}
