@inject IHttpService _httpService
@inject IPopupService PopupService


@if (Model == null)
{
    <MDCard>
        <MCardText Class="pt-8 pb-8">
            <CnGalWebSite.Components.Progressings.ProgressingCard />
        </MCardText>
    </MDCard>
}
else
{
    <MDCard>
        <MCardTitle>
            @(Id==0? $"添加{_name}" : $"编辑{_name}")  @Model.Name
        </MCardTitle>
        <MCardText>
            Id：@Model.Id
        </MCardText>
        <MCardText>
            <MRow>
                <MCol Cols="12" Md="6">
                    <CnGalWebSite.Components.Inputs.MasaSelecte @bind-Value="Model.PlatformType" TValue="PublishPlatformType" Label="平台类型" />
                </MCol>
                <MCol Cols="12" Md="6">
                    <MTextField @bind-Value="Model.PlatformName" Label="平台名称" />
                </MCol>
                <MCol Cols="12" Md="6">
                    <MTextField @bind-Value="Model.Name" Label="名称" />
                </MCol>
                <MCol Cols="12" Md="6">
                    <MTextField @bind-Value="Model.Link" Label="链接" />
                </MCol>
                <MCol Cols="12" Md="6">
                    <CnGalWebSite.Components.Inputs.MasaSelecte @bind-Value="Model.State" TValue="StoreState" Label="状态" />
                </MCol>
                <MCol Cols="12" Md="6">
                    <CnGalWebSite.Components.Inputs.MasaSelecte @bind-Value="Model.CurrencyCode" TValue="CurrencyCode" Label="币种" />
                </MCol>
                <MCol Cols="12" Md="6">
                    <CnGalWebSite.Components.Inputs.MasaSelecte @bind-Value="Model.UpdateType" TValue="StoreUpdateType" Label="信息更新方式" />
                </MCol>

                <MCol Cols="12" Md="6">
                    <MTextField @bind-Value="Model.OriginalPrice" Label="原价" />
                </MCol>
                <MCol Cols="12" Md="6">
                    <MTextField @bind-Value="Model.PriceNow" Label="现价" />
                </MCol>
                <MCol Cols="12" Md="6">
                    <MTextField @bind-Value="Model.CutNow" Label="折扣" />
                </MCol>
                <MCol Cols="12" Md="6">
                    <MTextField @bind-Value="Model.PriceLowest" Label="史低" />
                </MCol>
                <MCol Cols="12" Md="6">
                    <MTextField @bind-Value="Model.CutLowest" Label="最高折扣" />
                </MCol>
                <MCol Cols="12" Md="6">
                    <MTextField @bind-Value="Model.PlayTime" Label="平均游玩时长 分钟" />
                </MCol>
                <MCol Cols="12" Md="6">
                    <MTextField @bind-Value="Model.EvaluationCount" Label="评测数" />
                </MCol>
                <MCol Cols="12" Md="6">
                    <MTextField @bind-Value="Model.RecommendationRate" Label="好评率" />
                </MCol>
                <MCol Cols="12" Md="6">
                    <MTextField @bind-Value="Model.EstimationOwnersMax" Label="估计拥有人数 上限" />
                </MCol>
                <MCol Cols="12" Md="6">
                    <MTextField @bind-Value="Model.EstimationOwnersMin" Label="估计拥有人数 下限" />
                </MCol>
                <MCol Cols="12" Md="6">
                    <MTextField @bind-Value="Model.EntryId" Label="关联的游戏" />
                </MCol>
            </MRow>

        </MCardText>
        <MCardActions Class="pb-6 ps-6 pe-6">
            <MSpacer></MSpacer>
            <MButton Color="primary" Rounded  OnClick="SaveEdit">
                <MIcon Left>mdi-check</MIcon>
                保存
            </MButton>
        </MCardActions>

    </MDCard>

}



@code {
    [Parameter]
    public long Id { get; set; }
    [Parameter]
    public EventCallback OnEdited { get; set; }

    StoreInfoEditModel Model;

    private string _baseUrl = "api/storeinfo/";
    private string _name = "商店信息";


    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    public async Task Refresh()
    {
        try
        {
            Model = null;
            StateHasChanged();
            Model = Id == 0 ? new StoreInfoEditModel() : await _httpService.GetAsync<StoreInfoEditModel>($"{_baseUrl}edit?id={Id}");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandler.ProcessError(ex, $"获取{_name}信息失败");
        }
    }

    public async Task SaveEdit()
    {
        try
        {
            var result = await _httpService.PostAsync<StoreInfoEditModel, Result>($"{_baseUrl}edit", Model);
            if (result.Successful)
            {
                if (!string.IsNullOrWhiteSpace(result.Error))
                {
                    await PopupService.ToastAsync(result.Error, AlertTypes.Success);
                }
                await OnEdited.InvokeAsync(Model);
                StateHasChanged();
            }
            else
            {
                await PopupService.ToastAsync(result.Error ?? "操作失败", AlertTypes.Error);
            }
        }
        catch (Exception ex)
        {
            await ErrorHandler.ProcessError(ex, Model.Id == 0 ? $"添加{_name}失败" : $"编辑{_name}信息失败");
        }

    }
}
