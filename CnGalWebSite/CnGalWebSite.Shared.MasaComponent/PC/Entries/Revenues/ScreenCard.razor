@inject NavigationManager NavigationManager


<MDCard Class="screen-card mb-4">
    <h1>国G销量年榜</h1>
    <div class="brief-card">
        <div class="line-1">● 榜单仅收录当年新发售，且在CnGal资料站中收录的作品</div>
        <div class="line-2">（P.S因为没收录的用SQL查不出来）</div>
        <div class="line-1">● CnGal资料站收录范围是</div>
        <div class="line-2">
            以美少女为主要角色或以美少女为主要攻略对象的冒险、视觉小说、养成、角色扮演等类型的游戏 <s>可爱的男孩子作品也可以收录</s> （汗流浃背了，兄弟)
        </div>
        <div class="line-2">
            由于CnGal人手有限，存在即便满足了定义但并未收录的作品
        </div>
        <div class="line-1">
            欢迎同好们一起参与到资料站编辑中
        </div>
        <div class="line-2">
            ● 销量数据源采用 (<a href="https://gamalytic.com/" target="_blank">Gamalytic</a> + <a href="https://vginsights.com/" target="_blank">VG Insights</a>) / 2 + <a href="https://www.taptap.cn/" target="_blank">TapTap</a> ，销售额是乘以原价获得的。所以肯定不准，图一乐就好。
        </div>
        <div class="line-2">
            ● 值得注意的是，销售额并不代表开发者实际所能获得的收入，Steam等平台会收取一定比例的分成（30%）。在这个分成基础上，发行商会再收取一定比例的分成。剩余的部分才是开发者实际所能获得的收入（支付给外包或是项目人员工资或是分成）。国G回本不易，开坑需谨慎。
        </div>
    </div>
    <div class="year-card">
        
        <MRadioGroup Value="Order" ValueChanged="OrderValueChanged" TValue="GameRevenueInfoOrderType" Label="排序" Dense HideDetails="true"
                     Row>
            <MRadio Label="销售额"
                    Value="@(GameRevenueInfoOrderType.Revenue)">
            </MRadio>
            <MRadio Label="销量"
                    Value="@(GameRevenueInfoOrderType.Owner)">
            </MRadio>
        </MRadioGroup>
        <MButtonGroup Tile Group Value="Year" ValueChanged="ValueChanged" Style=" display: flex; flex-wrap: wrap;" Color="primary">
            <MButton Class="m-0" Value="0">
                全部
            </MButton>
            @foreach (var item in Enumerable.Range(2014, DateTime.Now.Year - 2014 + 1))
            {
                <MButton Rounded Class="m-0" Value="@item">
                    @item
                </MButton>
            }
        </MButtonGroup>
    </div>
</MDCard>

@code {
    [Parameter]
    public int Year { get; set; }
    [Parameter]
    public GameRevenueInfoOrderType Order { get; set; }
    [Parameter]
    public EventCallback<int> YearChanged { get; set; }
    [Parameter]
    public EventCallback<GameRevenueInfoOrderType> OrderChanged { get; set; }


    public async Task ValueChanged(StringNumber year)
    {
        if (year == null)
        {
            year = 0;
        }
        await YearChanged.InvokeAsync(year.ToInt32());
    }

    public async Task OrderValueChanged(GameRevenueInfoOrderType order)
    {
        await OrderChanged.InvokeAsync(order);
    }
}
