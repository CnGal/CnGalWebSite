@inject IDataCacheService _dataCacheService
@inject NavigationManager NavigationManager
@inject IPageModelCatche<SteamGamesOverviewModel> _pageModelCatche
@inject IUserService _userService


<CnGalWebSite.Components.Containers.MiniModeContainer>
    @if (Anniversaries)
    {
        <MDCard Class="mb-4">
            <img src="https://tucang.cngal.top/api/image/show/78ca0c23ecec8f2bead78a13a65aabd4?https://image.cngal.org/images/upload/20241001/0a525bd1122dfd460cd277bb9e705be4f7a595d0.png" />
        </MDCard>
        <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaAlert Icon="@IconType.GameRecord.ToIconString()" Type="AlertTypes.Success" Class="mb-4" Color="secondary">
            绑定游戏库后，选择一款游戏留下你的游玩记录吧
        </CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaAlert>
        <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaAlert Type="AlertTypes.Info" Outline Color="primary">
            Steam个人资料隐私设置<strong>【游戏详情】</strong>需要选择<strong>【公开】</strong>哦，<a href="/articles/index/5" class="primary--text fw-bold">点击阅读教程</a>
        </CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaAlert>
    }

    @if (OverviewModel != null)
    {
        @if (!Anniversaries)
        {
            <div class="row">
                <div class="col-12 col-md-6">
                    <HasMostGamesUsersCard Model="OverviewModel.HasMostGamesUsers" />
                </div>
                <div class="col-12 col-md-6">
                    <PossessionRateHighestGamesCard Model="OverviewModel.PossessionRateHighestGames" />
                </div>
            </div>
        }
        <AuthorizeView>
            <Authorized>
                @if (Model != null)
                {
                    <div id="game-library-card">
                        <CnGalWebSite.Shared.MasaComponent.PC.Users.UserPlayedGameListView IsCurrentUser="true" SteamId="@Model.SteamId" UserId="@Model.Id" IsAnniversary TotalCount="OverviewModel.Count" UserInfoModel="Model" />
                    </div>
                }
            </Authorized>
            <NotAuthorized>
                <MDCard Style="display: flex; justify-content: center;align-items: center;" Class="pa-3 mb-4">
                    <CnGalWebSite.Components.Buttons.MasaButton Rounded Text="登入后分享游戏库" OnClick="_userService.Login" Icon="@IconType.Login.ToIconString()" />
                </MDCard>
            </NotAuthorized>
        </AuthorizeView>
    }
    else
    {
        <CnGalWebSite.Components.Progressings.ProgressingCard Page Fill Class="mb-4" />
    }

    @if (Anniversaries)
    {
        <CnGalWebSite.Shared.MasaComponent.PC.Home.Anniversaries.Ratings.RandomUserScoreGroup />
    }

    @if (isReady && !Anniversaries)
    {
        <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaAlert Type="AlertTypes.Success" Class="mb-4" Color="secondary">
            晒出的你的游戏库吧
        </CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaAlert>
        <CnGalWebSite.Shared.MasaComponent.PC.Comments.CommentTip CanComment CanDeleted="CanDeleted" ObjectId="3758" Type="CommentType.CommentArticle" Desc />
    }
</CnGalWebSite.Components.Containers.MiniModeContainer>


@code {
    [Parameter]
    public bool Anniversaries { get; set; }

    public PersonalSpaceViewModel Model { get; set; }

    SteamGamesOverviewModel OverviewModel;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    bool CanDeleted;
    bool isReady;

    protected override async Task OnInitializedAsync()
    {

        var user = await authenticationStateTask;
        if (user.User.Identity.IsAuthenticated)
        {
            try
            {
                string userId = userId = user.User.Claims.GetUserId();
                //获取用户基本信息
                Model = await _dataCacheService.PersonalSpaceDataCatche.GetCache(userId);
            }
            catch (Exception ex)
            {
                await ErrorHandler.ProcessError(ex, "获取用户信息失败");
            }
        }

        if (user.User.IsInRole("Admin"))
        {
            CanDeleted = true;
        }
        isReady = true;

        try
        {
            OverviewModel = await _pageModelCatche.GetCache("api/steam/GetSteamGamesOverview");
        }
        catch (Exception ex)
        {
            await ErrorHandler.ProcessError(ex, "获取所有Steam游戏数量失败");
        }
    }
}
