@inject NavigationManager NavigationManager
@inject IHttpService _httpService
@inject IDataCacheService _dataCacheService
@inject IPopupService PopupService


@if (string.IsNullOrWhiteSpace(Model.PhotoPath) == false)
{
    <CnGalWebSite.Shared.MasaComponent.Shared.Components.MiniModeContainer>
        <a class="d-flex on-surface-text" href="@("space/index/"+Model.Id)" style="align-items: center; flex-direction: column; ">
            <img src="@Model.PhotoPath" alt="@Model.Name" style="width:60px;border-radius:50%;" />
            <div style="display: flex; flex-direction: column; align-items: center; " class="mt-2">
                <span class="text-center title-large mb-1">@Model.Name</span>
                 <span class="label-large mb-1 text-center">@Model.PersonalSignature</span>
                <CnGalWebSite.Shared.MasaComponent.Shared.Cards.Ranks.RanksViewCard Model="Model.Ranks" ForceDisplayBadge Center />

             </div>
        </a>
        <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaDivider Class="mt-2 mb-2"/>
    </CnGalWebSite.Shared.MasaComponent.Shared.Components.MiniModeContainer>

    <MButton Text Block Color="primary" Left OnClick="@(()=>OnClickUrl("/"))">
        <MIcon Left>mdi-home</MIcon>
        主页
    </MButton>
    @if (Admin == false)
    {
        <CnGalWebSite.Shared.MasaComponent.Shared.Components.MiniModeContainer>
            <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaDivider Class="mt-2 mb-2" />

            <MButton Text Block Color="primary" OnClick="@(()=>OnClickUrl("/task"))">
                 <MIcon Left>@IconType.Task.ToIconString() </MIcon>
             每日任务
         </MButton>

            <AuthorizeView Roles="Admin">
                <Authorized>
                     <MButton Text Block Color="primary" OnClick="@(()=>OnClickUrl("/admin/index"))">
                        <MIcon Left>mdi-car-traction-control</MIcon>
                        管理员后台
                    </MButton>
                </Authorized>
            </AuthorizeView>
            <MButton Text Block Color="primary" OnClick="@(()=>OnClickUrl("/contentcenter"))">
                <MIcon Left>mdi-database-edit </MIcon>
                内容中心
            </MButton>

            <MButton Text Block Color="primary" Left OnClick="@(()=>OnClickUrl("/space/index/" + _dataCacheService.UserInfor.Id))">
                <MIcon Left>mdi-star</MIcon>
                个人空间
            </MButton>
            <MButton Text Block Color="primary" Left OnClick="@(()=>OnClickUrl("/space/editdata"))">
                <MIcon Left>mdi-pencil</MIcon>
                编辑资料
            </MButton>
            <MButton Text Block Color="primary" Left OnClick="@(()=>OnClickUrl("/space/messages"))">
                <MIcon Left>mdi-comment-text-multiple  </MIcon>
                消息通知
            </MButton>
            <MButton Text Block Color="primary" Left OnClick="OnClickCreate">
                <MIcon Left>mdi-plus  </MIcon>
                创建投稿
            </MButton>
            <MButton Text Block Color="primary" OnClick="BeginSignOut">
                <MIcon Left>mdi-logout</MIcon>
                退出登入
            </MButton>

         <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaDivider Class="mt-2 mb-2" />
     </CnGalWebSite.Shared.MasaComponent.Shared.Components.MiniModeContainer>


        <MButton Text Block Color="primary" Left OnClick="@(()=>OnClickUrl("/birthday"))">
            <MIcon Left>mdi-cake-variant</MIcon>
            生日日历
        </MButton>
        <MButton Text Block Color="primary" Left OnClick="OnClickSetting">
            <MIcon Left>mdi-cog</MIcon>
            主题设置
        </MButton>


        <MButton Text Block Color="primary" Left OnClick="@(()=>OnClickUrl("/about"))">
            <MIcon Left>mdi-information-outline</MIcon>
            关于我们
        </MButton>

        <CreateObjectCard @ref="createObjectCard" />
    }



}
@code {

    [Parameter]
    public string Class { get; set; }
    [Parameter]
    public EventCallback OnClickSetting { get; set; }
    [Parameter]
    public EventCallback OnClosed { get; set; }
    [Parameter]
    public EventCallback OnRefresh { get; set; }
    [Parameter]
    public bool Admin { get; set; }

    public UserInforViewModel Model { get; set; } = new UserInforViewModel();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    CreateObjectCard createObjectCard;

    protected override async Task OnInitializedAsync()
    {
        await RefreshUserInfor();
    }


    public async Task RefreshUserInfor()
    {
        var user = await authenticationStateTask;
        if (user.User.Identity.IsAuthenticated)
        {
            try
            {
                string userId = user.User.Claims.GetUserId();


                if (string.IsNullOrWhiteSpace(userId) == false)
                {
                    Model = await _httpService.GetAsync<UserInforViewModel>("api/space/GetUserData/" + userId);


                    _dataCacheService.UserInfor = Model;
                    StateHasChanged();
                }

            }
            catch
            {
                await PopupService.ToastErrorAsync("获取用户信息失败", "未知错误，请在确保网络正常后联系开发人员");
            }
        }
    }

    private async Task OnClickUrl(string url)
    {
        NavigationManager.NavigateTo(url);
        await OnClosed.InvokeAsync();
    }

    private async Task OnClickCreate()
    {
        if (createObjectCard != null)
        {
            await createObjectCard.Refresh(true);
        }
        await OnClosed.InvokeAsync();
    }
    private void BeginSignOut()
    {
        @if (ToolHelper.IsSSR)
        {
            NavigationManager.NavigateTo("Account/Logout", true);
        }
        else
        {
            NavigationManager.NavigateToLogout("authentication/logout", "/");
        }
    }

}
