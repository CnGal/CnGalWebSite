@inject IHttpService _httpService
@inject IServiceProvider Provider
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IPopupService PopupService
@inject DialogService DialogService

<style>
    .table-wrapper {
        min-height: 400px;
    }
</style>
<Table TItem="StaffModel" @ref="StaffsTable"
       IsPagination="true" PageItemsSource="@PageItemsSource"
       IsStriped="true" IsBordered="true" IsMultipleSelect="true" ShowSearch="true"
       ShowToolbar="true" ShowExtendButtons="true" ShowSkeleton="true" IsExcel
       OnQueryAsync="@OnQueryAsync" EditMode="EditMode.InCell" ShowToastAfterSaveOrDeleteModel="false"
       OnAddAsync="@OnAddAsync" OnSaveAsync="@OnSaveAsync" OnDeleteAsync="@OnDeleteAsync">
    <TableToolbarTemplate>
        <TableToolbarButton TItem="StaffModel" Color="Color.Primary" Icon="fa fa-upload" Text="批量导入" OnClickCallback="OnImportClick" />
    </TableToolbarTemplate>

    <TableColumns>
        <TableColumn @bind-Field="@context.Modifier" Filterable="true" Sortable="true" />
        <TableColumn @bind-Field="@context.PositionOfficial" Filterable="true" Sortable="true" DefaultSort="true" />
        <TableColumn @bind-Field="@context.Name" Filterable="true" Sortable="true" Searchable="true" />
        <TableColumn @bind-Field="@context.PositionGeneral" Sortable="true" />
        <TableColumn @bind-Field="@context.SubordinateOrganization" Filterable="true" Sortable="true" Searchable="true" />
        <TableColumn @bind-Field="@context.CustomName" Filterable="true" Sortable="true" Searchable="true" />
    </TableColumns>
</Table>


@code{
    [Parameter]
    public List<StaffModel> Staffs { get; set; }

    private IEnumerable<int> PageItemsSource => new int[] { 10, 20, 40, 80, 200, 1000 };

    private bool isReady = false;
    private static readonly ConcurrentDictionary<Type, Func<IEnumerable<StaffModel>, string, BootstrapBlazor.Components.SortOrder, IEnumerable<StaffModel>>> SortLambdaCacheBasic = new();
    private StaffModel SearchModelBasic { get; set; } = new StaffModel();

    Table<StaffModel> StaffsTable;


    protected override async Task OnInitializedAsync()
    {

    }

    private Task<StaffModel> OnAddAsync()
    {
        var foo = new StaffModel();
        Staffs.Insert(0, foo);

        return Task.FromResult(foo);
    }

    private async Task<bool> OnSaveAsync(StaffModel item, ItemChangedType type)
    {
        if (item.Id == 0)
        {
            if (Staffs.Count == 0)
            {
                item.Id = 1;
            }
            else
            {
                item.Id = Staffs.Max(i => i.Id) + 1;
            }
        }


        if (Staffs.Where(s => s.Id != item.Id).Any(s => s.Name == item.Name && s.Modifier == item.Modifier && s.PositionOfficial == item.PositionOfficial))
        {
            await PopupService.EnqueueSnackbarAsync($"已存在【{item.Modifier}{item.PositionOfficial}：{item.Name}】", AlertTypes.Error);
            return false;
        }


        return true;
    }

    private Task<bool> OnDeleteAsync(IEnumerable<StaffModel> items)
    {
        Staffs.RemoveAll(i => items.Contains(i));
        return Task.FromResult(true);
    }


    private Task<QueryData<StaffModel>> OnQueryAsync(QueryPageOptions options)
    {
        IEnumerable<StaffModel> items = Staffs;
        // 处理高级搜索
        if (!string.IsNullOrWhiteSpace(SearchModelBasic.Name))
        {
            items = items.Where(item => item.Name?.Contains(SearchModelBasic.Name, StringComparison.OrdinalIgnoreCase) ?? false);
        }

        if (!string.IsNullOrWhiteSpace(SearchModelBasic.PositionOfficial))
        {
            items = items.Where(item => item.PositionOfficial?.Contains(SearchModelBasic.PositionOfficial, StringComparison.OrdinalIgnoreCase) ?? false);
        }
        if (!string.IsNullOrWhiteSpace(SearchModelBasic.CustomName))
        {
            items = items.Where(item => item.CustomName?.Contains(SearchModelBasic.CustomName, StringComparison.OrdinalIgnoreCase) ?? false);
        }
        if (!string.IsNullOrWhiteSpace(SearchModelBasic.Modifier))
        {
            items = items.Where(item => item.Modifier?.Contains(SearchModelBasic.Modifier, StringComparison.OrdinalIgnoreCase) ?? false);
        }
        if (!string.IsNullOrWhiteSpace(SearchModelBasic.SubordinateOrganization))
        {
            items = items.Where(item => item.SubordinateOrganization?.Contains(SearchModelBasic.SubordinateOrganization, StringComparison.OrdinalIgnoreCase) ?? false);
        }

        // 处理 Searchable=true 列与 SeachText 模糊搜索
        if (options.Searchs.Any())
        {
            items = items.Where(options.Searchs.GetFilterFunc<StaffModel>(FilterLogic.Or));
        }
        else
        {
            // 处理 SearchText 模糊搜索
            if (!string.IsNullOrWhiteSpace(options.SearchText))
            {
                items = items.Where(item => (item.Name?.Contains(options.SearchText) ?? false)
                             || (item.PositionOfficial?.Contains(options.SearchText) ?? false)
                             || (item.CustomName?.Contains(options.SearchText) ?? false)
                             || (item.Modifier?.Contains(options.SearchText) ?? false)
                             || (item.SubordinateOrganization?.Contains(options.SearchText) ?? false));
            }
        }
        // 过滤
        var isFiltered = false;
        if (options.Filters.Any())
        {
            items = items.Where(options.Filters.GetFilterFunc<StaffModel>());
            isFiltered = true;
        }

        // 排序
        var isSorted = false;
        if (!string.IsNullOrWhiteSpace(options.SortName))
        {
            // 外部未进行排序，内部自动进行排序处理
            var invoker = SortLambdaCacheBasic.GetOrAdd(typeof(StaffModel), key => LambdaExtensions.GetSortLambda<StaffModel>().Compile());
            items = invoker(items, options.SortName, (BootstrapBlazor.Components.SortOrder)options.SortOrder);
            isSorted = true;
        }

        // 设置记录总数
        var total = items.Count();

        // 内存分页
        items = items.Skip((options.PageIndex - 1) * options.PageItems).Take(options.PageItems).ToList();

        return Task.FromResult(new QueryData<StaffModel>()
        {
            Items = items,
            TotalCount = total,
            IsSorted = isSorted,
            IsFiltered = isFiltered
        });
    }


    public async Task OnImportClick(IEnumerable<StaffModel> items)
    {
        var option = new DialogOption()
        {
            Title = "批量导入Staff",
            ShowCloseButton = false
        };
        option.BodyTemplate = BootstrapDynamicComponent.CreateComponent<BatchImportStaffsTip>(new Dictionary<string, object>
        {
            [nameof(BatchImportStaffsTip.OnAddStaffs)] = EventCallback.Factory.Create<List<StaffModel>>(this, async (model) => await OnImported(model)),
            [nameof(BatchImportStaffsTip.OnClickClose)] = EventCallback.Factory.Create(this, async () => await option.Dialog.Close()),
        }).Render();
        await DialogService.Show(option);
    }

    public async Task OnImported(List<StaffModel> model)
    {
        //检查是否符合要求
        foreach (var item in model)
        {
            Staffs.Add(item);
            await OnSaveAsync(item, ItemChangedType.Add);
        }
        if (StaffsTable != null)
        {
            await StaffsTable.QueryAsync();
        }
        StateHasChanged();
    }
}
