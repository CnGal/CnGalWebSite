@inject IDataCacheService _dataCacheService


<MDialog Value="Dialog" ValueChanged="ValueChanged"
         Width="600">
    <MDCard>
        <MCardTitle Class="text-h5">
            编辑音频
        </MCardTitle>
        <MCardText>
            音频的名称和简介会在词条页面展示，优先级会影响展示顺序
        </MCardText>
        <MCardText>
            <CnGalWebSite.Components.Containers.MasaTitleContainer Icon="fa fa-fw fa fa-fw fa-image" Title="图片" Class="mb-4" Collapable Outline OutlineHead>
                <div class="row">
                    <div class="col-12 col-sm-6 mb-4">
                        <CnGalWebSite.Components.Images.UploadButton ShowCropper @bind-ImagePath="@Model.Thumbnail" Type="ImageAspectType._1_1" Text="上传缩略图"/>
                    </div>
                </div>
            </CnGalWebSite.Components.Containers.MasaTitleContainer>
            <CnGalWebSite.Components.Containers.MasaTitleContainer Icon="fa fa-fw fa fa-fw fa-home" Title="信息" Class="mb-4" Collapable Outline OutlineHead>

                <CnGalWebSite.Shared.MasaComponent.Shared.Components.MasaAudio Src="@Model.Url" Class="mb-2 w-100" />
                <CnGalWebSite.Shared.MasaComponent.Shared.Editors.Buttons.AudioUploadButton Multiple="false" OnUploaded="OnUploaded" Class="mb-4" Text="重新上传音频" Icon="mdi-refresh" />
                <div class="row">
                    <div class="col-12  col-sm-6">
                        <MTextField @bind-Value="Model.Name" Label="名称"  />
                    </div>
                    <div class="col-12  col-sm-6">
                        <MTextField @bind-Value="Model.Priority" Label="优先级"  />
                    </div>
                    <div class="col-12">
                        <MTextarea Rows="3" @bind-Value="Model.BriefIntroduction" Label="简介"  />
                    </div>
                </div>
            </CnGalWebSite.Components.Containers.MasaTitleContainer>
           

        </MCardText>
    </MDCard>
</MDialog>
@code {

    private EditAudioAloneModel Model { get; set; }
    [Parameter]
    public EventCallback OnChanged { get; set; }

    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    bool Dialog { get; set; }

    public void OnUploaded(UploadResult result)
    {
        Model.Url = result.Url;
        Model.Duration = result.Duration??new TimeSpan(0);


        StateHasChanged();
        
    }
    public void Refresh(EditAudioAloneModel model)
    {
        Model = model;
        Dialog = true;

        StateHasChanged();
        
    }

    public async Task ValueChanged(bool dialog)
    {
        Dialog = dialog;
        StateHasChanged();
        await OnChanged.InvokeAsync();
    }

}
