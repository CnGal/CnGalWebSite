@inject IDataCacheService _dataCacheService
@inject IMauiService _mauiService
@inject ILocalStorageService _localStorage
@inject IEventService _eventService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject MasaBlazor MasaBlazor
@implements IDisposable



<!--主题颜色-->
<link rel="stylesheet" href="@($"_content/CnGalWebSite.Shared/css/material-theme/color-tokens/color-{_dataCacheService.ThemeSetting.ThemeColor}-tokens.css")">

<!--自定义样式-->
<link rel="stylesheet" href="_content/CnGalWebSite.Shared/css/bundle.css">

@if (_dataCacheService.IsApp)
{
    <!--移动端-->
    <link rel="stylesheet" href="_content/CnGalWebSite.Shared/css/app/bundle-app.css" />
}
else
{
    <!--桌面端-->
    <link rel="stylesheet" href="_content/CnGalWebSite.Shared/css/pc/bundle-pc.css" />
}

<!--主题模式-->

@if (_dataCacheService.ThemeSetting.ThemeMode== ThemeMode.System)
{
    <!--跟随系统-->
    <link rel="stylesheet" href="_content/CnGalWebSite.Shared/css/theme.css" />
}
else if (_dataCacheService.ThemeSetting.ThemeMode == ThemeMode.Dark)
{
    <!--暗色模式-->
    <link rel="stylesheet" href="_content/CnGalWebSite.Shared/css/dark/bundle-dark.css" />
    <link rel="stylesheet" href="https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/highlight.js/10.6.0/styles/vs2015.min.css" />
}
else if (_dataCacheService.ThemeSetting.ThemeMode == ThemeMode.Light)
{
    <!--亮色模式-->
    <link rel="stylesheet" href="_content/CnGalWebSite.Shared/css/light/bundle-light.css" />
    <link rel="stylesheet" href="https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/highlight.js/10.6.0/styles/atom-one-light.min.css" />
}

<!--开放搜索-->
<link rel="search" type="application/opensearchdescription+xml" target="_blank" class="external-link" href="https://app.cngal.org/_content/CnGalWebSite.Shared/OpenSearch.xml" title="CnGal资料站" />

<!--字体-->
@if (string.IsNullOrWhiteSpace(_dataCacheService.ThemeSetting.FontFamily) == false)
{
    <style>
        body {
            font-family: @_dataCacheService.ThemeSetting.FontFamily !important;
        }
    </style>
}

<!--无边距-->
@if (_dataCacheService.ThemeSetting.IsFullScreen)
{
    <style>
        .variable.container {
            max-width: none;
            padding: 0;
        }
    </style>
}
@code {

    [Parameter]
    public EventCallback OnTransparentChanged { get; set; }

    ThemeModel _themeSetting = new ThemeModel();


    protected override void OnInitialized()
    {
        _eventService.SavaTheme -= OnSavaTheme;
        _eventService.SavaTheme += OnSavaTheme;

        _eventService.CleanTempEffectTheme -= OnCleanTempEffectTheme;
        _eventService.CleanTempEffectTheme += OnCleanTempEffectTheme;

        _eventService.TempEffectTheme -= OnTempEffectTheme;
        _eventService.TempEffectTheme += OnTempEffectTheme;
    }

    public async void OnTempEffectTheme()
    {
        await Refresh();
    }

    public async void OnSavaTheme()
    {
        await SaveTheme();
        await Refresh();
    }
    public async void OnCleanTempEffectTheme()
    {
        _dataCacheService.ThemeSetting.IsFullScreen = false;
        await LoadTheme();
        await Refresh();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //读取本地主题配置
            await LoadTheme();
            //刷新
            await Refresh();
        }
    }

    /// <summary>
    /// 读取本地主题配置
    /// </summary>
    /// <returns></returns>
    public async Task LoadTheme()
    {
        _dataCacheService.ThemeSetting = await _localStorage.GetItemAsync<ThemeModel>("theme");
        await SaveTheme();
    }

    /// <summary>
    /// 检查主题设置
    /// </summary>
    public async void CheckTheme()
    {
        if (_dataCacheService.ThemeSetting == null)
        {
            _dataCacheService.ThemeSetting = new ThemeModel();
        }
        if(ThemeModel.AvailableColors.Contains(_dataCacheService.ThemeSetting.ThemeColor)==false)
        {
            _dataCacheService.ThemeSetting.ThemeColor = ThemeModel.DefaultThemeColor;
        }
        //获取系统主题
        if (_dataCacheService.ThemeSetting.ThemeMode== ThemeMode.System)
        {
            _dataCacheService.ThemeSetting.IsDark = await JS.InvokeAsync<bool>("checkSystemThemeIsDark");
        }
    }

    /// <summary>
    /// 保存本地主题配置
    /// </summary>
    /// <returns></returns>
    public async Task SaveTheme()
    {
        CheckTheme();
        await _localStorage.SetItemAsync("theme", _dataCacheService.ThemeSetting);
    }

    /// <summary>
    /// 刷新
    /// </summary>
    public async Task Refresh()
    {
        // if (_dataCacheService.ThemeSetting == null)
        // {
        //     return;
        // }
        // //检查是否修改配置
        // if (_themeSetting.DeepEquals(_dataCacheService.ThemeSetting))
        // {
        //     return;
        // }

        // //刷新默认主题色
        // if (MasaBlazor.Theme.Themes.Light.Primary != _dataCacheService.ThemeSetting.ThemeColor)
        // {
        //     //重新赋值
        //     var theme = MasaBlazor.Theme;
        //     // theme.Themes.Light.Primary = colorMain;
        //     MasaBlazor.Theme = theme;
        //     // MasaBlazor.ToggleTheme();
        //     // MasaBlazor.ToggleTheme();
        // }



        // //通知主题模式切换
        // if (MasaBlazor.Theme.Dark != _dataCacheService.ThemeSetting.IsDark)
        // {
        //     //重新赋值
        //     var theme = MasaBlazor.Theme;
        //     theme.Dark = _dataCacheService.ThemeSetting.IsDark;
        //     MasaBlazor.Theme = theme;
        //     // MasaBlazor.ToggleTheme();
        //     // MasaBlazor.ToggleTheme();

        //     //await _dataCacheService.OnRefreshRequsted(null);
        // }

        // if (!ToolHelper.IsSSR)
        // {
        //     //await Task.Delay(10000);
        // }
        //缓存配置
        // _themeSetting.SynchronizationProperties(_dataCacheService.ThemeSetting);
        await InvokeAsync(StateHasChanged);
    }

    #region 释放实例
    public void Dispose()
    {
        _eventService.SavaTheme -= OnSavaTheme;
        _eventService.TempEffectTheme -= OnTempEffectTheme;
        _eventService.CleanTempEffectTheme -= OnCleanTempEffectTheme;
        GC.SuppressFinalize(this);
    }
    #endregion
}
