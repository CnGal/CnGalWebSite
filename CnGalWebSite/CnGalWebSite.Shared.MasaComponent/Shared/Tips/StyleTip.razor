@inject IDataCacheService _dataCacheService
@inject IMauiService _mauiService
@inject ILocalStorageService _localStorage
@inject IEventService _eventService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@implements IDisposable

<!--自定义样式-->
<link rel="stylesheet" href="_content/CnGalWebSite.Shared/css/bundle.css">

@if (_dataCacheService.IsApp)
{
    <!--移动端-->
    <link rel="stylesheet" href="_content/CnGalWebSite.Shared/css/app/bundle-app.css" />
}
else
{
    <!--桌面端-->
    <link rel="stylesheet" href="_content/CnGalWebSite.Shared/css/pc/bundle-pc.css" />
}

@if (_dataCacheService.ThemeSetting.IsDark)
{
     <!--暗色模式-->
    <link rel="stylesheet" href="_content/CnGalWebSite.Shared/css/dark/bundle-dark.css" />
    <link rel="stylesheet" href="https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/highlight.js/10.6.0/styles/atom-one-light.min.css" />
}
else
{
     <!--亮色模式-->
    <link rel="stylesheet" href="_content/CnGalWebSite.Shared/css/light/bundle-light.css" />
    <link rel="stylesheet" href="https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/highlight.js/10.6.0/styles/vs2015.min.css" />
}

<!--开放搜索-->
<link rel="search" type="application/opensearchdescription+xml" target="_blank" class="external-link" href="https://app.cngal.org/_content/CnGalWebSite.Shared/OpenSearch.xml" title="CnGal资料站" />

<!--字体-->
@if(string.IsNullOrWhiteSpace(_dataCacheService.ThemeSetting.FontFamily)==false)
{
    <style>
        body {
            font-family: @_dataCacheService.ThemeSetting.FontFamily !important;
        }
    </style>
}

@code {

    public string colorMain;
    public string colorHover;
    public string colorActive;

    public string DefaultTheme = "pink lighten-2";
    private string _theme;
    ThemeModel _themeSetting = new ThemeModel();

    [Parameter]
    public EventCallback OnTransparentChanged { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [Inject]
    public MasaBlazor MasaBlazor { get; set; }

    protected override void OnInitialized()
    {
        if (DateTime.Now.ToCstTime().Day == 1 && DateTime.Now.ToCstTime().Month == 4)
        {
            DefaultTheme = "green";
        }

        ProcColor(DefaultTheme);
        _dataCacheService.ThemeSetting.Theme = DefaultTheme;

        _eventService.SavaTheme -= OnSavaTheme;
        _eventService.SavaTheme += OnSavaTheme;

        _eventService.CleanTempEffectTheme -= OnCleanTempEffectTheme;
        _eventService.CleanTempEffectTheme += OnCleanTempEffectTheme;

        _eventService.TempEffectTheme -= OnTempEffectTheme;
        _eventService.TempEffectTheme += OnTempEffectTheme;
    }

    public async void OnTempEffectTheme()
    {
        await Refresh();
    }

    public async void OnSavaTheme()
    {
        await SaveTheme();
        await Refresh();
    }
    public async void OnCleanTempEffectTheme()
    {
        _dataCacheService.ThemeSetting.IsFullScreen = false;
        await LoadTheme();
        await Refresh();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //读取本地主题配置
            await LoadTheme();
            //刷新
            await Refresh();
        }
    }

    /// <summary>
    /// 读取本地主题配置
    /// </summary>
    /// <returns></returns>
    public async Task LoadTheme()
    {
        var isFullScreen = _dataCacheService.ThemeSetting?.IsFullScreen ?? false;
        _dataCacheService.ThemeSetting = await _localStorage.GetItemAsync<ThemeModel>("theme");

        if (_dataCacheService.ThemeSetting == null)
        {
            _dataCacheService.ThemeSetting = new ThemeModel();
            await SaveTheme();
        }
        _dataCacheService.ThemeSetting.IsFullScreen = isFullScreen;

        //消除愚人节颜色的影响
        if (_dataCacheService.ThemeSetting.Theme == "green")
        {
            _dataCacheService.ThemeSetting.Theme = DefaultTheme;
        }

        //若为默认主题 则设置主题色

        if (ThemeModel.DefaultTheme == _dataCacheService.ThemeSetting.Theme && _dataCacheService.ThemeSetting.IsDark == false)
        {
            _theme = _dataCacheService.ThemeSetting.Theme;
            _dataCacheService.ThemeSetting.Theme = DefaultTheme;
        }
    }

    public void ProcColor(string theme)
    {
        switch (theme)
        {
            case "red":
                colorMain = "#F44336";
                colorHover = "#FBB3AC";
                colorActive = "#B71C1C";
                break;
            case "pink lighten-2":
                colorMain = "#F06292";
                colorHover = "#F9B7CE";
                colorActive = "#880E4F";
                break;
            case "purple":
                colorMain = "#9C27B0";
                colorHover = "#DFA2EA";
                colorActive = "#4A148C";
                break;
            case "deep-purple":
                colorMain = "#673AB7";
                colorHover = "#C7B6E7";
                colorActive = "#311B92";
                break;
            case "indigo":
                colorMain = "#3F51B5";
                colorHover = "#B8BEE7";
                colorActive = "#1A237E";
                break;
            case "blue":
                colorMain = "#2196F3";
                colorHover = "#B7DCFB";
                colorActive = "#0D47A1";
                break;
            case "light-blue":
                colorMain = "#03A9F4";
                colorHover = "#BEEBFE";
                colorActive = "#01579B";
                break;
            case "cyan":
                colorMain = "#00BCD4";
                colorHover = "#BDF7FF";
                colorActive = "#006064";
                break;
            case "teal":
                colorMain = "#009688";
                colorHover = "#B9F9D2";
                colorActive = "#004D40";
                break;
            case "green":
                colorMain = "#4CAF50";
                colorHover = "#C6E6C8";
                colorActive = "#1B5E20";
                break;
            case "light-green":
                colorMain = "#8BC34A";
                colorHover = "#D8EBC2";
                colorActive = "#33691E";
                break;
            case "lime":
                colorMain = "#B5C523";
                colorHover = "#E2E1B6";
                colorActive = "#827717";
                break;
            case "yellow":
                colorMain = "#FFEB3B";
                colorHover = "#E2E1B6";
                colorActive = "#CAB600";
                break;
            case "amber":
                colorMain = "#FFC107";
                colorHover = "#FFECB3";
                colorActive = "#FF6F00";// "#F48C00";
                break;
            case "orange":
                colorMain = "#FF9800";
                colorHover = "#FFE3BB";
                colorActive = "#E65100";//"#EA7102";
                break;
            case "deep-orange":
                colorMain = "#FF5722";
                colorHover = "#FFC9B7";
                colorActive = "#BF360C";//"#E6342B";
                break;
            case "brown":
                colorMain = "#795548";
                colorHover = "#DECDC7";
                colorActive = "#3E2723";
                break;
            case "blue-grey":
                colorMain = "#607D8B";
                colorHover = "#CED8DD";
                colorActive = "#263238";
                break;
            case "grey":
                colorMain = "#0078BF";
                colorHover = "#004a77";
                colorActive = "#00304D ";
                break;
            case "white":
                colorMain = "#FFFFFF";
                colorHover = "#004a77";
                colorActive = "#616161";
                break;
            default:
                if (theme.Contains("#"))
                {
                    colorMain = colorHover = colorActive = theme;
                }
                else
                {
                    _dataCacheService.ThemeSetting.Theme = "pink lighten-2";
                    colorMain = "#F06292";
                    colorHover = "#F9B7CE";
                    colorActive = "#880E4F";
                }

                break;

        }
    }

    /// <summary>
    /// 保存本地主题配置
    /// </summary>
    /// <returns></returns>
    public async Task SaveTheme()
    {
        //if(string.IsNullOrWhiteSpace(_theme)==false)
        //{
        //    _dataCacheService.ThemeSetting.Theme = _theme;
        //}
        await _localStorage.SetItemAsync("theme", _dataCacheService.ThemeSetting);
    }

    /// <summary>
    /// 刷新
    /// </summary>
    public async Task Refresh()
    {
        if (_dataCacheService.ThemeSetting == null)
        {
            return;
        }
        //检查是否修改配置
        if (_themeSetting.DeepEquals(_dataCacheService.ThemeSetting))
        {
            return;
        }

        //刷新默认主题色
        if (MasaBlazor.Theme.Themes.Light.Primary != _dataCacheService.ThemeSetting.Theme)
        {
            //重新生成颜色
            ProcColor(_dataCacheService.ThemeSetting.Theme);
            //重新赋值
            var theme = MasaBlazor.Theme;
            // theme.Themes.Light.Primary = colorMain;
            MasaBlazor.Theme = theme;
            // MasaBlazor.ToggleTheme();
            // MasaBlazor.ToggleTheme();

            //通知MAUI
            _mauiService.ChangeTheme(colorMain);
        }



        //通知主题模式切换
        if (MasaBlazor.Theme.Dark != _dataCacheService.ThemeSetting.IsDark)
        {
            //重新赋值
            var theme = MasaBlazor.Theme;
            theme.Dark = _dataCacheService.ThemeSetting.IsDark;
            MasaBlazor.Theme = theme;
            // MasaBlazor.ToggleTheme();
            // MasaBlazor.ToggleTheme();
            //重新生成颜色
            ProcColor(_dataCacheService.ThemeSetting.IsDark ? "grey" : _dataCacheService.ThemeSetting.Theme);
            //通知MAUI
            _mauiService.ChangeTheme(colorMain);

            //await _dataCacheService.OnRefreshRequsted(null);
        }

        if (!ToolHelper.IsSSR)
        {
            //await Task.Delay(10000);
        }
        //缓存配置
        _themeSetting.SynchronizationProperties(_dataCacheService.ThemeSetting);
        await InvokeAsync(StateHasChanged);
    }

    #region 释放实例
    public void Dispose()
    {
        _eventService.SavaTheme -= OnSavaTheme;
        _eventService.TempEffectTheme -= OnTempEffectTheme;
        _eventService.CleanTempEffectTheme -= OnCleanTempEffectTheme;
        GC.SuppressFinalize(this);
    }
    #endregion
}
