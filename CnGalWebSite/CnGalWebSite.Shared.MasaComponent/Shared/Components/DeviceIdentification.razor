@inject IHttpService _httpService
@inject ILocalStorageService _localStorage
@inject IJSRuntime JS

@code {
    [CascadingParameter]
    public ErrorHandler ErrorHandler { get; set; }

    private DeviceIdentificationModel Model { get; set; } = new DeviceIdentificationModel();
    [CascadingParameter]
    private ConnectionInfo? connectionInfo { get; set; }

    public async Task<DeviceIdentificationModel> GetDeviceIdentificationModel()
    {
        await Load();
        await Refresh();
        await Save();
        return Model;
    }

    public async Task Refresh()
    {
        if (string.IsNullOrWhiteSpace(Model.Cookie))
        {
            Model.Cookie = Guid.NewGuid().ToString();
        }

        try
        {
            if (connectionInfo != null && string.IsNullOrWhiteSpace(connectionInfo.RemoteIpAddress) == false)
            {
                Model.Ip = connectionInfo.RemoteIpAddress;
            }
            else
            {
                var client = await _httpService.GetClientAsync();
                Model.Ip = await client.GetStringAsync(ToolHelper.WebApiPath+"api/account/GetIp");
            }

        }
        catch (Exception ex)
        {
            ErrorHandler.ProcessError(ex, "网络异常");
        }
    }

    public async Task Load()
    {
        try
        {
            Model = await _localStorage.GetItemAsync<DeviceIdentificationModel>("DeviceIdentification");
            if (Model == null)
            {
                Model = new DeviceIdentificationModel();
            }
        }
        catch
        {

        }

    }
    public async Task Save()
    {
        try
        {
            await _localStorage.SetItemAsync("DeviceIdentification", Model);
        }
        catch
        {

        }

    }
}
