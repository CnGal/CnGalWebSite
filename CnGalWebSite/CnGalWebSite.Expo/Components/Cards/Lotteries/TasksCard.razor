@inject NavigationManager Navigation
@inject IHttpService _httpService
@inject IPopupService _popupService
@inject IJSRuntime JS;

@using CnGalWebSite.DataModel.ViewModel.Questionnaires
@using CnGalWebSite.DataModel.ViewModel.Lotteries
@using System.Linq

<div class="lottery-tasks-card">
    @foreach (var task in GetSortedTasks())
    {
        <div class="task-card">
            <div>
                <div class="name-card">
                    @task.Name
                </div>
                <div class="content-card">
                    <div class="gift-card">
                        <MIcon>mdi-gift</MIcon>
                        <div class="count-card">@task.Points 点</div>
                    </div>
                    @if (task.IsCompleted)
                    {
                        <div class="action-card active">
                            已完成
                        </div>
                    }
                    else if (task.IsSignedIn)
                    {
                        <div class="action-card active">
                            已签到
                        </div>
                    }
                    else
                    {
                        <div class="action-card" @onclick="@task.OnClick" disabled="@task.IsLoading">
                            @if (task.IsLoading)
                            {
                                <span>@task.LoadingText</span>
                            }
                            else
                            {
                                <span>去完成</span>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>
<AuthorizeView>
    <Authorized>
        <CnGalWebSite.Expo.Components.Cards.Users.EditUserSteamInforTip @ref="editUserSteamInforTip" />
    </Authorized>
</AuthorizeView>
<CnGalWebSite.Components.Verifications.DeviceIdentification @ref="deviceIdentification" />

@code {
    [Parameter]
    public ExpoUserTaskModel Model { get; set; }

    [Parameter]
    public EventCallback OnChanged { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; }

    CnGalWebSite.Expo.Components.Cards.Users.EditUserSteamInforTip editUserSteamInforTip;
    CnGalWebSite.Components.Verifications.DeviceIdentification deviceIdentification;

    bool isDrawing = false;
    long lotteryId = 38;

    public class TaskItem
    {
        public string Name { get; set; }
        public int Points { get; set; }
        public bool IsCompleted { get; set; }
        public bool IsSignedIn { get; set; }
        public bool IsLoading { get; set; }
        public string LoadingText { get; set; }
        public Func<Task> OnClick { get; set; }
    }

    public List<TaskItem> GetSortedTasks()
    {
        var tasks = new List<TaskItem>
        {
            new TaskItem
            {
                Name = "预约CnGal十周年庆直播",
                Points = 50,
                IsCompleted = Model.IsBooking,
                OnClick = OnClickBooking
            },
            new TaskItem
            {
                Name = "晒出Steam游戏库",
                Points = 50,
                IsCompleted = Model.IsPickUpSharedGames,
                OnClick = Model.IsSharedGames ? OnClickShareGames : OnClickOpenShareGames
            },
            new TaskItem
            {
                Name = $"每日签到 ({Model.SignInDays}/5)",
                Points = 20,
                IsCompleted = Model.IsSignIn,
                OnClick = OnClickSignIn
            },
            new TaskItem
            {
                Name = "填写问卷",
                Points = 100,
                IsCompleted = Model.IsSurvey,
                OnClick = OnClickSurvey
            },
            new TaskItem
            {
                Name = "给游戏评分",
                Points = 20,
                IsCompleted = Model.IsRateGame,
                OnClick = OnClickRateGame
            },
            new TaskItem
            {
                Name = "绑定群聊QQ",
                Points = 20,
                IsCompleted = Model.IsBindQQ,
                OnClick = OnClickBindQQ
            },
            new TaskItem
            {
                Name = "更换默认头像",
                Points = 20,
                IsCompleted = Model.IsChangeAvatar,
                OnClick = OnClickChangeAvatar
            },
            new TaskItem
            {
                Name = "更换默认签名",
                Points = 20,
                IsCompleted = Model.IsChangeSignature,
                OnClick = OnClickChangeSignature
            },
            new TaskItem
            {
                Name = "填写国G世代",
                Points = 20,
                IsCompleted = Model.IsSaveGGeneration,
                OnClick = OnClickSaveGGeneration
            },
            new TaskItem
            {
                Name = "领取抽奖号码",
                Points = 100,
                IsCompleted = Model.IsLotteryNumber,
                IsLoading = isDrawing,
                LoadingText = "抽奖中",
                OnClick = OnClickLotteryNumber
            }
        };

        // 按完成状态排序：未完成在前，完成在后
        return tasks.OrderBy(t => t.IsCompleted ? 1 : 0).ToList();
    }

    public void OnEditSteam()
    {
        editUserSteamInforTip?.Refresh(true);
    }


    public async Task<bool> CheckLogin()
    {
        if (AuthState == null)
        {
            Navigation.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(Navigation.Uri)}", true);
            return false;
        }

        var authState = await AuthState;
        if (authState.User.Identity.IsAuthenticated)
        {
            return true;
        }
        else
        {
            Navigation.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(Navigation.Uri)}", true);
            return false;
        }
    }

    public async Task FinshTask(ExpoTaskType type)
    {
        try
        {
            var ret = await _httpService.PostAsync<ExpoFinshTaskModel, Result>("api/expo/UserFinshTask", new ExpoFinshTaskModel
                {
                    Type = type
                });
            if (ret.Successful == false)
            {
                await _popupService.EnqueueSnackbarAsync("完成用户任务失败", ret.Error, AlertTypes.Error);
                return;
            }

            await OnChanged.InvokeAsync();
        }
        catch (Exception ex)
        {
            await _popupService.EnqueueSnackbarAsync("完成用户任务失败", ex.Message, AlertTypes.Error);
            return;
        }
    }

    public async Task OnClickBooking()
    {
        if (await CheckLogin() == false)
        {
            return;
        }

        if (Model.IsBooking)
        {
            return;
        }

        await JS.InvokeVoidAsync("window.open", "https://space.bilibili.com/145239325", "_blank");

        await FinshTask(ExpoTaskType.Booking);
    }

    public async Task OnClickShareGames()
    {
        if (await CheckLogin() == false)
        {
            return;
        }

        if (Model.IsPickUpSharedGames)
        {
            return;
        }
        await FinshTask(ExpoTaskType.ShareGames);
    }

    public async Task OnClickOpenShareGames()
    {
        // 判断是否已经绑定Steam账号
        var model = await _httpService.GetAsync<EditUserDataViewModel>("api/space/EditUserData");
        if (model.SteamIds.Count == 0)
        {
            OnEditSteam();
            return;
        }

        await OnClickShareGames();
    }

    public async Task OnClickSignIn()
    {
        if (await CheckLogin() == false)
        {
            return;
        }

        if (Model.IsSignIn)
        {
            return;
        }

        if (Model.SignInDays >= 5)
        {
            await _popupService.EnqueueSnackbarAsync("签到失败", "签到奖励已达上限（5天）", AlertTypes.Error);
            return;
        }

        await FinshTask(ExpoTaskType.SignIn);
    }

    public async Task OnClickSurvey()
    {
        if (await CheckLogin() == false)
        {
            return;
        }

        if (Model.IsSurvey)
        {
            return;
        }

        try
        {
            // 检查用户是否已经完成问卷 (ID=1)
            var response = await _httpService.GetAsync<QuestionnaireResponseViewModel>("api/questionnaires/GetUserResponse/1");

            if (response != null)
            {
                // 用户已完成问卷，直接完成任务
                await FinshTask(ExpoTaskType.Survey);
            }
            else
            {
                // 用户未完成问卷，跳转到问卷页面
                Navigation.NavigateTo("/questionnaires");
            }
        }
        catch (Exception)
        {
            // 如果API调用失败（可能是用户未完成问卷），跳转到问卷页面
            Navigation.NavigateTo("/questionnaires");
        }
    }

    public async Task OnClickRateGame()
    {
        if (await CheckLogin() == false)
        {
            return;
        }

        if (Model.IsRateGame)
        {
            return;
        }

        try
        {
            // 检查用户是否有有效的游戏评分记录
            var hasRating = await _httpService.GetAsync<bool>("api/expo/CheckUserGameRating");

            if (hasRating)
            {
                // 用户有有效评分记录，直接完成任务
                await FinshTask(ExpoTaskType.RateGame);
            }
            else
            {
                // 用户没有有效评分记录，引导去评分
                await _popupService.EnqueueSnackbarAsync("提示", "请先对游戏进行评分后再领取奖励", AlertTypes.Info);
                await JS.InvokeVoidAsync("window.open", "https://www.cngal.org/sharegames/new", "_blank");
            }
        }
        catch (Exception)
        {
            // 如果API调用失败，直接跳转到游戏评分页面
            await JS.InvokeVoidAsync("window.open", "https://www.cngal.org/sharegames/new", "_blank");
        }
    }

    public async Task OnClickBindQQ()
    {
        if (await CheckLogin() == false)
        {
            return;
        }

        if (Model.IsBindQQ)
        {
            return;
        }

        try
        {
            // 检查用户是否已经绑定了群聊QQ
            var hasBoundQQ = await _httpService.GetAsync<bool>("api/expo/CheckUserBindQQ");

            if (hasBoundQQ)
            {
                // 用户已绑定QQ，直接完成任务
                await FinshTask(ExpoTaskType.BindQQ);
            }
            else
            {
                // 用户未绑定QQ，跳转到个人设置页面绑定
                await _popupService.EnqueueSnackbarAsync("提示", "请先绑定群聊QQ后再领取奖励", AlertTypes.Info);

                await JS.InvokeVoidAsync("window.open", "https://app.cngal.org/space/editdata", "_blank");
            }
        }
        catch (Exception)
        {
            // 如果API调用失败，直接跳转到个人设置页面
            await _popupService.EnqueueSnackbarAsync("提示", "请先绑定群聊QQ后再领取奖励", AlertTypes.Info);
            await JS.InvokeVoidAsync("window.open", "https://app.cngal.org/space/editdata", "_blank");
        }
    }

    public async Task OnClickChangeAvatar()
    {
        if (await CheckLogin() == false)
        {
            return;
        }

        if (Model.IsChangeAvatar)
        {
            return;
        }

        try
        {
            // 检查用户是否已经更换了默认头像
            var hasChangedAvatar = await _httpService.GetAsync<bool>("api/expo/CheckUserChangeAvatar");

            if (hasChangedAvatar)
            {
                // 用户已更换头像，直接完成任务
                await FinshTask(ExpoTaskType.ChangeAvatar);
            }
            else
            {
                // 用户未更换头像，跳转到个人设置页面
                await _popupService.EnqueueSnackbarAsync("提示", "请先更换默认头像后再领取奖励", AlertTypes.Info);
                await JS.InvokeVoidAsync("window.open", "https://app.cngal.org/space/editdata", "_blank");
            }
        }
        catch (Exception)
        {
            // 如果API调用失败，直接跳转到个人设置页面
            await _popupService.EnqueueSnackbarAsync("提示", "请先更换默认头像后再领取奖励", AlertTypes.Info);
            await JS.InvokeVoidAsync("window.open", "https://app.cngal.org/space/editdata", "_blank");
        }
    }

    public async Task OnClickChangeSignature()
    {
        if (await CheckLogin() == false)
        {
            return;
        }

        if (Model.IsChangeSignature)
        {
            return;
        }

        try
        {
            // 检查用户是否已经更换了默认签名
            var hasChangedSignature = await _httpService.GetAsync<bool>("api/expo/CheckUserChangeSignature");

            if (hasChangedSignature)
            {
                // 用户已更换签名，直接完成任务
                await FinshTask(ExpoTaskType.ChangeSignature);
            }
            else
            {
                // 用户未更换签名，跳转到个人设置页面
                await _popupService.EnqueueSnackbarAsync("提示", "请先更换默认签名后再领取奖励", AlertTypes.Info);
                await JS.InvokeVoidAsync("window.open", "https://app.cngal.org/space/editdata", "_blank");
            }
        }
        catch (Exception)
        {
            // 如果API调用失败，直接跳转到个人设置页面
            await _popupService.EnqueueSnackbarAsync("提示", "请先更换默认签名后再领取奖励", AlertTypes.Info);
            await JS.InvokeVoidAsync("window.open", "https://app.cngal.org/space/editdata", "_blank");
        }
    }

    public async Task OnClickSaveGGeneration()
    {
        if (await CheckLogin() == false)
        {
            return;
        }

        if (Model.IsSaveGGeneration)
        {
            return;
        }

        // 这里可以跳转到国G世代填写页面，目前直接完成任务

        await JS.InvokeVoidAsync("window.open", "https://www.cngal.org/sedai", "_blank");

        // 您可以根据实际需求修改跳转逻辑
        await FinshTask(ExpoTaskType.SaveGGeneration);
    }

    public async Task OnClickLotteryNumber()
    {
        if (await CheckLogin() == false)
        {
            return;
        }

        if (Model.IsLotteryNumber)
        {
            return;
        }

        if (isDrawing)
        {
            return;
        }
        isDrawing = true;

        try
        {
            // 检查用户是否已经参与了十周年庆典抽奖
            var hasJoinedLottery = await _httpService.GetAsync<bool>("api/expo/CheckUserJoinedLottery");

            if (hasJoinedLottery)
            {
                // 用户已参与抽奖，直接完成任务
                await FinshTask(ExpoTaskType.LotteryNumber);
            }
            else
            {
                // 用户未参与抽奖，直接参与抽奖
                var number = await ParticipateInLottery();
                if (number != null)
                {
                    // 参与成功后，完成任务
                    await FinshTask(ExpoTaskType.LotteryNumber);
                }
            }
        }
        catch (Exception ex)
        {
            await _popupService.EnqueueSnackbarAsync("操作失败", ex.Message, AlertTypes.Error);
        }
        finally
        {
            isDrawing = false;
        }
    }

    public async Task<int?> ParticipateInLottery()
    {
        // 尝试参与抽奖
        try
        {
            var obj = await _httpService.PostAsync<ParticipateInLotteryModel, Result>("api/lotteries/ParticipateInLottery", new ParticipateInLotteryModel
                {
                    Id = lotteryId,
                    Identification = await deviceIdentification.GetDeviceIdentificationModel()
                });
            if (obj.Successful)
            {
                if (int.TryParse(obj.Error, out int number) == false)
                {
                    await _popupService.EnqueueSnackbarAsync("参与抽奖失败", "获取号码失败", AlertTypes.Error);
                    return null;
                }
                else
                {
                    return number;
                }
            }
            else
            {
                await _popupService.EnqueueSnackbarAsync("参与抽奖失败", obj.Error, AlertTypes.Error);
                return null;
            }
        }
        catch (Exception ex)
        {
            await _popupService.EnqueueSnackbarAsync("参与抽奖失败", ex.Message, AlertTypes.Error);
            return null;
        }
    }
}
