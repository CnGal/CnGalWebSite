@inject NavigationManager Navigation
@inject IHttpService _httpService
@inject IPopupService _popupService
@inject IJSRuntime JS;

@using CnGalWebSite.DataModel.ViewModel.Questionnaires

<div class="lottery-tasks-card">
    <div class="task-card">
        <div>
            <div class="name-card">
                预约CnGal十周年庆直播
            </div>
            <div class="content-card">
                <div class="gift-card">
                    <MIcon>mdi-gift</MIcon>
                    <div class="count-card">50点</div>
                </div>
                @if (Model.IsBooking)
                {
                    <div class="action-card active">
                        已完成
                    </div>
                }
                else
                {
                    <div class="action-card" @onclick="@OnClickBooking">
                        去完成
                    </div>
                }

            </div>
        </div>
    </div>
    <div class="task-card">
        <div>
            <div class="name-card">
                晒出Steam游戏库
            </div>
            <div class="content-card">
                <div class="gift-card">
                    <MIcon>mdi-gift</MIcon>
                    <div class="count-card">50点</div>
                </div>
                @if (Model.IsPickUpSharedGames)
                {
                    <div class="action-card active">
                        已完成
                    </div>
                }
                else
                {
                    @if (Model.IsSharedGames)
                    {
                        <div class="action-card" @onclick="@OnClickShareGames">
                            去完成
                        </div>
                    }
                    else
                    {
                        <div class="action-card" @onclick="@OnClickOpenShareGames">
                            去完成
                        </div>
                    }
                }
            </div>
        </div>
    </div>
    <div class="task-card">
        <div>
            <div class="name-card">
                每日签到 (@Model.SignInDays/5)
            </div>
            <div class="content-card">
                <div class="gift-card">
                    <MIcon>mdi-gift</MIcon>
                    <div class="count-card">20点</div>
                </div>
                @if (Model.SignInDays >= 5)
                {
                    <div class="action-card active">
                        已完成
                    </div>
                }
                else if (Model.IsSignIn)
                {
                    <div class="action-card active">
                        已签到
                    </div>
                }
                else
                {
                    <div class="action-card" @onclick="@OnClickSignIn">
                        去完成
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="task-card">
        <div>
            <div class="name-card">
                填写问卷
            </div>
            <div class="content-card">
                <div class="gift-card">
                    <MIcon>mdi-gift</MIcon>
                    <div class="count-card">100点</div>
                </div>
                @if (Model.IsSurvey)
                {
                    <div class="action-card active">
                        已完成
                    </div>
                }
                else
                {
                    <div class="action-card" @onclick="@OnClickSurvey">
                        去完成
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="task-card">
        <div>
            <div class="name-card">
                给游戏评分
            </div>
            <div class="content-card">
                <div class="gift-card">
                    <MIcon>mdi-gift</MIcon>
                    <div class="count-card">20点</div>
                </div>
                @if (Model.IsRateGame)
                {
                    <div class="action-card active">
                        已完成
                    </div>
                }
                else
                {
                    <div class="action-card" @onclick="@OnClickRateGame">
                        去完成
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="task-card">
        <div>
            <div class="name-card">
                绑定群聊QQ
            </div>
            <div class="content-card">
                <div class="gift-card">
                    <MIcon>mdi-gift</MIcon>
                    <div class="count-card">20点</div>
                </div>
                @if (Model.IsBindQQ)
                {
                    <div class="action-card active">
                        已完成
                    </div>
                }
                else
                {
                    <div class="action-card" @onclick="@OnClickBindQQ">
                        去完成
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="task-card">
        <div>
            <div class="name-card">
                更换默认头像
            </div>
            <div class="content-card">
                <div class="gift-card">
                    <MIcon>mdi-gift</MIcon>
                    <div class="count-card">20点</div>
                </div>
                @if (Model.IsChangeAvatar)
                {
                    <div class="action-card active">
                        已完成
                    </div>
                }
                else
                {
                    <div class="action-card" @onclick="@OnClickChangeAvatar">
                        去完成
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="task-card">
        <div>
            <div class="name-card">
                更换默认签名
            </div>
            <div class="content-card">
                <div class="gift-card">
                    <MIcon>mdi-gift</MIcon>
                    <div class="count-card">20点</div>
                </div>
                @if (Model.IsChangeSignature)
                {
                    <div class="action-card active">
                        已完成
                    </div>
                }
                else
                {
                    <div class="action-card" @onclick="@OnClickChangeSignature">
                        去完成
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="task-card">
        <div>
            <div class="name-card">
                填写国G世代
            </div>
            <div class="content-card">
                <div class="gift-card">
                    <MIcon>mdi-gift</MIcon>
                    <div class="count-card">20点</div>
                </div>
                @if (Model.IsSaveGGeneration)
                {
                    <div class="action-card active">
                        已完成
                    </div>
                }
                else
                {
                    <div class="action-card" @onclick="@OnClickSaveGGeneration">
                        去完成
                    </div>
                }
            </div>
        </div>
    </div>
</div>
<AuthorizeView>
    <Authorized>
        <CnGalWebSite.Expo.Components.Cards.Users.EditUserSteamInforTip @ref="editUserSteamInforTip" />
    </Authorized>
</AuthorizeView>
@code {
    [Parameter]
    public ExpoUserTaskModel Model { get; set; }

    [Parameter]
    public EventCallback OnChanged { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; }

    CnGalWebSite.Expo.Components.Cards.Users.EditUserSteamInforTip editUserSteamInforTip;

    public void OnEditSteam()
    {
        editUserSteamInforTip?.Refresh(true);
    }


    public async Task<bool> CheckLogin()
    {
        if (AuthState == null)
        {
            Navigation.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(Navigation.Uri)}", true);
            return false;
        }

        var authState = await AuthState;
        if (authState.User.Identity.IsAuthenticated)
        {
            return true;
        }
        else
        {
            Navigation.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(Navigation.Uri)}", true);
            return false;
        }
    }

    public async Task FinshTask(ExpoTaskType type)
    {
        try
        {
            var ret = await _httpService.PostAsync<ExpoFinshTaskModel, Result>("api/expo/UserFinshTask", new ExpoFinshTaskModel
                {
                    Type = type
                });
            if (ret.Successful == false)
            {
                await _popupService.EnqueueSnackbarAsync("完成用户任务失败", ret.Error, AlertTypes.Error);
                return;
            }

            await OnChanged.InvokeAsync();
        }
        catch (Exception ex)
        {
            await _popupService.EnqueueSnackbarAsync("完成用户任务失败", ex.Message, AlertTypes.Error);
            return;
        }
    }

    public async Task OnClickBooking()
    {
        if (await CheckLogin() == false)
        {
            return;
        }

        if (Model.IsBooking)
        {
            return;
        }

        await JS.InvokeVoidAsync("window.open", "https://space.bilibili.com/145239325", "_blank");

        await FinshTask(ExpoTaskType.Booking);
    }

    public async Task OnClickShareGames()
    {
        if (await CheckLogin() == false)
        {
            return;
        }

        if (Model.IsPickUpSharedGames)
        {
            return;
        }
        await FinshTask(ExpoTaskType.ShareGames);
    }

    public async Task OnClickOpenShareGames()
    {
        // 判断是否已经绑定Steam账号
        var model = await _httpService.GetAsync<EditUserDataViewModel>("api/space/EditUserData");
        if (model.SteamIds.Count == 0)
        {
            OnEditSteam();
            return;
        }

        await OnClickShareGames();
    }

    public async Task OnClickSignIn()
    {
        if (await CheckLogin() == false)
        {
            return;
        }

        if (Model.IsSignIn)
        {
            return;
        }

        if (Model.SignInDays >= 5)
        {
            await _popupService.EnqueueSnackbarAsync("签到失败", "签到奖励已达上限（5天）", AlertTypes.Error);
            return;
        }

        await FinshTask(ExpoTaskType.SignIn);
    }

    public async Task OnClickSurvey()
    {
        if (await CheckLogin() == false)
        {
            return;
        }

        if (Model.IsSurvey)
        {
            return;
        }

        try
        {
            // 检查用户是否已经完成问卷 (ID=1)
            var response = await _httpService.GetAsync<QuestionnaireResponseViewModel>("api/questionnaires/GetUserResponse/1");

            if (response != null)
            {
                // 用户已完成问卷，直接完成任务
                await FinshTask(ExpoTaskType.Survey);
            }
            else
            {
                // 用户未完成问卷，跳转到问卷页面
                Navigation.NavigateTo("/questionnaires");
            }
        }
        catch (Exception)
        {
            // 如果API调用失败（可能是用户未完成问卷），跳转到问卷页面
            Navigation.NavigateTo("/questionnaires");
        }
    }

    public async Task OnClickRateGame()
    {
        if (await CheckLogin() == false)
        {
            return;
        }

        if (Model.IsRateGame)
        {
            return;
        }

        try
        {
            // 检查用户是否有有效的游戏评分记录
            var hasRating = await _httpService.GetAsync<bool>("api/expo/CheckUserGameRating");

            if (hasRating)
            {
                // 用户有有效评分记录，直接完成任务
                await FinshTask(ExpoTaskType.RateGame);
            }
            else
            {
                // 用户没有有效评分记录，引导去评分
                await _popupService.EnqueueSnackbarAsync("提示", "请先对游戏进行评分后再领取奖励", AlertTypes.Info);
                await JS.InvokeVoidAsync("window.open", "https://www.cngal.org/sharegames/new", "_blank");
            }
        }
        catch (Exception)
        {
            // 如果API调用失败，直接跳转到游戏评分页面
            await JS.InvokeVoidAsync("window.open", "https://www.cngal.org/sharegames/new", "_blank");
        }
    }

    public async Task OnClickBindQQ()
    {
        if (await CheckLogin() == false)
        {
            return;
        }

        if (Model.IsBindQQ)
        {
            return;
        }

        try
        {
            // 检查用户是否已经绑定了群聊QQ
            var hasBoundQQ = await _httpService.GetAsync<bool>("api/expo/CheckUserBindQQ");

            if (hasBoundQQ)
            {
                // 用户已绑定QQ，直接完成任务
                await FinshTask(ExpoTaskType.BindQQ);
            }
            else
            {
                // 用户未绑定QQ，跳转到个人设置页面绑定
                await _popupService.EnqueueSnackbarAsync("提示", "请先绑定群聊QQ后再领取奖励", AlertTypes.Info);

                await JS.InvokeVoidAsync("window.open", "https://app.cngal.org/space/editdata", "_blank");
            }
        }
        catch (Exception)
        {
            // 如果API调用失败，直接跳转到个人设置页面
            await _popupService.EnqueueSnackbarAsync("提示", "请先绑定群聊QQ后再领取奖励", AlertTypes.Info);
            await JS.InvokeVoidAsync("window.open", "https://app.cngal.org/space/editdata", "_blank");
        }
    }

    public async Task OnClickChangeAvatar()
    {
        if (await CheckLogin() == false)
        {
            return;
        }

        if (Model.IsChangeAvatar)
        {
            return;
        }

        try
        {
            // 检查用户是否已经更换了默认头像
            var hasChangedAvatar = await _httpService.GetAsync<bool>("api/expo/CheckUserChangeAvatar");

            if (hasChangedAvatar)
            {
                // 用户已更换头像，直接完成任务
                await FinshTask(ExpoTaskType.ChangeAvatar);
            }
            else
            {
                // 用户未更换头像，跳转到个人设置页面
                await _popupService.EnqueueSnackbarAsync("提示", "请先更换默认头像后再领取奖励", AlertTypes.Info);
                await JS.InvokeVoidAsync("window.open", "https://app.cngal.org/space/editdata", "_blank");
            }
        }
        catch (Exception)
        {
            // 如果API调用失败，直接跳转到个人设置页面
            await _popupService.EnqueueSnackbarAsync("提示", "请先更换默认头像后再领取奖励", AlertTypes.Info);
            await JS.InvokeVoidAsync("window.open", "https://app.cngal.org/space/editdata", "_blank");
        }
    }

    public async Task OnClickChangeSignature()
    {
        if (await CheckLogin() == false)
        {
            return;
        }

        if (Model.IsChangeSignature)
        {
            return;
        }

        try
        {
            // 检查用户是否已经更换了默认签名
            var hasChangedSignature = await _httpService.GetAsync<bool>("api/expo/CheckUserChangeSignature");

            if (hasChangedSignature)
            {
                // 用户已更换签名，直接完成任务
                await FinshTask(ExpoTaskType.ChangeSignature);
            }
            else
            {
                // 用户未更换签名，跳转到个人设置页面
                await _popupService.EnqueueSnackbarAsync("提示", "请先更换默认签名后再领取奖励", AlertTypes.Info);
                await JS.InvokeVoidAsync("window.open", "https://app.cngal.org/space/editdata", "_blank");
            }
        }
        catch (Exception)
        {
            // 如果API调用失败，直接跳转到个人设置页面
            await _popupService.EnqueueSnackbarAsync("提示", "请先更换默认签名后再领取奖励", AlertTypes.Info);
            await JS.InvokeVoidAsync("window.open", "https://app.cngal.org/space/editdata", "_blank");
        }
    }

    public async Task OnClickSaveGGeneration()
    {
        if (await CheckLogin() == false)
        {
            return;
        }

        if (Model.IsSaveGGeneration)
        {
            return;
        }

        // 这里可以跳转到国G世代填写页面，目前直接完成任务

        await JS.InvokeVoidAsync("window.open", "https://www.cngal.org/sedai", "_blank");

        // 您可以根据实际需求修改跳转逻辑
        await FinshTask(ExpoTaskType.SaveGGeneration);
    }
}
